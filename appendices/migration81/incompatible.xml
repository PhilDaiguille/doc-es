<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 497c40ac164d5873fd87f622dfdeb5206392b446 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes -->
<sect1 xml:id="migration81.incompatible" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Cambios incompatibles con versiones anteriores</title>

 <sect2 xml:id="migration81.incompatible.core">
  <title>PHP Core</title>

  <sect3 xml:id="migration81.incompatible.core.globals-access">
   <title>Restricciones de acceso a $GLOBALS</title>

   <para>
    El acceso al array <varname>$GLOBALS</varname> está ahora sujeto a
    un cierto número de restricciones.
    El acceso en lectura y en escritura a los elementos individuales del array como
    <code>$GLOBALS['var']</code> continúa funcionando como tal.
    El acceso en lectura al array completo <varname>$GLOBALS</varname> continúa
    también siendo soportado.
    Sin embargo, el acceso en escritura al array completo <varname>$GLOBALS</varname>
    ya no es soportado. Por ejemplo, <code>array_pop($GLOBALS)</code>
    generará un error.
   </para>
  </sect3>

  <sect3 xml:id="migration81.incompatible.core.static-variable-inheritance">
   <title>
    Uso de variables <modifier>static</modifier> en los métodos heredados.
   </title>

   <para>
    Cuando un método que utiliza variables <modifier>static</modifier> es heredado
    (pero no sobrescrito), el método heredado compartirá ahora las variables.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
class A {
    public static function counter() {
        static $counter = 0;
        $counter++;
        return $counter;
    }
}
class B extends A {}
var_dump(A::counter()); // int(1)
var_dump(A::counter()); // int(2)
var_dump(B::counter()); // int(3), anteriormente int(1)
var_dump(B::counter()); // int(4), anteriormente int(2)
?>
]]>
     </programlisting>
    </informalexample>
    Esto significa que las variables estáticas en los métodos se comportan ahora
    de la misma manera que las propiedades estáticas.
   </para>
  </sect3>

  <sect3 xml:id="migration81.incompatible.core.optional-before-required">
   <title>Parámetros opcionales especificados antes de los parámetros requeridos</title>

   <para>
    Un <link linkend="functions.arguments.default">parámetro opcional</link>
    especificado antes de los parámetros requeridos es ahora siempre tratado como requerido,
    incluso cuando se llama utilizando
    <link linkend="functions.named-arguments">los argumentos nombrados</link>.
    A partir de PHP 8.0.0, pero antes de PHP 8.1.0, el código a continuación emite una nota de deprecación
    en la definición, pero se ejecuta con éxito cuando se llama. A partir de PHP 8.1.0, se lanza un error
    de la clase <classname>ArgumentCountError</classname>, como sería el caso cuando
    se llama con argumentos posicionales.

    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
function makeyogurt($container = "bowl", $flavour)
{
    return "Making a $container of $flavour yogurt.\n";
}
try
{
    echo makeyogurt(flavour: "raspberry");
}
catch (Error $e)
{
    echo get_class($e), ' - ', $e->getMessage(), "\n";
}
?>
]]>
     </programlisting>
     &example.outputs.80;
     <screen>
<![CDATA[
Deprecated: Required parameter $flavour follows optional parameter $container
 in example.php on line 3
Making a bowl of raspberry yogurt.
]]>
     </screen>
     &example.outputs.81;
     <screen>
<![CDATA[
Deprecated: Optional parameter $container declared before required parameter
 $flavour is implicitly treated as a required parameter in example.php on line 3
ArgumentCountError - makeyogurt(): Argument #1 ($container) not passed
]]>
     </screen>
    </informalexample>
   </para>
   <para>
    Tenga en cuenta que un valor por defecto de &null; puede ser utilizado antes de los parámetros requeridos para
    especificar un <link linkend="language.types.declarations.nullable">tipo nullable</link>,
    pero el parámetro será siempre requerido.
   </para>
  </sect3>

  <sect3 xml:id="migration81.incompatible.core.type-compatibility-internal">
   <title>Compatibilidad de tipos de retorno con clases internas</title>

   <para>
    La mayoría de los métodos internos no finales requieren ahora que los métodos de sobrecarga declaren
    un tipo de retorno compatible, de lo contrario se emite una nota de deprecación al validar la herencia.
    En el caso en que el tipo de retorno no pueda ser declarado para un método de sobrecarga debido a
    preocupaciones de compatibilidad inter-versión de PHP,
    un atributo <classname>ReturnTypeWillChange</classname> puede ser añadido para suprimir la nota de deprecación.
   </para>
  </sect3>

  <sect3 xml:id="migration81.incompatible.core.new-keywords">
   <title>Nuevas palabras clave</title>
   <para>
    <literal>readonly</literal> es ahora una palabra clave. Sin embargo, aún puede ser utilizada
    como nombre de función.
   </para>
   <para>
    <literal>never</literal> es ahora una palabra reservada, por lo que no puede ser utilizada para nombrar una clase,
    una interfaz o un trait, y también está prohibido su uso en los namespaces.
   </para>
  </sect3>
 </sect2>

 <sect2 xml:id="migration81.incompatible.resource2object">
  <title>Migración de recurso a objeto</title>

  <para>
   Varios &resource;s han sido migrados a &object;s.
   Las verificaciones de valor de retorno utilizando <function>is_resource</function> deben ser reemplazadas por verificaciones de &false;.
  </para>
  <itemizedlist>
   <listitem>
    <para>
     Las funciones <link linkend="book.fileinfo">FileInfo</link> aceptan y devuelven ahora
     objetos <classname>finfo</classname> en lugar
     de &resource;s <literal>fileinfo</literal>.
    </para>
   </listitem>
   <listitem>
    <para>
     Las funciones <link linkend="book.ftp">FTP</link> aceptan y devuelven ahora
     objetos <classname>FTP\Connection</classname> en lugar
     de &resource;s <literal>ftp</literal>.
    </para>
   </listitem>
   <listitem>
    <para>
     Las funciones <link linkend="book.imap">IMAP</link> aceptan y devuelven ahora
     objetos <classname>IMAP\Connection</classname> en lugar
     de &resource;s <literal>imap</literal>.
    </para>
   </listitem>
   <listitem>
    <para>
     Las funciones <link linkend="book.ldap">LDAP</link> aceptan y devuelven ahora
     objetos <classname>LDAP\Connection</classname> en lugar
     de &resource;s <literal>ldap</literal>.
    </para>
   </listitem>
   <listitem>
    <para>
     Las funciones <link linkend="book.ldap">LDAP</link> aceptan y devuelven ahora
     objetos <classname>LDAP\Result</classname> en lugar
     de &resource;s <literal>ldap result</literal>.
    </para>
   </listitem>
   <listitem>
    <para>
     Las funciones <link linkend="book.ldap">LDAP</link> aceptan y devuelven ahora
     objetos <classname>LDAP\ResultEntry</classname> en lugar
     de &resource;s <literal>ldap result entry</literal>.
    </para>
   </listitem>
   <listitem>
    <para>
     Las funciones <link linkend="book.pgsql">PgSQL</link> aceptan y devuelven ahora
     objetos <classname>PgSql\Connection</classname> en lugar
     de &resource;s <literal>pgsql link</literal>.
    </para>
   </listitem>
   <listitem>
    <para>
     Las funciones <link linkend="book.pgsql">PgSQL</link> aceptan y devuelven ahora
     objetos <classname>PgSql\Result</classname> en lugar
     de &resource;s <literal>pgsql result</literal>.
    </para>
   </listitem>
   <listitem>
    <para>
     Las funciones <link linkend="book.pgsql">PgSQL</link> aceptan y devuelven ahora
     objetos <classname>PgSql\Lob</classname> en lugar
     de &resource;s <literal>pgsql large object</literal>.
    </para>
   </listitem>
   <listitem>
    <para>
     Las funciones <link linkend="book.pspell">PSpell</link> aceptan y devuelven ahora
     objetos <classname>PSpell\Dictionary</classname> en lugar
     de &resource;s <literal>pspell</literal>.
    </para>
   </listitem>
   <listitem>
    <para>
     Las funciones <link linkend="book.pspell">PSpell</link> aceptan y devuelven ahora
     objetos <classname>PSpell\Config</classname> en lugar
     de &resource;s <literal>pspell config</literal>.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration81.incompatible.mysqli">
  <title>MySQLi</title>

  <para>
   <function>mysqli_fetch_fields</function>, y
   <function>mysqli_fetch_field_direct</function> devolverán ahora
   <literal>0</literal> para la <property>max_length</property>.
   Esta información puede ser calculada iterando sobre el conjunto de resultados,
   y tomando la longitud máxima. Esto es lo que PHP hacía
   anteriormente de manera interna.
  </para>

  <para>
   La opción <constant>MYSQLI_STMT_ATTR_UPDATE_MAX_LENGTH</constant>
   ya no tiene ningún efecto.
  </para>

  <para>
   La opción <constant>MYSQLI_STORE_RESULT_COPY_DATA</constant>
   ya no tiene ningún efecto. Pasar un valor al
   parámetro <parameter>mode</parameter> de
   <methodname>mysqli::store_result</methodname> ya no tiene ningún efecto.
  </para>

  <para>
   <methodname>mysqli::connect</methodname> devuelve ahora &true; en lugar de &null; en caso de éxito.
  </para>

  <para>
   El modo de manejo de errores por defecto ha sido cambiado de "silencioso" a "excepciones".
   Ver la página <link linkend="mysqli-driver.report-mode">Modo de reporte MySQLi</link>
   para más detalles sobre lo que esto implica,
   y cómo definir explícitamente este atributo.
   Para restaurar el comportamiento anterior, utilice :
   <code>mysqli_report(MYSQLI_REPORT_OFF);</code>
  </para>

  <para>
   Las clases que extienden <methodname>mysqli_stmt::execute</methodname>
   deben ahora especificar el parámetro opcional adicional.
  </para>
 </sect2>

 <sect2 xml:id="migration81.incompatible.mysqlnd">
  <title>MySQLnd</title>

  <para>
   La directiva INIT <link linkend="ini.mysqlnd.fetch_data_copy">mysqlnd.fetch_data_copy</link>
   ha sido eliminada.
   Esto no debería resultar en cambios de comportamiento visibles para el usuario.
  </para>
 </sect2>

 <sect2 xml:id="migration81.incompatible.openssl">
  <title>OpenSSL</title>

  <para>
   Las claves privadas EC serán ahora exportadas en formato <acronym>PKCS</acronym>#8 en lugar
   del formato tradicional, al igual que todas las demás claves.
  </para>
  <para>
   <function>openssl_pkcs7_encrypt</function> y
   <function>openssl_cms_encrypt</function> utilizarán ahora por defecto
   AES-128-CBC en lugar de RC2-40. El cifrado RC2-40 es considerado
   como no seguro y no está habilitado por defecto por OpenSSL 3.
  </para>
 </sect2>

 <sect2 xml:id="migration81.incompatible.pdo">
  <title>Objetos de datos PHP</title>

  <para>
   <constant>PDO::ATTR_STRINGIFY_FETCHES</constant> transforma ahora los valores
   de tipo &boolean; en <literal>"0"</literal> o
   <literal>"1"</literal>. Anteriormente, los &boolean; no eran transformados en cadenas.
  </para>
  <para>
   Llamar a <methodname>PDOStatement::bindColumn</methodname> con
   <constant>PDO::PARAM_LOB</constant> enlazará ahora constantemente un stream
   de resultado cuando <constant>PDO::ATTR_STRINGIFY_FETCHES</constant> no esté activado.
   Anteriormente, el resultado era o bien un stream o bien una cadena dependiendo del
   controlador de base de datos utilizado y del momento en que se realizaba el enlace.
  </para>

  <sect3 xml:id="migration81.incompatible.pdo.mysql">
   <title>Controlador MySQL</title>

   <para>
    Los enteros y los flotantes en los conjuntos de resultados serán ahora devueltos utilizando
    los tipos nativos PHP en lugar de &string;s al utilizar las declaraciones preparadas emuladas.
    Esto corresponde al comportamiento de las declaraciones preparadas nativas.
    El comportamiento anterior puede ser restaurado activando la opción
    <constant>PDO::ATTR_STRINGIFY_FETCHES</constant>.
   </para>
  </sect3>

  <sect3 xml:id="migration81.incompatible.pdo.sqlite">
   <title>Controlador SQLite</title>

   <para>
    Los enteros y los flotantes en los conjuntos de resultados serán ahora devueltos utilizando
    los tipos PHP.
    El comportamiento anterior puede ser restaurado activando la opción
    <constant>PDO::ATTR_STRINGIFY_FETCHES</constant>.
   </para>
  </sect3>
 </sect2>

 <sect2 xml:id="migration81.incompatible.phar">
  <title>Phar</title>

  <para>
   Para cumplir con la interfaz <interfacename>ArrayAccess</interfacename>,
   <methodname>Phar::offsetUnset</methodname> y
   <methodname>PharData::offsetUnset</methodname> ya no devuelven un &boolean;.
  </para>
 </sect2>

 <sect2 xml:id="migration81.incompatible.standard">
  <title>Estándar</title>

  <para>
   <function>version_compare</function> ya no acepta las abreviaciones de operadores no documentadas.
  </para>

  <para>
   <function>htmlspecialchars</function>,
   <function>htmlentities</function>,
   <function>htmlspecialchars_decode</function>,
   <function>html_entity_decode</function>,
   y <function>get_html_translation_table</function>
   utilizan ahora <literal>ENT_QUOTES | ENT_SUBSTITUTE</literal> en lugar de
   <constant>ENT_COMPAT</constant> por defecto.
   Esto significa que <literal>'</literal> es escapado en
   <literal>&amp;#039;</literal> mientras que anteriormente no se hacía nada.
   Además, el UTF-8 mal formado será reemplazado por un carácter de sustitución Unicode,
   en lugar de resultar en una cadena vacía.
  </para>

  <para>
   <function>debug_zval_dump</function> muestra ahora el refcount de las referencias
   con su refcount, en lugar de simplemente anteponer
   <literal>&amp;</literal> al valor.
   Esto modela más precisamente la representación de referencia desde PHP 7.0.
  </para>

  <para>
   <function>debug_zval_dump</function> muestra ahora <literal>interned</literal>
   en lugar de un refcount ficticio para las cadenas internadas y los arrays inmutables.
  </para>
 </sect2>

 <sect2 xml:id="migration81.incompatible.spl">
  <title>Biblioteca Estándar de PHP (Standard PHP Library o SPL)</title>

  <para>
   <classname>SplFixedArray</classname>, será ahora codificado en JSON como un &array;.
  </para>
 </sect2>

</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
