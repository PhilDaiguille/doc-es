<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 161dde4fe721309398dd324edbf02aec409f127b Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes Maintainer: Marqitos -->
<sect1 xml:id="migration81.new-features" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Nuevas Funcionalidades</title>

 <sect2 xml:id="migration81.new-features.core">
  <title>Núcleo de PHP</title>

  <sect3 xml:id="migration81.new-features.core.octal-literal-prefix">
   <title>Prefijo literal octal entero</title>

   <para>
    Los enteros octales ahora pueden usar un prefijo explícito
    <literal>0o</literal>/<literal>0O</literal>
    en literales enteros,
    de manera similar a los literales enteros binarios y hexadecimales.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
014;  // Literal octal sin prefijo
0o14; // Literal octal prefixed
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <!-- RFC: https://wiki.php.net/rfc/explicit_octal_notation -->
  </sect3>

  <sect3 xml:id="migration81.new-features.core.unpacking-string-keys">
   <title>Desempaquetado de array con claves de cadena de caracteres</title>

   <para>
    Se ha añadido soporte para <link linkend="language.types.array.unpacking">el desempaquetado de array con claves de cadena de caracteres</link>.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$arr1 = [1, 'a' => 'b'];
$arr2 = [...$arr1, 'c' => 'd']; //[1, 'a' => 'b', 'c' => 'd']
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <!-- RFC: https://wiki.php.net/rfc/array_unpacking_string_keys -->
  </sect3>

  <sect3 xml:id="migration81.new-features.core.named-arg-after-unpack">
   <title>Argumento nombrado después de un desempaquetado de argumento</title>

   <para>
    Ahora es posible especificar argumentos nombrados después de un desempaquetado de argumento.
    <!-- TODO Add an example -->
    por ejemplo:
    foo(...$args, named: $arg).
   </para>
  </sect3>

  <sect3 xml:id="migration81.new-features.core.upload-full-path-key">
   <title>Clave de ruta completa para subidas de archivos</title>

   <para>
    Las subidas de archivos ahora proporcionan una clave <literal>full_path</literal> adicional,
    que contiene la ruta completa (en lugar de solo el nombre base) del archivo subido.
    Esto está destinado a ser usado en conjunción con "upload webkitdirectory".
   </para>
   <!-- RFC: https://wiki.php.net/rfc/array_unpacking_string_keys -->
  </sect3>

  <sect3 xml:id="migration81.new-features.core.enums">
   <title>Enumeraciones</title>

   <para>
    Se ha añadido soporte para <link linkend="language.enumerations">enumeraciones</link>.
    <!-- RFC: https://wiki.php.net/rfc/enumerations -->
   </para>
  </sect3>

  <sect3 xml:id="migration81.new-features.core.fibers">
   <title>Fibras</title>

   <para>
    Se ha añadido soporte para <link linkend="language.fibers">fibras</link>.
    <!-- RFC: https://wiki.php.net/rfc/fibers -->
   </para>
  </sect3>

  <sect3 xml:id="migration81.new-features.core.callable-syntax">
   <title>Sintaxis de callable de primera clase</title>

   <para>
    Las cierres para callables ahora pueden ser creadas usando <link linkend="functions.first_class_callable_syntax">la sintaxis <code>myFunc(...)</code></link>,
    que es idéntica a <code>Closure::fromCallable('myFunc')</code>.
    <!-- RFC: https://wiki.php.net/rfc/first_class_callable_syntax -->
   </para>
   <note>
    <simpara>
     El <code>...</code> es parte de la sintaxis, y no una omisión.
    </simpara>
   </note>
  </sect3>

  <sect3 xml:id="migration81.new-features.core.intersection-types">
   <title>Intersección de tipos</title>

   <para>
    Se ha añadido soporte para <link linkend="language.types.type-system.composite.intersection">intersección de tipos</link>.
    <!-- RFC: https://wiki.php.net/rfc/pure-intersection-types -->
   </para>
   <caution>
    <simpara>
     <link linkend="language.types.type-system.composite.intersection">
      Los tipos de intersección</link> no pueden ser usados con
      <link linkend="language.types.declarations.composite.union">
      los tipos de unión</link>
    </simpara>
   </caution>
  </sect3>

  <sect3 xml:id="migration81.new-features.core.never-type">
   <title>El tipo never</title>

   <para>
    Se ha añadido un nuevo tipo de retorno &never;.
    Esto indica que una función o bien <function>exit</function>,
    lanza una excepción, o no termina.
    <!-- RFC: https://wiki.php.net/rfc/noreturn_type -->
   </para>
  </sect3>

  <sect3 xml:id="migration81.new-features.core.new-in-initializer">
   <title>&new; en los inicializadores</title>

   <para>
    Ahora es posible usar expresiones <code>new ClassName()</code> como
    valor por defecto de un parámetro, una variable estática, inicializadores de constantes globales,
    y como argumentos de atributo.
    Los objetos también pueden ser pasados a <function>define</function> ahora.
    <!-- TODO Add an example -->
   </para>
   <!-- RFC: https://wiki.php.net/rfc/new_in_initializers -->
  </sect3>

  <sect3 xml:id="migration81.new-features.core.readonly">
   <title>Propiedades de solo lectura</title>

   <para>
    Se ha añadido soporte para <link linkend="language.oop5.properties.readonly-properties">solo lectura</link>.
    <!-- RFC: https://wiki.php.net/rfc/readonly_properties_v2 -->
   </para>
  </sect3>

  <sect3 xml:id="migration81.new-features.core.final-constants">
   <title>Constantes de clase finales</title>

   <para>
    Se ha añadido soporte para <link linkend="language.oop5.final.example.php81">el modificador <modifier>final</modifier> para constantes de clase</link>.
    Además, las constantes de interfaz se vuelven sobrecargables por defecto.
    <!-- RFC: https://wiki.php.net/rfc/final_class_const -->
   </para>
  </sect3>

 </sect2>

 <sect2 xml:id="migration81.new-features.curl">
  <title>CURL</title>

  <para>
   Se ha añadido la opción <constant>CURLOPT_DOH_URL</constant>.
  </para>

  <para>
   Se han añadido opciones para certificados blob cuando libcurl &gt;= 7.71.0:
  </para>
  <itemizedlist>
   <listitem>
    <simpara><constant>CURLOPT_ISSUERCERT_BLOB</constant></simpara>
   </listitem>
   <listitem>
    <simpara><constant>CURLOPT_PROXY_ISSUERCERT</constant></simpara>
   </listitem>
   <listitem>
    <simpara><constant>CURLOPT_PROXY_ISSUERCERT_BLOB</constant></simpara>
   </listitem>
   <listitem>
    <simpara><constant>CURLOPT_PROXY_SSLCERT_BLOB</constant></simpara>
   </listitem>
   <listitem>
    <simpara><constant>CURLOPT_PROXY_SSLKEY_BLOB</constant></simpara>
   </listitem>
   <listitem>
    <simpara><constant>CURLOPT_SSLCERT_BLOB</constant></simpara>
   </listitem>
   <listitem>
    <simpara><constant>CURLOPT_SSLKEY_BLOB</constant></simpara>
   </listitem>
  </itemizedlist>

  <para>
   Se ha añadido <classname>CURLStringFile</classname>, que puede ser usado para enviar
    un archivo desde una &string; en lugar de un archivo:
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$file = new CURLStringFile($data, 'filename.txt', 'text/plain');
curl_setopt($curl, CURLOPT_POSTFIELDS, ['file' => $file]);
?>
]]>
    </programlisting>
   </informalexample>
  </para>
 </sect2>

 <sect2 xml:id="migration81.new-features.fpm">
  <title>FPM</title>

  <para>
   Se ha añadido el formato de estado openmetrics. Puede ser usado por Prometheus para recuperar
   las métricas FPM.
  </para>
  <para>
   Se ha añadido una nueva opción de pool para el gestor de procesos dinámico llamada
   <literal>pm.max_spawn_rate</literal>. Permite iniciar un número de hijos
   a una tasa más rápida cuando el gestor de procesos dinámico está seleccionado.
   El valor por defecto es <literal>32</literal> que era el valor anterior
   codificado.
  </para>
 </sect2>

 <sect2 xml:id="migration81.new-features.gd">
  <title>GD</title>

  <para>
   El soporte Avif ahora está disponible a través de
   <function>imagecreatefromavif</function> y
   <function>imageavif</function>,
   si libgd ha sido compilado con soporte Avif.
  </para>
 </sect2>

 <sect2 xml:id="migration81.new-features.hash">
  <title>Hash</title>

  <para>
   Las siguientes funciones <function>hash</function>,
   <function>hash_file</function>, y <function>hash_init</function>
   ahora soportan un nuevo argumento opcional <parameter>options</parameter>,
   que puede ser usado para pasar datos específicos al algoritmo.
  </para>

  <sect3 xml:id="migration81.new-features.hash.murmurhash3">
   <title>MurmurHash3</title>

   <para>
    Se ha añadido soporte para <literal>MurmurHash3</literal> con soporte de streaming.
    Las siguientes variantes están implementadas:
   </para>
   <itemizedlist>
    <listitem>
     <simpara>murmur3a, hash de 32-bit</simpara>
    </listitem>
    <listitem>
     <simpara>murmur3c, hash de 128-bit para x86</simpara>
    </listitem>
    <listitem>
     <simpara>murmur3f, hash de 128-bit para x64</simpara>
    </listitem>
   </itemizedlist>

   <para>
    El estado de hash inicial puede ser pasado vía la clave <literal>seed</literal>
    en el array <parameter>options</parameter>, por ejemplo:
    <informalexample>
     <programlisting role="php">
      <![CDATA[
<?php
$h = hash("murmur3f", $data, options: ["seed" => 42]);
echo $h, "\n";
?>
]]>
     </programlisting>
    </informalexample>

    Un valor de semilla válido está en el rango de <literal>0</literal>
    a la <constant>UINT_MAX</constant> definida por la plataforma, generalmente
    <literal>4294967295</literal>.
   </para>
  </sect3>

  <sect3 xml:id="migration81.new-features.hash.xxhash">
   <title>xxHash</title>

   <para>
    Se ha añadido soporte para <literal>xxHash</literal>.
    Las siguientes variantes están implementadas:
   </para>
   <itemizedlist>
    <listitem>
     <simpara>xxh32, hash de 32-bit</simpara>
    </listitem>
    <listitem>
     <simpara>xxh64, hash de 64-bit</simpara>
    </listitem>
    <listitem>
     <simpara>xxh3, hash de 64-bit</simpara>
    </listitem>
    <listitem>
     <simpara>xxh128, hash de 128-bit</simpara>
    </listitem>
   </itemizedlist>

   <para>
    El estado de hash inicial puede ser pasado vía la clave <literal>seed</literal>
    en el array <parameter>options</parameter>, por ejemplo:

    <informalexample>
     <programlisting role="php">
      <![CDATA[
<?php
$h = hash("xxh3", $data, options: ["seed" => 42]);
echo $h, "\n";
?>
]]>
     </programlisting>
    </informalexample>

    El uso secreto es soportado pasando la clave <literal>secret</literal>
    en el array <parameter>options</parameter>, también:

    <informalexample>
     <programlisting role="php">
      <![CDATA[
<?php
$h = hash("xxh3", $data, options: ["secret" => "at least 136 bytes long secret here"]);
echo $h, "\n";
?>
]]>
     </programlisting>
    </informalexample>

    La calidad del secreto personalizado es crucial para la calidad del hash resultante.
    Se recomienda encarecidamente usar la mejor entropía posible.
   </para>
  </sect3>
 </sect2>

 <sect2 xml:id="migration81.new-features.mysqli">
  <title>MySQLi</title>

  <sect3 xml:id="migration81.new-features.mysqli.local_infile_directory">
   <title>Nueva directiva INI<literal>mysqli.local_infile_directory</literal></title>

   <para>
    Se ha añadido la directiva INI <link linkend="ini.mysqli.local-infile-directory">mysqli.local_infile_directory</link>,
    que puede ser usada para especificar un directorio desde el cual
    los archivos están permitidos ser cargados. Solo tiene sentido si
    <link linkend="ini.mysqli.allow-local-infile">mysqli.allow_local_infile</link>
    no está activado, ya que todos los directorios están permitidos en ese caso.
   </para>
  </sect3>

  <sect3 xml:id="migration81.new-features.mysqli.bind-in-execute">
   <title>Enlazar parámetros en execute</title>

   <para>
    Ahora es posible enlazar parámetros pasándolos como un array a
    <methodname>mysqli_stmt::execute</methodname>. Todos los valores serán enlazados como
    strings. Solo los arrays de lista están permitidos. Esta nueva funcionalidad no está disponible
    cuando MySQLi es compilado con libmysqlclient.
    <!-- RFC: https://wiki.php.net/rfc/mysqli_bind_in_execute -->
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$stmt = $mysqli->prepare('INSERT INTO users(id, name) VALUES(?,?)');
$stmt->execute([1, $username]);
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>

  <sect3 xml:id="migration81.new-features.mysqli.mysqli_fetch_column">
   <title>Nuevo método <methodname>mysqli_result::fetch_column</methodname></title>

   <para>
    <methodname>mysqli_result::fetch_column</methodname>
    ha sido añadido para permitir recuperar un solo valor escalar del conjunto de resultados.
    El nuevo método acepta un parámetro de columna opcional <parameter>column</parameter> basado en 0
    de tipo &integer; especificando qué columna recuperar.
    <!-- RFC: https://wiki.php.net/rfc/mysqli_fetch_column -->
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$result = $mysqli->query('SELECT username FROM users WHERE id = 123');
echo $result->fetch_column();
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>

 </sect2>

 <sect2 xml:id="migration81.new-features.pdo_mysql">
  <title>PDO</title>

  <para>
   Se ha añadido el atributo <constant>PDO::MYSQL_ATTR_LOCAL_INFILE_DIRECTORY</constant>,
   que puede ser usado para especificar un directorio desde el cual los archivos
   están permitidos ser cargados.
   Solo tiene sentido si <constant>PDO::MYSQL_ATTR_LOCAL_INFILE</constant>
   no está activado, ya que todos los directorios están permitidos en ese caso.
  </para>
 </sect2>

 <sect2 xml:id="migration81.new-features.pdo_sqlite">
  <title>PDO_SQLite</title>

  <para>
   La sintaxis DSN <literal>"file:"</literal> de SQLite ahora es soportada,
   lo que permite especificar banderas adicionales.
   Esta funcionalidad no está disponible si open_basedir está definido.
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
new PDO('sqlite:file:path/to/sqlite.db?mode=ro')
?>
]]>
    </programlisting>
   </informalexample>
  </para>
 </sect2>

 <sect2 xml:id="migration81.new-features.posix">
  <title>POSIX</title>

  <para>
   Se ha añadido <constant>POSIX_RLIMIT_KQUEUES</constant> y <constant>POSIX_RLIMIT_NPTS</constant>.
   Estos límites soft y hard solo están disponibles en FreeBSD.
  </para>
 </sect2>

 <sect2 xml:id="migration81.new-features.standard">
  <title>Estándar</title>

  <para>
   <function>fputcsv</function> ahora acepta un nuevo argumento
   <parameter>eol</parameter> que permite definir una secuencia de
   fin de línea personalizada, el valor por defecto sigue siendo el mismo y es <literal>"\n"</literal>.
  </para>
 </sect2>

 <sect2 xml:id="migration81.new-features.spl">
  <title>SPL</title>

  <para>
   <methodname>SplFileObject::fputcsv</methodname> ahora acepta un nuevo argumento
   <parameter>eol</parameter> que permite definir una secuencia de
   fin de línea personalizada, el valor por defecto sigue siendo el mismo y es <literal>"\n"</literal>.
  </para>
 </sect2>

</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
