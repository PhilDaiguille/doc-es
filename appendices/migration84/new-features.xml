<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 22583751fbfdaa3eaa41aeb6470d1343f5cb2c78 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes -->
<sect1 xml:id="migration84.new-features">
 <title>Nuevas funcionalidades</title>

 <!-- TODO: Core features for 8.4 -->
 <sect2 xml:id="migration84.new-features.core">
  <title>PHP Core</title>

  <!-- RFC: https://wiki.php.net/rfc/property-hooks -->
  <sect3 xml:id="migration84.new-features.core.property-hooks">
   <title>Propiedades con hooks</title>

   <simpara>
    TODO
   </simpara>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
/*
ejemplos
*/

]]>
    </programlisting>
   </informalexample>
  </sect3>

  <!-- RFC: https://wiki.php.net/rfc/asymmetric-visibility-v2 -->
  <sect3 xml:id="migration84.new-features.core.asymmetric-property-visibility">
   <title>Visibilidad asimétrica de las propiedades</title>

   <simpara>
    Las propiedades de objeto ahora pueden tener su visibilidad
    <literal>set</literal> controlada separadamente de la visibilidad <literal>get</literal>.
   </simpara>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
class Example
{
    // El primer modificador de visibilidad controla la visibilidad de lectura,
    // y el segundo modificador controla la visibilidad de escritura.
    // La visibilidad de lectura no debe ser más restrictiva que la visibilidad de escritura.
    public protected(set) string $name;

    public function __construct(string $name)
    {
        $this->name = $name;
    }
}
]]>
    </programlisting>
   </informalexample>
  </sect3>

  <!-- RFC: https://wiki.php.net/rfc/lazy-objects -->
  <sect3 xml:id="migration84.new-features.core.lazy-objects">
   <title>Objetos perezosos</title>
   <simpara>
    Ahora es posible crear objetos cuya inicialización se difiere hasta
    su acceso. Las bibliotecas y frameworks pueden aprovechar estos objetos perezosos
    para diferir la recuperación de datos o dependencias necesarias para la inicialización.
   </simpara>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
class Example
{
    public function __construct(private int $data)
    {
    }

    // ...
}

$initializer = static function (Example $prototype): void {
    // Recuperar datos o dependencias
    $data = getData();
    // Inicializar
    $prototype->__construct($data);
};

$reflector = new ReflectionClass(Example::class);
$object = $reflector->newLazyInstance($initializer);
]]>
    </programlisting>
   </informalexample>
  </sect3>

  <!-- RFC: https://wiki.php.net/rfc/deprecated_attribute -->
  <sect3 xml:id="migration84.new-features.core.deprecated-attribute">
   <title>El atributo <code>#[\Deprecated]</code></title>

   <simpara>
    El nuevo atributo <classname>Deprecated</classname> puede ser utilizado para marcar funciones, métodos,
    y constantes de clase como obsoletos. El comportamiento de esta funcionalidad obsoleta utilizando este
    atributo corresponde al del mecanismo de obsolescencia ya existente para las funcionalidades proporcionadas
    por PHP mismo. La única excepción es que el código de error emitido es
    <constant>E_USER_DEPRECATED</constant> en lugar de <constant>E_DEPRECATED</constant>.
   </simpara>

   <simpara>
    Las obsolescencias existentes en las funcionalidades proporcionadas por PHP mismo han sido actualizadas para utilizar
    este atributo, mejorando los mensajes de error emitidos incluyendo una breve explicación.
   </simpara>
  </sect3>

  <!-- RFC: https://wiki.php.net/rfc/rfc1867-non-post -->
  <sect3 xml:id="migration84.new-features.core.rfc1867">
   <title>Interpretación de las cabeceras RFC1867 (multipart) en las solicitudes HTTP no-POST</title>

   <!-- TODO: expand? -->
   <simpara>
    Se ha añadido la función <function>request_parse_body</function> que permite interpretar
    las cabeceras RFC1867 (multipart) en las solicitudes HTTP no-POST.
   </simpara>
  </sect3>

  <!-- RFC: https://wiki.php.net/rfc/new_without_parentheses -->
  <sect3 xml:id="migration84.new-features.core.new-chaining">
   <title>Encadenamiento de expresiones <literal>&new;</literal> sin paréntesis</title>

   <!-- TODO: expand and examples? -->
   <simpara>
    Las nuevas expresiones con argumentos de constructor ahora son referenciables, lo que significa
    que pueden encadenar llamadas a métodos, accesos a propiedades, etc., sin encerrar
    la expresión entre paréntesis.
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.new-features.core.debug-weakref">
   <title>Información de depuración mejorada para <classname>WeakReference</classname></title>

   <!-- TODO: expand and examples? -->
   <simpara>
    La información de depuración para <classname>WeakReference</classname> ahora también mostrará
    el objeto al que se hace referencia, o <literal>null</literal> si la referencia ya no es válida.
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.new-features.core.debug-closure">
   <title>Información de depuración mejorada para <classname>Closure</classname></title>

   <!-- TODO: expand and examples? -->
   <simpara>
    La salida de <methodname>Closure::__debugInfo</methodname> ahora incluye
    el nombre, el archivo y la línea de la <classname>Closure</classname>.
   </simpara>
  </sect3>

  <!-- Is this really a feature? Should this be moved to other changes? -->
  <sect3 xml:id="migration84.new-features.core.multiple-namespaces-symbols">
   <title>Definición de símbolos idénticos en diferentes espacios de nombres</title>

   <!-- TODO: expand and examples? -->
   <simpara>
    Salir de un espacio de nombres ahora desambigua los símbolos vistos.
    Esto permite utilizar un símbolo en un espacio de nombres, incluso si un espacio de nombres anterior
    ha declarado un símbolo con el mismo nombre.
    <!-- See Zend/tests/use_function/ns_end_resets_seen_symbols_1.phpt. -->
   </simpara>
  </sect3>

 </sect2>

 <sect2 xml:id="migration84.new-features.curl">
  <title>cURL</title>

  <simpara>
   <function>curl_version</function> ahora devuelve un valor
   <literal>feature_list</literal> adicional, que es un array asociativo de todas las funcionalidades cURL conocidas, y si
   están soportadas (&true;) o no (&false;).
  </simpara>

  <simpara>
   Se han añadido las constantes <constant>CURL_HTTP_VERSION_3</constant> y
   <constant>CURL_HTTP_VERSION_3ONLY</constant> (disponibles desde libcurl 7.66 y 7.88) como opciones disponibles para
   <constant>CURLOPT_HTTP_VERSION</constant>.
  </simpara>

  <simpara>
   Se ha añadido <constant>CURLOPT_PREREQFUNCTION</constant> como opción cURL que
   acepta un <type>callable</type> para llamar después de la conexión, pero antes
   del envío de la solicitud. Este callable debe devolver <constant>CURL_PREREQFUNC_OK</constant> o
   <constant>CURL_PREREQFUNC_ABORT</constant> para autorizar o anular la solicitud.
  </simpara>

  <simpara>
   Se ha añadido <constant>CURLOPT_SERVER_RESPONSE_TIMEOUT</constant>,
   que anteriormente estaba disponible bajo el nombre <constant>CURLOPT_FTP_RESPONSE_TIMEOUT</constant>.
   Ambas constantes tienen el mismo valor.
  </simpara>

  <para>
   Se ha añadido <constant>CURLOPT_DEBUGFUNCTION</constant> como opción cURL que
   acepta un <type>callable</type> que se llama durante el ciclo de vida de la solicitud
   con el objeto <classname>CurlHandle</classname>, un entero que contiene el tipo de mensaje de depuración,
   y una cadena que contiene el mensaje de depuración. El tipo de mensaje de depuración es uno de las siguientes constantes:
   <simplelist>
    <member><constant>CURLINFO_TEXT</constant></member>
    <member><constant>CURLINFO_HEADER_IN</constant></member>
    <member><constant>CURLINFO_HEADER_OUT</constant></member>
    <member><constant>CURLINFO_DATA_IN</constant></member>
    <member><constant>CURLINFO_DATA_OUT</constant></member>
    <member><constant>CURLINFO_SSL_DATA_IN</constant></member>
    <member><constant>CURLINFO_SSL_DATA_OUT</constant></member>
   </simplelist>
   Una vez que esta opción está definida, <constant>CURLINFO_HEADER_OUT</constant>
   no debe definirse porque utiliza la misma funcionalidad de libcurl.
  </para>

  <simpara>
   <function>curl_getinfo</function> ahora devuelve una clave
   <literal>posttransfer_time_us</literal>, que contiene el número de microsegundos
   desde el inicio hasta que el último byte fue enviado. Cuando se sigue una redirección, el tiempo de cada solicitud se suma.
   Este valor también puede recuperarse pasando
   <constant>CURLINFO_POSTTRANSFER_TIME_T</constant> al parámetro
   <parameter>option</parameter> de <function>curl_getinfo</function>. Esto requiere libcurl 8.10.0 o superior.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.new-features.dom">
  <title>DOM</title>

   <!-- RFC : https://wiki.php.net/rfc/domdocument_html5_parser -->
  <!-- RFC : https://wiki.php.net/rfc/opt_in_dom_spec_compliance -->
  <simpara>
   Se ha añadido el espacio de nombres <package>Dom</package> con nuevas clases en contraste con las clases DOM existentes (por ejemplo, <classname>Dom\Node</classname> es el nuevo
   <classname>DOMNode</classname>). Estas clases son compatibles con HTML 5 y cumplen con las especificaciones WHATWG,
   resolviendo así errores de larga data en la extensión DOM. Las clases DOM antiguas siguen estando disponibles para asegurar la compatibilidad hacia atrás.
  </simpara>

  <para>
   Se ha añadido <methodname>DOMNode::compareDocumentPosition</methodname>
   con sus constantes asociadas:
   <simplelist>
    <member><constant>DOMNode::DOCUMENT_POSITION_DISCONNECTED</constant></member>
    <member><constant>DOMNode::DOCUMENT_POSITION_PRECEDING</constant></member>
    <member><constant>DOMNode::DOCUMENT_POSITION_FOLLOWING</constant></member>
    <member><constant>DOMNode::DOCUMENT_POSITION_CONTAINS</constant></member>
    <member><constant>DOMNode::DOCUMENT_POSITION_CONTAINED_BY</constant></member>
    <member><constant>DOMNode::DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC</constant></member>
   </simplelist>
  </para>

  <!-- RFC: https://wiki.php.net/rfc/improve_callbacks_dom_and_xsl -->
  <simpara>
   Ahora es posible pasar cualquier callable a
   <methodname>DOMXPath::registerPhpFunctions</methodname>.
   Además, con <methodname>DOMXPath::registerPhpFunctionNs</methodname>, los callbacks pueden registrarse para usar la sintaxis de llamada de función nativa
   en lugar de usar <code>php:function('nombre')</code>.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.new-features.intl">
  <title>Intl</title>

  <simpara>
   Se ha añadido <constant>NumberFormatter::ROUND_HALFDOWN</constant> para
   complementar la funcionalidad existente de <constant>NumberFormatter::ROUND_HALFEVEN</constant>.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.new-features.openssl">
  <title>OpenSSL</title>

  <simpara>
   Se ha añadido soporte para las curvas basadas en Curve25519 + Curve448.
   Específicamente, las claves x25519, ed25519, x448 y ed448 son soportadas en
   <function>openssl_pkey_new</function>,
   <function>openssl_pkey_get_details</function>,
   <function>openssl_sign</function>, y
   <function>openssl_verify</function> han sido extendidas para soportar estas claves.
  </simpara>

  <simpara>
   Implementación de PASSWORD_ARGON2 hash de contraseña.
   Requiere OpenSSL 3.2 y una compilación NTS.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.new-features.pcre">
  <title>PCRE</title>

  <simpara>
   La versión de pcre2lib incluida se ha actualizado a la versión 10.44.
   En consecuencia, ahora se reconoce <literal>{,3}</literal> como un cuantificador en lugar de un texto.
   Además, el significado de algunas clases de caracteres en modo UCP ha cambiado.
   Consulte el <link xlink:href="https://github.com/PCRE2Project/pcre2/blob/master/NEWS">registro de cambios de PCRE2</link>
   para obtener un registro de cambios completo.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.new-features.pdo-dblib">
  <title>PDO_DBLIB</title>

  <simpara>
   Los atributos <constant>Pdo\Dblib::ATTR_STRINGIFY_UNIQUEIDENTIFIER</constant> y
   <constant>Pdo\Dblib::ATTR_DATETIME_CONVERT</constant> ahora actúan como atributos booleanos en lugar de atributos enteros.
   Por lo tanto, definir el atributo a través de <methodname>PDO::setAttribute</methodname>
   y recuperarlo a través de <methodname>PDO::getAttribute</methodname> espera y devuelve un <type>bool</type>.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.new-features.pdo-firebird">
  <title>PDO_FIREBIRD</title>

  <simpara>
   El atributo <constant>PDO::ATTR_AUTOCOMMIT</constant> ahora actúa como un
   atributo booleano en lugar de un atributo entero.
   Por lo tanto, definir el atributo a través de <methodname>PDO::setAttribute</methodname>
   y recuperarlo a través de <methodname>PDO::getAttribute</methodname> espera y devuelve un <type>bool</type>.
  </simpara>

  <simpara>
   La extensión ahora expone ciertas API C++ de Firebird, por lo que la compilación de esta extensión ahora requiere un compilador C++.
   Además, la extensión ahora debe compilarse contra fbclient 3.0 o superior.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.new-features.pdo-mysql">
  <title>PDO_MYSQL</title>

  <simpara>
   Los atributos <constant>PDO::ATTR_AUTOCOMMIT</constant>
   <constant>PDO::ATTR_EMULATE_PREPARES</constant>, y
   <constant>PDO::MYSQL_ATTR_DIRECT_QUERY</constant> ahora actúan como atributos booleanos en lugar de atributos enteros.
   Por lo tanto, definir el atributo a través de <methodname>PDO::setAttribute</methodname>
   y recuperarlo a través de <methodname>PDO::getAttribute</methodname> espera y devuelve un <type>bool</type>.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.new-features.pdo-pgsql">
  <title>PDO_PGSQL</title>

  <simpara>
   La información de conexión DSN, cuando se define, ahora tiene prioridad sobre
   los argumentos del constructor PDO, estando más cerca de lo que indica la documentación.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.new-features.phar">
  <title>Phar</title>

  <simpara>
   Se ha añadido soporte para la extensión de marca de tiempo Unix para los archivos Zip.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.new-features.readline">
  <title>Readline</title>

  <simpara>
   Se ha añadido la posibilidad de cambiar el nombre del archivo de historial de <literal>.php_history</literal> a través de
   la variable de entorno <envar>PHP_HISTFILE</envar>.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.new-features.reflection">
  <title>Reflection</title>

  <simpara>
   <classname>ReflectionAttribute</classname> ahora contiene una
   propiedad <property>name</property> para almacenar el nombre del atributo.
  </simpara>

  <simpara>
   <methodname>ReflectionClassConstant::__toString</methodname> y
   <methodname>ReflectionProperty::__toString</methodname> ahora devuelven
   los comentarios de documentación adjuntos.
  </simpara>

  <!-- RFC: https://wiki.php.net/rfc/lazy-objects -->
  <para>
   Se han añadido varios nuevos métodos y constantes relacionados con la funcionalidad de los objetos perezosos:

   <simplelist>
    <member>
     <methodname>ReflectionClass::newLazyInstance</methodname>
    </member>
    <member>
     <methodname>ReflectionClass::newLazyProxy</methodname>
    </member>
    <member>
     <methodname>ReflectionClass::resetAsLazyInstance</methodname>
    </member>
    <member>
     <methodname>ReflectionClass::resetAsLazyProxy</methodname>
    </member>
    <member>
     <methodname>ReflectionClass::isUninitializedLazyObject</methodname>
    </member>
    <member>
     <methodname>ReflectionClass::initializeLazyObject</methodname>
    </member>
    <member>
     <methodname>ReflectionClass::markLazyObjectAsInitialized</methodname>
    </member>
    <member>
     <methodname>ReflectionClass::getLazyInitializer</methodname>
    </member>
    <member>
     <methodname>ReflectionProperty::skipLazyInitialization</methodname>
    </member>
    <member>
     <methodname>ReflectionProperty::setRawValueWithoutLazyInitialization</methodname>
    </member>
    <member>
     <constant>ReflectionClass::SKIP_INITIALIZATION_ON_SERIALIZE</constant>
    </member>
    <member>
     <constant>ReflectionClass::SKIP_DESTRUCTOR</constant>
    </member>
   </simplelist>
  </para>
 </sect2>

 <sect2 xml:id="migration84.new-features.soap">
  <title>SOAP</title>

  <simpara>
   Se ha añadido soporte para la notación clark para los espacios de nombres en la clase.
   Ahora es posible especificar dependencias en una clase con la notación clark
   para resolver un tipo con un espacio de nombres específico a una clase específica.
   Por ejemplo: <code>'{http://example.com}foo' => 'FooClass'</code>.
  </simpara>

  <simpara>
   Las instancias de <interfacename>DateTimeInterface</interfacename> que se pasan a <literal>xsd:datetime</literal> o elementos similares ahora
   se serializan como elementos en lugar de como cadenas vacías.
  </simpara>

  <simpara>
   La persistencia de sesiones ahora funciona con un módulo de sesión separado.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.new-features.standard">
  <title>Standard</title>

  <!-- RFC: https://wiki.php.net/rfc/correctly_name_the_rounding_mode_and_make_it_an_enum -->
  <simpara>
   <!-- Should this use <enumname> -->
   Se ha añadido una nueva enumeración <classname>RoundingMode</classname> con un nombre más claro
   y una mejor descubribilidad en comparación con las constantes
   <constant>PHP_ROUND_<replaceable>*</replaceable></constant>.
   Además, se han añadido cuatro nuevos modos de redondeo que solo están disponibles a través de
   la nueva enumeración <classname>RoundingMode</classname>.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.new-features.xsl">
  <title>XSL</title>

  <simpara>
   Ahora es posible utilizar parámetros que contienen tanto comillas
   simples como dobles.
  </simpara>

  <!-- RFC: https://wiki.php.net/rfc/improve_callbacks_dom_and_xsl -->
  <simpara>
   Ahora es posible pasar cualquier callable a
   <methodname>XSLTProcessor::registerPhpFunctions</methodname>.
   <!-- TODO Mention XSLTProcessor::registerPHPFunctionNs ? -->
  </simpara>

  <simpara>
   Se han añadido <property>XSLTProcessor::$maxTemplateDepth</property> y
   <property>XSLTProcessor::$maxTemplateVars</property>
   para controlar la profundidad de recursión de la evaluación del template XSL.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.new-features.zip">
  <title>Zip</title>

  <simpara>
   Se ha añadido la constante <constant>ZipArchive::ER_TRUNCATED_ZIP</constant>,
   que ha sido añadida en libzip 1.11.
  </simpara>
 </sect2>

</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
