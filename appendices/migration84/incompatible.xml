<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: e8ac70bf549a723cb36465667a6109d9933b8619 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes -->
<sect1 xml:id="migration84.incompatible" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Cambios no retrocompatibles</title>

 <simpara>
  Salvo mención contraria en esta sección,
  cada nueva <link xlink:href="migration84.new-functions">función</link>,
  <link xlink:href="migration84.new-classes">clase, interfaz, enumeración</link>,
  o <link xlink:href="migration84.constants">constante</link>
  puede provocar el lanzamiento de una excepción de redeclaración <exceptionname>Error</exceptionname>.
 </simpara>

 <sect2 xml:id="migration84.incompatible.core">
  <title>PHP Core</title>

  <!-- RFC: https://wiki.php.net/rfc/exit-as-function -->
  <sect3 xml:id="migration84.incompatible.core.exit">
   <title>Cambio de comportamiento de <function>exit</function></title>

   <simpara>
    Las construcciones de lenguaje <function>exit</function> (y <function>die</function>)
    ahora se comportan más como una función.
    Esto significa que ahora pueden pasarse como <type>callable</type>s,
    <!-- TODO: Link to declare documentation/type juggling documentation -->
    son afectadas por la instrucción <literal>strict_types</literal>,
    y ahora realizan las coerciones de tipo habituales en lugar de convertir
    cualquier valor no entero en una cadena.
   </simpara>

   <simpara>
    En consecuencia, pasar tipos no válidos a <function>exit</function> y
    <function>die</function> ahora siempre provoca el lanzamiento de una
    excepción <exceptionname>TypeError</exceptionname>.
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.incompatible.core.recursion-comparison">
   <title>Recursión al comparar</title>

   <simpara>
    Encontrar una recursión al comparar ahora provoca una
    excepción <exceptionname>Error</exceptionname> en lugar de un error fatal
    <constant>E_ERROR</constant>.
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.incompatible.core.readonly-indirect-modification">
   <title>Modificación indirecta de propiedades de solo lectura</title>

   <!-- TODO Link to clone magic method, and explain this better as UPGRADING is... -->
   <simpara>
    La modificación indirecta de propiedades de solo lectura en <function>__clone()</function>
    ya no está permitida, por ejemplo, <code>$ref = &amp;$this->readonly</code>.
    Ya estaba prohibido para la inicialización de solo lectura, y era un
    descuido en la implementación de la "reinicialización de solo lectura al clonar".
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.incompatible.core.constant-type-change">
   <title>Cambio de tipo de constantes</title>

   <simpara>
    Las constantes <constant>PHP_DEBUG</constant> y <constant>PHP_ZTS</constant>
    ahora son de tipo <type>bool</type>.
    Anteriormente, eran de tipo <type>int</type>.
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.incompatible.core.tempnam-length">
   <title>Longitud del nombre de archivo temporal</title>

   <simpara>
    El nombre de los archivos volcados y de los archivos creados por la función
    <function>tempnam</function> ahora es más largo en 13 bytes.
    La longitud total sigue dependiendo de la plataforma.
   </simpara>
  </sect3>

  <!-- RFC: https://wiki.php.net/rfc/deprecations_php_8_4#remove_e_strict_error_level_and_deprecate_e_strict_constant -->
  <sect3 xml:id="migration84.incompatible.core.e-strict">
   <title>Supresión del nivel de error <constant>E_STRICT</constant></title>

   <simpara>
    El nivel de error <constant>E_STRICT</constant> ha sido eliminado,
    porque ya no se utilizaba en el motor PHP.
    La constante <constant>E_STRICT</constant> también ha sido desaprobada.
   </simpara>
  </sect3>
 </sect2>

 <sect2 xml:id="migration84.incompatible.typed-constants">
  <title>Constantes de clase de extensión ahora tipificadas</title>

  <para>
   Las siguientes clases de extensión ahora declaran un tipo en sus
   constantes:
   <simplelist>
    <member><link linkend="book.datetime">Date</link></member>
    <member><link linkend="book.intl">Intl</link></member>
    <member><link linkend="book.pdo">PDO</link></member>
    <member><link linkend="book.reflection">Reflection</link></member>
    <member><link linkend="book.spl">SPL</link></member>
    <member><link linkend="book.sqlite3">Sqlite</link></member>
    <member><link linkend="book.xmlreader">XMLReader</link></member>
   </simplelist>
  </para>
 </sect2>

 <!-- TODO: Check resource names -->
 <sect2 xml:id="migration84.incompatible.resource2object">
  <title>Migración de recursos a objetos</title>

  <simpara>
   Varios &resource;s han sido migrados a &object;s.
   La verificación del valor de retorno con <function>is_resource</function>
   debe ser reemplazada por verificaciones de &false;, a menos que se indique lo contrario.
  </simpara>

  <sect3 xml:id="migration84.incompatible.resource2object.dba">
   <title>DBA</title>

   <simpara>
    Las funciones <link linkend="book.dba">DBA</link> ahora aceptan y devuelven
    <classname>Dba\Connection</classname> en lugar de
    &resource;s <literal>dba_connection</literal>.
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.incompatible.resource2object.odbc">
   <title>ODBC</title>

   <simpara>
    Las funciones <link linkend="book.uodbc">ODBC</link> ahora aceptan y devuelven
    <classname>Odbc\Result</classname> en lugar de
    &resource;s <literal>odbc_result</literal>.
   </simpara>

   <simpara>
    Las funciones <link linkend="book.uodbc">ODBC</link> ahora aceptan y devuelven
    <classname>Odbc\Connection</classname> en lugar de
    &resource;s <literal>odbc_connection</literal>.
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.incompatible.resource2object.soap">
   <title>SOAP</title>

   <simpara>
    La propiedad <property>SoapClient::$httpurl</property> ahora es un objeto
    <classname>Soap\Url</classname> en lugar de una
    &resource; <literal>soap_url</literal>.
    Las verificaciones con <function>is_resource</function> (por ejemplo
    <code>is_resource($client->httpurl)</code>) deben ser reemplazadas por verificaciones de &null; (por ejemplo <code>$client->httpurl !== null</code>).
   </simpara>
   <simpara>
    La propiedad <property>SoapClient::$sdl</property> ahora es un objeto
    <classname>Soap\Sdl</classname> en lugar de una
    &resource; <literal>soap_sdl</literal>.
    Las verificaciones con <function>is_resource</function> (por ejemplo
    <code>is_resource($client->sdl)</code>) deben ser reemplazadas por verificaciones de &null; (por ejemplo <code>$client->sdl !== null</code>).
   </simpara>
  </sect3>
 </sect2>

 <sect2 xml:id="migration84.incompatible.new-warnings-exceptions">
  <title>Nuevas alertas y excepciones</title>

  <simpara>
   Se han añadido nuevas alertas y excepciones para señalar errores
   de programación, es decir, valores no válidos proporcionados como argumentos.
  </simpara>

  <sect3 xml:id="migration84.incompatible.new-warnings-exceptions.curl">
   <title>Curl</title>

   <simpara>
    <function>curl_multi_select</function> ahora lanza una
    <exceptionname>ValueError</exceptionname> si el parámetro
    <parameter>timeout</parameter> es inferior a
    <literal>0</literal> o superior a <constant>PHP_INT_MAX</constant>.
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.incompatible.new-warnings-exceptions.gd">
   <title>Gd</title>

   <para>
    <simplelist type="inline">
     <member><function>imagejpeg</function></member>
     <member><function>imagewebp</function></member>
     <member><function>imagepng</function></member>
     <member><function>imageavif</function></member>
    </simplelist>
    ahora lanzan una <exceptionname>ValueError</exceptionname> si se pasa una
    <parameter>quality</parameter> no válida.
   </para>

   <simpara>
    <function>imageavif</function> ahora lanza una
    <exceptionname>ValueError</exceptionname> si se pasa un parámetro
    <parameter>speed</parameter> no válido.
   </simpara>

   <simpara>
    <function>imagescale</function> ahora lanza una
    <exceptionname>ValueError</exceptionname> si los parámetros
    <parameter>width</parameter> o <parameter>height</parameter>
    están fuera de los límites.
   </simpara>

   <simpara>
    <function>imagescale</function> ahora lanza una
    <exceptionname>ValueError</exceptionname> si se pasa un valor de
    <parameter>mode</parameter> no válido.
   </simpara>

   <simpara>
    <function>imagefilter</function> ahora lanza una
    <exceptionname>ValueError</exceptionname> con el filtro
    <constant>IMG_FILTER_SCATTER</constant> si los parámetros
    <parameter>sub</parameter> o <parameter>plus</parameter>
    están fuera de los límites.
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.incompatible.new-warnings-exceptions.gettext">
   <title>Gettext</title>

   <para>
    <simplelist type="inline">
     <member><function>bind_textdomain_codeset</function></member>
     <member><function>textdomain</function></member>
     <member><function>d<replaceable>*</replaceable>gettext</function></member>
    </simplelist>
    ahora lanzan una <exceptionname>ValueError</exceptionname> si se pasa un
    <parameter>domain</parameter> no válido.
   </para>
  </sect3>

  <sect3 xml:id="migration84.incompatible.new-warnings-exceptions.intl">
   <title>Intl</title>

   <para>
    <function>resourcebundle_get</function>,
    <function>ResourceBundle::get</function>, y el acceso a índices en un
    <classname>ResourceBundle</classname> ahora lanzan:
    <simplelist>
     <member>
      <exceptionname>TypeError</exceptionname> para tipos de offset no válidos
     </member>
     <member>
      <exceptionname>ValueError</exceptionname> para una cadena vacía
     </member>
     <member>
      <exceptionname>ValueError</exceptionname> si el índice entero no cabe en un entero con signo de 32 bits
     </member>
    </simplelist>
   </para>

   <simpara>
    <methodname>IntlDateFormatter::__construct</methodname> lanza una
    <exceptionname>ValueError</exceptionname> si el
    <parameter>locale</parameter> es no válido.
   </simpara>

   <simpara>
    <methodname>NumberFormatter::__construct</methodname> lanza una
    <exceptionname>ValueError</exceptionname> si el
    <parameter>locale</parameter> es no válido.
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.incompatible.new-warnings-exceptions.mbstring">
   <title>MBString</title>

   <simpara>
    <function>mb_encode_numericentity</function> y
    <function>mb_decode_numericentity</function> ahora verifican que
    <parameter>map</parameter> está compuesto únicamente por &integer;s,
    si no es el caso, se lanza una <exceptionname>ValueError</exceptionname>.
   </simpara>

   <simpara>
    <function>mb_http_input</function> ahora lanza una
    <exceptionname>ValueError</exceptionname> si el <parameter>type</parameter>
    es no válido.
   </simpara>

   <simpara>
    <function>mb_http_output</function> ahora verifica que
    <parameter>encoding</parameter> no contiene caracteres nulos,
    si es el caso, se lanza una <exceptionname>ValueError</exceptionname>.
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.incompatible.new-warnings-exceptions.odbc">
   <title>ODBC</title>

   <simpara>
    <function>odbc_fetch_row</function> devuelve &false; cuando
    <parameter>row</parameter> es inferior o igual a <literal>0</literal>.
    Ahora se emite una alerta en este caso.
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.incompatible.new-warnings-exceptions.pcntl">
   <title>PCNTL</title>

   <para>
    Las funciones <function>pcntl_sigprocmask</function>,
    <function>pcntl_sigwaitinfo</function>, y
    <function>pcntl_sigtimedwait</function> ahora lanzan:
    <simplelist>
     <member>
      Una <exceptionname>ValueError</exceptionname> si el array
      <parameter>signals</parameter> está vacío
      (excepto para <function>pcntl_sigprocmask</function> si el
      <parameter>mode</parameter> es <constant>SIG_SETMASK</constant>)
     </member>
     <member>
      Una <exceptionname>TypeError</exceptionname> si un valor del array
      <parameter>signals</parameter> no es un &integer;
     </member>
     <member>
      Una <exceptionname>ValueError</exceptionname> si el valor de
      <parameter>signals</parameter> no es un número de señal válido
     </member>
    </simplelist>
   </para>

   <simpara>
    La función <function>pcntl_sigprocmask</function> ahora lanza una
    <exceptionname>ValueError</exceptionname> si el
    <parameter>mode</parameter> no es uno de los <constant>SIG_BLOCK</constant>,
    <constant>SIG_UNBLOCK</constant>, o <constant>SIG_SETMASK</constant>.
   </simpara>

   <para>
    La función <function>pcntl_sigtimedwait</function> ahora lanza:
    <simplelist>
     <member>
      Una <exceptionname>ValueError</exceptionname> si
      <parameter>seconds</parameter> es inferior a <literal>0</literal>
     </member>
     <member>
      Una <exceptionname>ValueError</exceptionname> si
      <parameter>nanoseconds</parameter> es inferior a <literal>0</literal>
      o superior a <literal>1e9</literal>
     </member>
     <member>
      Una <exceptionname>ValueError</exceptionname> si ambos
      <parameter>seconds</parameter> y <parameter>nanoseconds</parameter>
      son <literal>0</literal>
     </member>
    </simplelist>
   </para>
  </sect3>

  <sect3 xml:id="migration84.incompatible.new-warnings-exceptions.simplexml">
   <title>SimpleXML</title>

   <simpara>
    Llamar a <function>simplexml_import_dom</function> con un objeto no-XML
    ahora lanza una <exceptionname>TypeError</exceptionname> en lugar de una
    <exceptionname>ValueError</exceptionname>.
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.incompatible.new-warnings-exceptions.standard">
   <title>Estándar</title>

   <simpara>
    La función <function>round</function> ahora verifica el valor del
    <parameter>mode</parameter> y lanza una
    <exceptionname>ValueError</exceptionname> para modos no válidos.
    Anteriormente, los modos no válidos se interpretaban como
    <constant>PHP_ROUND_HALF_UP</constant>.
   </simpara>

   <simpara>
    La función <function>str_getcsv</function> ahora lanza una
    <exceptionname>ValueError</exceptionname> si los argumentos
    <parameter>separator</parameter> y <parameter>enclosure</parameter>
    no tienen un byte de largo, o si el argumento <parameter>escape</parameter>
    no tiene un byte de largo o es una cadena vacía.
    Esto alinea el comportamiento para que sea idéntico al de
    <function>fputcsv</function> y <function>fgetcsv</function>.
   </simpara>

   <simpara>
    La función <function>php_uname</function> ahora lanza una
    <exceptionname>ValueError</exceptionname> si el
    <parameter>mode</parameter> es no válido.
   </simpara>

   <simpara>
    La opción <literal>"allowed_classes"</literal> para
    <function>unserialize</function> ahora lanza
    <exceptionname>TypeError</exceptionname> y
    <exceptionname>ValueError</exceptionname> si no es un
    <type>array</type> de nombres de clase.
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.incompatible.new-warnings-exceptions.xmlreader">
   <title>XMLReader</title>

   <simpara>
    Pasar un codificado de caracteres no válido a
    <methodname>XMLReader::open</methodname> o
    <methodname>XMLReader::XML</methodname> ahora lanza una
    <exceptionname>ValueError</exceptionname>.
   </simpara>

   <simpara>
    Pasar una cadena que contiene bytes nulos anteriormente emitía una alerta
    y ahora lanza una <exceptionname>ValueError</exceptionname>.
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.incompatible.new-warnings-exceptions.xmlwriter">
   <title>XMLWriter</title>

   <simpara>
    Pasar una cadena que contiene bytes nulos anteriormente emitía una alerta
    y ahora lanza una <exceptionname>ValueError</exceptionname>.
   </simpara>
  </sect3>

  <sect3 xml:id="migration84.incompatible.new-warnings-exceptions.xsl">
   <title>XSL</title>

   <simpara>
    <methodname>XSLTProcessor::setParameter</methodname> ahora lanza una
    <exceptionname>ValueError</exceptionname> cuando sus argumentos contienen
    bytes nulos. Esto nunca funcionó correctamente en primer lugar,
    por lo que ahora se lanza una excepción.
   </simpara>

   <simpara>
    Llamar a <methodname>XSLTProcessor::importStylesheet</methodname> con un
    objeto no-XML ahora lanza una <exceptionname>TypeError</exceptionname>
    en lugar de una <exceptionname>ValueError</exceptionname>.
   </simpara>

   <!-- RFC: https://wiki.php.net/rfc/improve_callbacks_dom_and_xsl -->
   <simpara>
    El fallo al llamar a una función de devolución de llamada PHP durante la evaluación ahora lanza
    una excepción en lugar de emitir una alerta.
   </simpara>
  </sect3>
 </sect2>

 <sect2 xml:id="migration84.incompatible.dom">
  <title>DOM</title>

  <simpara>
   Algunos métodos DOM anteriormente devolvían &false; o una
   <exceptionname>DOMException</exceptionname> <constant>PHP_ERR</constant>
   si no se podía agregar un nuevo nodo.
   Ahora siempre lanzan una <exceptionname>DOMException</exceptionname>
   <constant>INVALID_STATE_ERR</constant>.
   Esta situación es extremadamente improbable y la probabilidad de verse afectado
   es baja.
   En consecuencia, <methodname>DOMImplementation::createDocument</methodname>
   ahora tiene un tipo de retorno provisional de <classname>DOMDocument</classname>
   <!-- TODO: Use a proper union type for linking -->
   en lugar de <code>DOMDocument|false</code>.
  </simpara>

  <simpara>
   Anteriormente, los objetos <classname>DOMXPath</classname> podían ser clonados,
   pero resultaban en un objeto inutilizable.
   Esto ya no es posible, y clonar un objeto <classname>DOMXPath</classname>
   ahora lanza una <exceptionname>Error</exceptionname>.
  </simpara>

  <!-- RFC: https://wiki.php.net/rfc/deprecations_php_8_4#remove_domimplementationgetfeature_feature_version -->
  <simpara>
   El método <methodname>DOMImplementation::getFeature</methodname> ha sido eliminado.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.incompatible.gmp">
  <title>GMP</title>

  <!-- RFC: https://wiki.php.net/rfc/gmp-final -->
  <simpara>
   La clase <classname>GMP</classname> ahora es final y ya no puede
   ser extendida.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.incompatible.mbstring">
  <title>MBString</title>

  <simpara>
   En caso de cadenas no válidas (aquellas con errores de codificación),
   <function>mb_substr</function> ahora interpreta los índices de caracteres
   de la misma manera que la mayoría de las otras funciones mbstring.
   Esto significa que los índices de caracteres devueltos por <function>mb_strpos</function>
   pueden pasarse a <function>mb_substr</function>.
  </simpara>

  <simpara>
   Para las cadenas SJIS-Mac (MacJapanese), los índices de caracteres pasados a
   <function>mb_substr</function> ahora se refieren a los índices de
   los puntos de código Unicode que se producen cuando la cadena se convierte a Unicode.
   Esto es significativo porque aproximadamente 40 caracteres SJIS-Mac se convierten en una
   secuencia de múltiples puntos de código Unicode.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.incompatible.mysqli">
  <title>MySQLi</title>

  <simpara>
   La constante no utilizada y no documentada
   <constant>MYSQLI_SET_CHARSET_DIR</constant> ha sido eliminada.
  </simpara>

  <simpara>
   La constante <constant>MYSQLI_STMT_ATTR_UPDATE_MAX_LENGTH</constant> ha sido
   eliminada. Esta funcionalidad no está disponible con mysqlnd.
  </simpara>

  <simpara>
   Las constantes <constant>MYSQLI_STMT_ATTR_CURSOR_TYPE</constant> y
   <constant>MYSQLI_STMT_ATTR_PREFETCH_ROWS</constant> han sido eliminadas.
   Estas funcionalidades nunca fueron implementadas,
   ni con mysqlnd ni con libmysql.
  </simpara>

  <simpara>
   La constante no utilizada <constant>MYSQLI_TYPE_INTERVAL</constant>, que actualmente es un stub y un alias para <constant>MYSQLI_TYPE_ENUM</constant>,
   ha sido eliminada.
   <!-- There are no
  plans to add such data type to MySQL yet, so it's unclear what its value
  would finally be. -->
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.incompatible.mysqlnd">
  <title>MySQLnd</title>

  <simpara>
   El código de error reportado para los tiempos de espera del servidor MySQL ha cambiado de
   <literal>2006</literal> a <literal>4031</literal> para las versiones del servidor
   MySQL 8.0.24 y superiores.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.incompatible.opcache">
  <title>Opcache</title>

  <simpara>
   El valor máximo de la configuración
   <link linkend="ini.opcache.interned-strings-buffer">opcache.interned_strings_buffer</link>
   en arquitecturas de 64 bits ahora es <literal>32767</literal>.
   Anteriormente, era <literal>4095</literal>.
  </simpara>

  <sect3>
   <title>JIT</title>

   <simpara>
    El valor por defecto de la configuración JIT ha cambiado de
    <link linkend="ini.opcache.jit"><literal>opcache.jit=tracing</literal></link>
    y <link linkend="ini.opcache.jit-buffer-size"><literal>opcache.jit_buffer_size=0</literal></link>
    a <link linkend="ini.opcache.jit"><literal>opcache.jit=disable</literal></link>
    y <link linkend="ini.opcache.jit-buffer-size"><literal>opcache.jit_buffer_size=64M</literal></link>, respectivamente.
   </simpara>

   <simpara>
    Esto no afecta el comportamiento observable por defecto,
    porque el JIT sigue estando desactivado por defecto.
    Sin embargo, ahora se desactiva a través de la configuración
    <link linkend="ini.opcache.jit">opcache.jit</link>,
    en lugar de <link linkend="ini.opcache.jit-buffer-size">opcache.jit_buffer_size</link>.
    Esto puede afectar a los usuarios que anteriormente habían activado el JIT a través de
    <link linkend="ini.opcache.jit-buffer-size">opcache.jit_buffer_size</link>
    exclusivamente, sin especificar también un modo JIT usando
    <link linkend="ini.opcache.jit">opcache.jit</link>.
    Para habilitar la compilación JIT, defina el valor de configuración
    <link linkend="ini.opcache.jit">opcache.jit</link> en consecuencia.
   </simpara>

   <simpara>
    Si la compilación <acronym>JIT</acronym> está habilitada, <acronym>PHP</acronym> ahora finalizará con un error fatal
    al iniciar si la inicialización del compilador <acronym>JIT</acronym> falla por cualquier motivo.
   </simpara>
  </sect3>
 </sect2>

 <sect2 xml:id="migration84.incompatible.pcntl">
  <title>PCNTL</title>

  <simpara>
   Las funciones <function>pcntl_sigprocmask</function>,
   <function>pcntl_sigwaitinfo</function>, y
   <function>pcntl_sigtimedwait</function> ahora devuelven sistemáticamente
   &false; en caso de fallo.
   En algunos casos anteriores, podían devolver el valor <literal>-1</literal>.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.incompatible.pcre">
  <title>PCRE</title>

  <simpara>
   La versión de pcre2lib incluida se ha actualizado a la versión 10.44.
   Esto significa que <literal>{,3}</literal> ahora se reconoce como un cuantificador en lugar de un texto.
   Además, la significación de algunas clases de caracteres en modo UCP ha cambiado.
   Consulte el <link xlink:href="&url.pcre2.changelog;">registro de cambios de PCRE2</link>
   para obtener un registro de cambios completo.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.incompatible.pdo-dblib">
  <title>PDO_DBLIB</title>

  <simpara>
   Los atributos <constant>Pdo\Dblib::ATTR_STRINGIFY_UNIQUEIDENTIFIER</constant> y
   <constant>Pdo\Dblib::ATTR_DATETIME_CONVERT</constant> ahora actúan como atributos booleanos en lugar de atributos enteros.
   Por lo tanto, definir el atributo a través de <methodname>PDO::setAttribute</methodname>
   y recuperarlo a través de <methodname>PDO::getAttribute</methodname> espera y devuelve un <type>bool</type>.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.incompatible.pdo-firebird">
  <title>PDO_FIREBIRD</title>

  <simpara>
   El atributo <constant>PDO::ATTR_AUTOCOMMIT</constant> ahora actúa como un
   atributo booleano en lugar de un atributo entero.
   Por lo tanto, definir el atributo a través de <methodname>PDO::setAttribute</methodname>
   y recuperarlo a través de <methodname>PDO::getAttribute</methodname> espera y devuelve un <type>bool</type>.
  </simpara>

  <simpara>
   La extensión ahora expone ciertas API C++ de Firebird, por lo que la construcción de esta extensión ahora requiere un compilador C++.
   Además, la extensión ahora debe compilarse contra fbclient 3.0 o superior.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.incompatible.pdo-mysql">
  <title>PDO_MYSQL</title>

  <simpara>
   Los atributos <constant>PDO::ATTR_AUTOCOMMIT</constant>
   <constant>PDO::ATTR_EMULATE_PREPARES</constant>, y
   <constant>PDO::MYSQL_ATTR_DIRECT_QUERY</constant> ahora actúan como atributos booleanos en lugar de atributos enteros.
   Por lo tanto, definir el atributo a través de <methodname>PDO::setAttribute</methodname>
   y recuperarlo a través de <methodname>PDO::getAttribute</methodname> espera y devuelve un <type>bool</type>.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.incompatible.pdo-pgsql">
  <title>PDO_PGSQL</title>

  <simpara>
   La información de conexión DSN, cuando se define, ahora tiene prioridad sobre
   los argumentos del constructor PDO, estando más cerca de lo que indica la documentación.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.incompatible.new-warnings-exceptions.session">
  <title>Sesión</title>

  <simpara>
   Establecer un valor no positivo para <link linkend="ini.session.gc-divisor">session.gc_divisor</link>
   o un valor negativo para <link linkend="ini.session.gc-probability">session.gc_probability</link>
   emite ahora una advertencia.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.incompatible.simplexml">
  <title>SimpleXML</title>

  <simpara>
   <classname>SimpleXMLElement</classname> no es solo una representación
   de un elemento XML, sino que también es un <classname>RecursiveIterator</classname>.
   Antes de PHP 8.4.0, algunos de sus métodos (por ejemplo,
   <methodname>SimpleXMLElement::asXML</methodname> o
   <methodname>SimpleXMLElement::getName</methodname>) y la conversión de tales
   instancias a <type>string</type> reinicializaban implícitamente el iterador.
  </simpara>
  <para>
   Esto podía provocar bucles infinitos no intencionados porque el iterador se reinicializaba.
   Por ejemplo:
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php

$xmlString = "<root><a><b>1</b><b>2</b><b>3</b></a></root>";
$xml = simplexml_load_string($xmlString);

$nodes = $xml->a->b;
foreach ($nodes as $nodeData) {
    echo "nodeData: " . $nodeData . "\n";

    $xml = $nodes->asXml();
}

]]>
    </programlisting>
    <simpara>
     causaba un bucle infinito.
    </simpara>
    <screen>
<![CDATA[
nodeData: 1
nodeData: 2
nodeData: 2
nodeData: 2
nodeData: 2
nodeData: 2
nodeData: 2
// ...
]]>
    </screen>
    <simpara>
     Sin embargo, este comportamiento ha sido corregido, y un
     <classname>SimpleXMLElement</classname> ya no reinicializará implícitamente
     el iterador, a menos que se restablezca explícitamente a cero.
     Esto significa que el ejemplo anterior ahora daría:
    </simpara>
    <screen>
<![CDATA[
nodeData: 1
nodeData: 2
nodeData: 3
]]>
    </screen>
   </informalexample>
  </para>
  <!-- This is no longer the case as a consequence of the bugfixes for GH-12192,GH-12208, #55098. -->
 </sect2>

 <sect2 xml:id="migration84.incompatible.soap">
  <title>SOAP</title>

  <simpara>
   <property>SoapClient::$typemap</property> ahora es un <type>array</type>
   en lugar de una <type>resource</type>.
   Las verificaciones con <function>is_resource</function> (es decir,
   <code>is_resource($client->typemap)</code>) deben ser reemplazadas por verificaciones de &null; (es decir, <code>$client->typemap !== null</code>).
  </simpara>

  <simpara>
   La extensión SOAP ha adquirido una dependencia opcional de la extensión
   <link linkend="book.session">session</link>.
   Si PHP se compila sin la extensión session y con la opción de configuración
   <option>--enable-rtld-now</option> activada, se producirán errores de inicio
   si también se utiliza la extensión <link linkend="book.soap">SOAP</link>.
   Para resolver este problema, no utilice rtld-now o cargue la extensión session.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.incompatible.standard">
  <title>Estándar</title>

  <simpara>
   Al usar <function>strcspn</function> con
   <parameter>characters</parameter> siendo una cadena vacía,
   ahora se devuelve la longitud de la cadena en lugar de detenerse
   en el primer byte nulo.
   <!-- See GH-12592 -->
  </simpara>

  <simpara>
   <function>http_build_query</function> ahora maneja correctamente las enumeraciones
  </simpara>

  <!-- RFC: https://wiki.php.net/rfc/dedicated_stream_bucket -->
  <simpara>
   <function>stream_bucket_make_writeable</function> y
   <function>stream_bucket_new</function> ahora devuelven una instancia de
   <classname>StreamBucket</classname> en lugar de una instancia de
   <classname>stdClass</classname>.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.incompatible.tidy">
  <title>Tidy</title>

  <simpara>
   Los errores en el constructor ahora lanzan excepciones en lugar de
   emitir advertencias y tener un objeto roto.
  </simpara>
 </sect2>

 <sect2 xml:id="migration84.incompatible.xml">
  <title>XML</title>

  <simpara>
   Las funciones <function>xml_set_<replaceable>*</replaceable>_handler</function>
   ahora declaran y verifican una firma
   efectiva de <type class="union"><type>callable</type><type>string</type><type>null</type></type> para los
   parámetros <parameter>handler</parameter>.
   Además, los valores de tipo <type>string</type> que corresponden a nombres de método,
   de objeto definido con <function>xml_set_object</function> ahora se verifican para
   ver si el método existe en la clase del objeto previamente pasado.
   Esto significa que <function>xml_set_object</function> ahora siempre debe
   ser llamada antes de definir nombres de método como <type>callable</type>.
   Pasar una cadena vacía para deshabilitar el manejador sigue estando permitido,
   pero está desaprobado.
  </simpara>

  <simpara>
   Además, con <function>xml_set_object</function> y el paso de cadenas
   no-<type>callable</type> está desaprobado.
   Se recomienda reemplazar tales instancias con un <type>callable</type>
   que se refiera directamente al método.
  </simpara>
 </sect2>

</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
