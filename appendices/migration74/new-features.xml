<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: e150cc645a17588282e5e6b5e43e600a2f345549 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->

<sect1 xml:id="migration74.new-features" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Nuevas funcionalidades</title>

 <sect2 xml:id="migration74.new-features.core">
  <title>Núcleo de PHP</title>

  <sect3 xml:id="migration74.new-features.core.typed-properties">
   <title>Propiedades tipadas</title>

   <para>
    Las propiedades de las clases ahora soportan la declaración de tipos.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
class User {
    public int $id;
    public string $name;
}
?>
]]>
     </programlisting>
    </informalexample>
    El ejemplo anterior asegura que <literal>$user->id</literal> solo puede
    recibir valores de tipo &integer; y
    <literal>$user->name</literal> solo puede recibir valores de tipo
    &string;.
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.core.arrow-functions">
   <title>Funciones flecha</title>

   <para>
    Las <link linkend="functions.arrow">funciones flecha</link> proporcionan
    una sintaxis corta para definir funciones que enlazan el ámbito por valor de manera implícita.

    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$factor = 10;
$nums = array_map(fn($n) => $n * $factor, [1, 2, 3, 4]);
// $nums = array(10, 20, 30, 40);
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.core.type-variance">
   <title>Tipo de retorno covariante y tipo de argumento contravariante limitado</title>

   <para>
    El siguiente código ahora funcionará:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
class A {}
class B extends A {}

class Producer {
    public function method(): A {}
}
class ChildProducer extends Producer {
    public function method(): B {}
}
?>
]]>
     </programlisting>
    </informalexample>
    El soporte de varianza total solo está disponible cuando se utiliza la carga automática. En un único fichero solo son posibles referencias de tipos no cíclicos, ya que todas las clases deben estar disponibles antes de ser referenciadas.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php

/**
 * Estas clases satisfacen los requisitos del LSP, ya que C es un subtipo de A.
 * Sin embargo, en el momento en que se declara la clase B, la clase C aún no está disponible
 */
class A
{
    public function method(): A {}
}

class B extends A
{
    // Error fatal: No se puede verificar la compatibilidad entre B::method():C y
    // A::method(): A, ya que la clase C no está disponible
    public function method(): С {}
}

class C extends B {}

?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.core.null-coalescing-assignment-operator">
   <title>Operador de asignación de fusión Null</title>

   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$array['key'] ??= computeDefault();
// es aproximadamente equivalente a
if (!isset($array['key'])) {
    $array['key'] = computeDefault();
}
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.core.unpack-inside-array">
   <title>Desempaquetado en los arrays</title>

   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$parts = ['apple', 'pear'];
$fruits = ['banana', 'orange', ...$parts, 'watermelon'];
// ['banana', 'orange', 'apple', 'pear', 'watermelon'];
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.core.numeric-literal-separator">
   <title>Separador numérico literal</title>

   <para>
    Los números literales pueden contener un carácter de subrayado entre
    los dígitos.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
6.674_083e-11; // float
299_792_458;   // decimal
0xCAFE_F00D;   // hexadecimal
0b0101_1111;   // binario
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.core.weakreference">
   <title>Referencias débiles</title>

   <para>
    Las <link linkend="class.weakreference">referencias débiles</link> permiten al desarrollador retener una referencia
    a un objeto que no impide que el objeto sea destruido.
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.core.tostring-exceptions">
   <title>Permitir Excepciones desde __toString()</title>

   <para>
    Lanzar excepciones desde <link linkend="object.tostring">__toString()</link>
    ahora está permitido. Anteriormente, esto resultaba en un error fatal.
    Los errores fatales recuperables en las conversiones de &string; han sido
    convertidos en excepciones <classname>Error</classname>.
   </para>
  </sect3>

 </sect2>

 <sect2 xml:id="migration74.new-features.curl">
  <title>CURL</title>

  <para>
   <classname>CURLFile</classname> ahora soporta las envolturas de flujo
   además de los nombres de ficheros brutos, si la extensión ha sido compilada con libcurl
   &gt;= 7.56.0.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.filter">
  <title>Filtro</title>

  <para>
   El filtro <constant>FILTER_VALIDATE_FLOAT</constant> ahora soporta las
   opciones <literal>min_range</literal> y <literal>max_range</literal>,
   con la misma sémantica que <constant>FILTER_VALIDATE_INT</constant>.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.ffi">
  <title>FFI</title>

  <para>
   FFI es una nueva extensión, que proporciona una manera sencilla de llamar
   a las funciones nativas, acceso nativo a las variables, y la creación/acceso a
   estructuras de datos definidas en bibliotecas C.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.gd">
  <title>GD</title>

  <para>
   Se ha añadido el filtro de imagen <constant>IMG_FILTER_SCATTER</constant>
   para aplicar un filtro de dispersión a las imágenes.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.hash">
  <title>Hash</title>

  <para>
   Se ha añadido el hash <literal>crc32c</literal> utilizando el polinomio de Castagnoli.
   Esta variante de CRC32 es utilizada por sistemas de almacenamiento, tales como
   iSCSI, SCTP, Btrfs y ext4.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.mbstring">
  <title>Cadenas multioctetos</title>

  <para>
   Se ha añadido la función <function>mb_str_split</function>, que proporciona la misma
   funcionalidad que <function>str_split</function>, pero opera sobre puntos de código en lugar de octetos.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.opcache">
  <title>OPcache</title>

  <para>
   <link linkend="opcache.preloading">El soporte para la precarga de código</link> ha sido añadido.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.pcre">
  <title>Expresiones Regulares (Compatible Perl)</title>

  <para>
   Las funciones <function>preg_replace_callback</function> y
   <function>preg_replace_callback_array</function> ahora aceptan un
   argumento <parameter>flags</parameter> adicional, con soporte para los
   flags <constant>PREG_OFFSET_CAPTURE</constant> y
   <constant>PREG_UNMATCHED_AS_NULL</constant>.
   Esto influye en el formato del &array; de coincidencias pasado a la función de retrollamada.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.pdo">
  <title>PDO</title>

  <para>
   El nombre de usuario y la contraseña ahora pueden ser especificados como
   parte del DSN PDO para los controladores mysql, mssql, sybase, dblib, firebird
   y oci. Anteriormente, esto solo era soportado para el controlador pgsql.
   Si un nombre de usuario/contraseña es definido tanto en el
   constructor como en el DSN, el constructor tiene precedencia.
  </para>
  <para>
   Ahora es posible escapar los signos de interrogación en las consultas SQL para evitar que sean interpretados como parámetro ficticio.
   Escribir <literal>??</literal> permite enviar un solo signo de interrogación
   a la base de datos y, por ejemplo, utilizar el operador PostgreSQL JSON
   para saber si una clave existe (<literal>?</literal>).
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.pdo_oci">
  <title>PDO_OCI</title>

  <para>
   <methodname>PDOStatement::getColumnMeta</methodname> ahora está disponible.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.pdo_sqlite">
  <title>PDO_SQLite</title>

  <para>
   <literal>PDOStatement::getAttribute(PDO::SQLITE_ATTR_READONLY_STATEMENT)</literal>
   permite verificar si la declaración es de solo lectura, es decir, si no
   modifica la base de datos.
  </para>
  <para>
   <literal>PDO::setAttribute(PDO::SQLITE_ATTR_EXTENDED_RESULT_CODES, true)</literal>
   activa el uso de códigos de resultados extendidos en
   <function>PDO::errorInfo</function> y
   <function>PDOStatement::errorInfo</function>.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.sqlite3">
  <title>SQLite3</title>

  <para>
   Se ha añadido <methodname>SQLite3::lastExtendedErrorCode</methodname>
   para recuperar el último código extendido del resultado.
  </para>
  <para>
   Se ha añadido <literal>SQLite3::enableExtendedResultCodes($enable = true)</literal>,
   que hará que <methodname>SQLite3::lastErrorCode</methodname> devuelva códigos de resultados extendidos.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.standard">
  <title>Estándar</title>

  <sect3 xml:id="migration74.new-features.standard.strip-tags">
   <title>strip_tags() con un array de nombres de tag</title>
   <para>
    <function>strip_tags</function> ahora acepta un &array; de tags
    permitidos: en lugar de
    <literal>strip_tags($str, '&lt;a&gt;&lt;p&gt;')</literal> ahora es posible escribir <literal>strip_tags($str, ['a', 'p'])</literal>.
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.standard.magic-serialize">
   <title>Serialización personalizada de objetos</title>
   <para>
    Se ha añadido un nuevo mecanismo de serialización personalizada de objetos,
    que utiliza dos nuevas métodos mágicos:
    <literal>__serialize</literal> y <literal>__unserialize</literal>.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
// Devuelve un array que contiene todo el estado necesario del objeto.
public function __serialize(): array
{
}

// Restaura el estado de un objeto desde el array de datos proporcionado.
public function __unserialize(array $data): void
{
}
?>
]]>
     </programlisting>
    </informalexample>
    El nuevo mecanismo de serialización sucederá a la interfaz
    <interfacename>Serializable</interfacename>, que será obsoleto en el futuro.
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.standard.array-merge-no-args">
   <title>Las funciones array merge sin argumentos</title>
   <para>
    <function>array_merge</function> y <function>array_merge_recursive</function>
    ahora pueden ser llamadas sin argumentos, en cuyo caso
    devolverán un &array; vacío. Esto es útil en conjunción con el operador
    de descomposición, por ejemplo <literal>array_merge(...$arrays)</literal>.
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.standard.proc-open">
   <title>La función <function>proc_open</function></title>
   <para>
    <function>proc_open</function> ahora acepta un &array; en lugar de una
    &string; para la comanda. En este caso, el proceso se abre directamente
    (sin pasar a través de un shell) y PHP se encargará de escapar los argumentos
    cuando sea necesario.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
proc_open(['php', '-r', 'echo "Hello World\n";'], $descriptors, $pipes);
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    <function>proc_open</function> ahora soporta los descriptores
    <literal>redirect</literal> y <literal>null</literal>.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
// Como 2>&1 en el shell
proc_open($cmd, [1 => ['pipe', 'w'], 2 => ['redirect', 1]], $pipes);
// Como 2>/dev/null o 2>nul en el shell
proc_open($cmd, [1 => ['pipe', 'w'], 2 => ['null']], $pipes);
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.standard.sodium-argon-hash">
   <title>argon2i(d) sin libargon</title>
   <para>
    <function>password_hash</function> ahora tiene las implementaciones de
    argon2i y argon2id de la extensión sodium cuando PHP es compilado sin libargon.
   </para>
  </sect3>

 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
