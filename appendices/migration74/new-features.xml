<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 216c1d34f9c4de575cf7115107a40f90f45b21c3 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->

<sect1 xml:id="migration74.new-features" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Nuevas características</title>

 <sect2 xml:id="migration74.new-features.core">
  <title>PHP Core</title>

  <sect3 xml:id="migration74.new-features.core.typed-properties">
   <title>Typed properties</title>

   <para>
    Las propiedades de clase ahora admiten declaraciones de tipo.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
class User {
    public int $id;
    public string $name;
}
?>
]]>
     </programlisting>
    </informalexample>
    El ejemplo anterior garantiza que <literal>$user->id</literal> solo puede
    asignarse valores de tipo <type>int</type> y <literal>$user->name</literal> solo puede
    asignarse valores de tipo <type>string</type>.
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.core.arrow-functions">
   <title>Arrow functions</title>

   <para>
    <link linkend="functions.arrow">Arrow functions</link> proporciona
    una sintaxis abreviada para definir funciones
    con ligadura de ámbito implícita por valor.

    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$factor = 10;
$nums = array_map(fn($n) => $n * $factor, [1, 2, 3, 4]);
// $nums = array(10, 20, 30, 40);
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.core.type-variance">
   <title>Covarianza limitada del tipo de retorno y contravarianza del tipo de argumento</title>

   <para>
    El siguiente código ahora funcionará:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
class A {}
class B extends A {}

class Producer {
    public function method(): A {}
}
class ChildProducer extends Producer {
    public function method(): B {}
}
?>
]]>
     </programlisting>
    </informalexample>
    El soporte completo de varianza solo está disponible si se utiliza la carga automática. Dentro de un
    solo fichero solo son posibles referencias de tipo no cíclicas, porque todas
    las clases deben estar disponibles antes de ser referenciadas.
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.core.null-coalescing-assignment-operator">
   <title>Operador de asignación de fusión nula</title>

   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$array['key'] ??= computeDefault();
// es aproximadamente equivalente a
if (!isset($array['key'])) {
    $array['key'] = computeDefault();
}
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.core.unpack-inside-array">
   <title>Desempaquetado dentro de arrays</title>

   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$parts = ['apple', 'pear'];
$fruits = ['banana', 'orange', ...$parts, 'watermelon'];
// ['banana', 'orange', 'apple', 'pear', 'watermelon'];
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.core.numeric-literal-separator">
   <title>Separador de literales numéricos</title>

   <para>
    Los literales numéricos pueden contener guiones bajos entre dígitos.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
6.674_083e-11; // float
299_792_458;   // decimal
0xCAFE_F00D;   // hexadecimal
0b0101_1111;   // binario
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.core.weakreference">
   <title>Referencias débiles</title>

   <para>
    Las referencias débiles permiten al programador retener una referencia a un objeto
    que no impide que el objeto sea destruido.
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.core.tostring-exceptions">
   <title>Permitir excepciones desde __toString()</title>

   <para>
    Lanzar excepciones desde <link linkend="object.tostring">__toString()</link>
    ahora está permitido. Anteriormente esto resultaba en un error fatal. Los errores fatales recuperables existentes en las conversiones de string han sido convertidos a
    excepciones de tipo <classname>Error</classname>.
   </para>
  </sect3>

 </sect2>

 <sect2 xml:id="migration74.new-features.curl">
  <title>CURL</title>

  <para>
   <classname>CURLFile</classname> ahora admite envolturas de flujo además
   de nombres de fichero simples, si la extensión ha sido construida contra libcurl &gt;= 7.56.0.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.filter">
  <title>Filter</title>

  <para>
   El filtro <constant>FILTER_VALIDATE_FLOAT</constant> ahora admite las
   opciones <literal>min_range</literal> y <literal>max_range</literal>,
   con la misma semántica que <constant>FILTER_VALIDATE_INT</constant>.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.ffi">
  <title>FFI</title>

  <para>
   FFI es una nueva extensión, que proporciona una forma sencilla de llamar
   a funciones nativas, acceder a variables nativas y crear/acceder
   a estructuras de datos definidas en bibliotecas C.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.gd">
  <title>GD</title>

  <para>
   Se ha añadido el filtro de imagen <constant>IMG_FILTER_SCATTER</constant>
   para aplicar un filtro de dispersión a las imágenes.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.hash">
  <title>Hash</title>

  <para>
   Se ha añadido el hash <literal>crc32c</literal> utilizando el polinomio de Castagnoli.
   Esta variante de CRC32 es utilizada por sistemas de almacenamiento, como
   iSCSI, SCTP, Btrfs y ext4.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.mbstring">
  <title>Multibyte String</title>

  <para>
   Se ha añadido la función <function>mb_str_split</function>, que proporciona
   la misma funcionalidad que <function>str_split</function>, pero operando
   sobre puntos de código en lugar de bytes.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.opcache">
  <title>OPcache</title>

  <para>
   Se ha añadido <link linkend="opcache.preloading">soporte para la precarga de código</link>.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.pcre">
  <title>Regular Expressions (Perl-Compatible)</title>

  <para>
   Las funciones <function>preg_replace_callback</function> y <function>preg_replace_callback_array</function>
   ahora aceptan un argumento adicional <parameter>flags</parameter>, con soporte para las
   banderas <constant>PREG_OFFSET_CAPTURE</constant> y <constant>PREG_UNMATCHED_AS_NULL</constant>.
   Esto influye en el formato del array de coincidencias pasado a la función de retrollamada.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.pdo">
  <title>PDO</title>

  <para>
   El nombre de usuario y la contraseña ahora pueden especificarse como parte del DSN de PDO para
   los controladores mysql, mssql, sybase, dblib, firebird y oci. Anteriormente esto solo era admitido por el controlador pgsql. Si un nombre de usuario/contraseña se especifica
   tanto en el constructor como en el DSN, el constructor tiene prioridad.
  </para>
  <para>
   Ahora es posible escapar los signos de interrogación en las consultas SQL para evitar que se interpreten como marcadores de posición de parámetros. Escribir <literal>??</literal>
   permite enviar un solo signo de interrogación a la base de datos y, por ejemplo, utilizar el
   operador de existencia de clave JSON de PostgreSQL (<literal>?</literal>).
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.pdo_oci">
  <title>PDO_OCI</title>

  <para>
   <methodname>PDOStatement::getColumnMeta</methodname> ahora está disponible.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.pdo_sqlite">
  <title>PDO_SQLite</title>

  <para>
   <literal>PDOStatement::getAttribute(PDO::SQLITE_ATTR_READONLY_STATEMENT)</literal>
   permite verificar si la sentencia es de solo lectura, es decir, si no modifica
   la base de datos.
  </para>
  <para>
   <literal>PDO::setAttribute(PDO::SQLITE_ATTR_EXTENDED_RESULT_CODES, true)</literal>
   habilita el uso de códigos de resultado extendidos de SQLite3 en <function>PDO::errorInfo</function>
   y <function>PDOStatement::errorInfo</function>.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.sqlite3">
  <title>SQLite3</title>

  <para>
   Se ha añadido <methodname>SQLite3::lastExtendedErrorCode</methodname>
   para obtener el último código de resultado extendido.
  </para>
  <para>
   Se ha añadido <literal>SQLite3::enableExtendedResultCodes($enable = true)</literal>,
   que hará que <methodname>SQLite3::lastErrorCode</methodname>
   devuelva códigos de resultado extendidos.
  </para>
 </sect2>

 <sect2 xml:id="migration74.new-features.standard">
  <title>Standard</title>

  <sect3 xml:id="migration74.new-features.standard.strip-tags">
   <title>strip_tags() con array de nombres de etiquetas</title>
   <para>
    <function>strip_tags</function> ahora también acepta un array de etiquetas permitidas:
    en lugar de <literal>strip_tags($str, '&lt;a&gt;&lt;p&gt;')</literal>
    ahora se puede escribir <literal>strip_tags($str, ['a', 'p'])</literal>.
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.standard.magic-serialize">
   <title>Serialización personalizada de objetos</title>
   <para>
    Se ha añadido un nuevo mecanismo para la serialización personalizada de objetos, que
    utiliza dos nuevos métodos mágicos: <literal>__serialize</literal>
    y <literal>__unserialize</literal>.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
// Devuelve un array que contiene todo el estado necesario del objeto.
public function __serialize(): array;

// Restaura el estado del objeto a partir del array de datos dado.
public function __unserialize(array $data): void;
?>
]]>
     </programlisting>
    </informalexample>
    El nuevo mecanismo de serialización sustituye a la
    interfaz <interfacename>Serializable</interfacename>,
    que será deprecada en el futuro.
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.standard.array-merge-no-args">
   <title>Funciones de combinación de arrays sin argumentos</title>
   <para>
    <function>array_merge</function> y <function>array_merge_recursive</function>
    ahora pueden ser llamadas sin ningún argumento, en cuyo caso devolverán un array vacío.
    Esto es útil en combinación con el operador de dispersión, por ejemplo, <literal>array_merge(...$arrays)</literal>.
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.standard.proc-open">
   <title>Función <function>proc_open</function></title>
   <para>
    <function>proc_open</function> ahora acepta un array en lugar de un
    string para el comando. En este caso, el proceso se abrirá
    directamente (sin pasar por una shell) y PHP se encargará de
    cualquier escape necesario de los argumentos.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
proc_open(['php', '-r', 'echo "Hello World\n";'], $descriptors, $pipes);
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    <function>proc_open</function> ahora admite
    descriptores <literal>redirect</literal> y <literal>null</literal>.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
// Como 2>&1 en la shell
proc_open($cmd, [1 => ['pipe', 'w'], 2 => ['redirect', 1]], $pipes);
// Como 2>/dev/null o 2>nul en la shell
proc_open($cmd, [1 => ['pipe', 'w'], 2 => ['null']], $pipes);
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>

  <sect3 xml:id="migration74.new-features.standard.sodium-argon-hash">
   <title>argon2i(d) sin libargon</title>
   <para>
    <function>password_hash</function> ahora tiene las implementaciones argon2i y argon2id
    de la extensión sodium cuando PHP se construye sin libargon.
   </para>
  </sect3>

 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
