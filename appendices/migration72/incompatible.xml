<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 8859c8b96cd9e80652813f7bcf561432a5e9f934 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->

<sect1 xml:id="migration72.incompatible">
 <title>Cambios incompatibles con versiones anteriores</title>

 <sect2 xml:id="migration72.incompatible.number_format-no-neg-zero">
  <title>Evitar que <function>number_format</function> devuelva cero negativo</title>

  <para>
   Anteriormente, era posible que la función
   <function>number_format</function> devolviera <literal>-0</literal>.
   Aunque esto es perfectamente válido según la norma "IEEE 754
   floating point specification", esta rareza no era deseable
   para la visualización de números formateados en una forma legible por el ser humano.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

var_dump(number_format(-0.01)); // ahora muestra string(1) "0" en lugar de string(2) "-0"
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration72.incompatible.object-array-casts">
  <title>Conversión de claves numéricas en objetos y arrays durante el casting</title>

  <para>
   Las claves numéricas ahora son mejor manejadas durante el casting
   de un array a un objeto y de un objeto a un array (casting explícito o por
   la función <function>settype</function>).
  </para>

  <para>
   Esto significa que las claves representadas por un entero (o un entero en forma de texto) de un array convertido en objeto ahora son accesibles:
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

// array a objeto
$arr = [0 => 1];
$obj = (object) $arr;
var_dump(
    $obj,
    $obj->{'0'}, // ahora accesible
    $obj->{0} // ahora accesible
);
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
object(stdClass)#1 (1) {
  ["0"]=>    // ahora clave de texto en lugar de clave entera
  int(1)
}
int(1)
int(1)
]]>
   </screen>
  </informalexample>

  <para>
   Y las claves en formato entero (o entero en forma de texto) de objetos convertidos
   en arrays ahora son accesibles:
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

// objeto a array
$obj = new class {
    public function __construct()
    {
        $this->{0} = 1;
    }
};
$arr = (array) $obj;
var_dump(
    $arr,
    $arr[0], // ahora accesible
    $arr['0'] // ahora accesible
);
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
array(1) {
  [0]=>    // ahora clave entera en lugar de clave de texto
  int(1)
}
int(1)
int(1)
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration72.incompatible.no-null-to-get_class">
  <title>Prohibir pasar &null; a <function>get_class</function></title>

  <para>
   Anteriormente, pasar &null; a la función <function>get_class</function>
   devolvía el nombre de la clase en curso. Este comportamiento ha sido eliminado,
   se muestra un error <constant>E_WARNING</constant> en su lugar.
   Para recuperar el mismo comportamiento que antes, el argumento debería
   simplemente ser eliminado.
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.warn-on-non-countable-types">
  <title>Advertir al contar tipos no contables</title>

  <para>
   Se emitirá un <constant>E_WARNING</constant> al intentar
   utilizar la función <function>count</function> en un
   tipo no contable (esto incluye la función alias
   <function>sizeof</function>).
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

var_dump(
    count(null), // NULL no es contable
    count(1), // un entero no es contable
    count('abc'), // un string no es contable
    count(new stdClass), // un objeto que no implementa la interfaz Countable no es contable
    count([1,2]) // un array es contable
);
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Warning: count(): Parameter must be an array or an object that implements Countable in %s on line %d

Warning: count(): Parameter must be an array or an object that implements Countable in %s on line %d

Warning: count(): Parameter must be an array or an object that implements Countable in %s on line %d

Warning: count(): Parameter must be an array or an object that implements Countable in %s on line %d
int(0)
int(1)
int(1)
int(1)
int(2)
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration72.incompatible.hash-ext-to-objects">
  <title>Reemplazo de ext/hash de recursos a objetos</title>

  <para>
   En el marco de la migración a largo plazo de los recursos, la extensión
   <link linkend="book.hash">Hash</link> ha sido actualizada para utilizar los
   objetos en lugar de recursos. El cambio debería ser transparente para
   los desarrolladores PHP, excepto donde se hayan realizado verificaciones con
   <function>is_resource</function>
   (será necesario reemplazar por
   <function>is_object</function>).
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.ssl-tls-defaults">
  <title>Mejorar los valores por defecto SSL/TLS</title>

  <para>
   Se han realizado las siguientes modificaciones respecto a los valores por defecto:
  </para>

  <itemizedlist>
   <listitem>
    <simpara>
     <literal>tls://</literal> ahora por defecto TLSv1.0 o TLSv1.1 o TLSv1.2
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <literal>ssl://</literal> es un alias de <literal>tls://</literal>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <literal>STREAM_CRYPTO_METHOD_TLS_*</literal> constantes por defecto de
     TLSv1.0 o TLSv1.1 + TLSv1.2, en lugar de solo TLSv1.0.
    </simpara>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration72.incompatible.gettype-on-closed-resource">
  <title><function>gettype</function> valor de retorno en recursos cerrados</title>

  <para>
   Anteriormente, el uso de <function>gettype</function> en un recurso
   cerrado devolvía una cadena <literal>"unknown type"</literal>. Ahora,
   la cadena <literal>"resource (closed)"</literal> será devuelta.
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.is_object-on-incomplete_class">
  <title><function>is_object</function> y <classname>__PHP_Incomplete_Class</classname></title>

  <para>
   Anteriormente, el uso de <function>is_object</function> en la clase
   <classname>__PHP_Incomplete_Class</classname> devolvía &false;.
   Ahora, &true; será devuelto.
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.undefined-constants">
  <title>Aumento del nivel de error de las constantes no definidas</title>

  <para>
   Las referencias no cualificadas a constantes no definidas ahora generarán
   un <constant>E_WARNING</constant> (en lugar de un <constant>E_NOTICE</constant>).
   En la próxima versión mayor de PHP, generarán una excepción
   <classname>Error</classname>.
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.windows-support">
  <title>Soporte de Windows</title>

  <para>
   Las versiones mínimas oficialmente soportadas para Windows son Windows 7/
   Server 2008 R2.
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.trait-properties">
  <title>Verificación de los valores por defecto de las propiedades de los traits</title>

  <para>
   Los controles de compatibilidad en los valores por defecto de las propiedades de trait ya no realizarán la conversión.
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.object-reserved-word">
  <title><literal>object</literal> para los nombres de clases</title>

  <para>
   El nombre <literal>object</literal> estaba anteriormente soft-reservado en PHP 7.0.
   Ahora está reservado, prohibiendo su uso como nombre de clase, trait o interfaz.
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.netware-support">
  <title>Soporte de NetWare</title>

  <para>
   El soporte de NetWare ha sido eliminado.
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.array-unique">
  <title><function>array_unique</function> con <constant>SORT_STRING</constant></title>

  <para>
   Mientras que <function>array_unique</function> con <constant>SORT_STRING</constant>
   anteriormente copiaba el array y eliminaba elementos no únicos
   (sin envolver el array después), ahora se construye un nuevo array añadiendo los elementos únicos.
   Esto puede resultar en índices numéricos diferentes.
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.bcmod-and-floats">
  <title><function>bcmod</function> cambia para números decimales</title>

  <para>
   La función <function>bcmod</function> ya no trunca los números
   fraccionarios a enteros. Como tal, su comportamiento ahora sigue
   <function>fmod</function>, en lugar del operador <literal>%</literal>.
   Por ejemplo, <literal>bcmod('4', '3.5')</literal> ahora devuelve
   <literal>0.5</literal> en lugar de <literal>1</literal>.
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.hash-functions">
  <title>Funciones de hachage y hachages no criptográficos</title>

  <para>
   Las funciones <function>hash_hmac</function>, <function>hash_hmac_file</function>,
   <function>hash_pbkdf2</function>, y <function>hash_init</function> (con
   <constant>HASH_HMAC</constant>) ya no aceptan hachages no criptográficos.
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.json_decode-changes">
  <title>Opciones de la función <function>json_decode</function></title>

  <para>
   La opción <constant>JSON_OBJECT_AS_ARRAY</constant> de la función
   <function>json_decode</function> ahora se utiliza si el segundo parámetro
   (assoc) es &null;. Anteriormente <constant>JSON_OBJECT_AS_ARRAY</constant> siempre fue ignorado.
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.rand-mt_rand-output">
  <title>Salida de <function>rand</function> y <function>mt_rand</function></title>

  <para>
   Las secuencias generadas por <function>rand</function> y
   <function>mt_rand</function> para casos específicos pueden diferir
   de PHP 7.1 en máquinas de 64 bits (debido a la corrección de un error
   en la implementación de la polarización del módulo).
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.sqlsafe_mode-ini-setting">
  <title>Eliminación del parámetro INI <link linkend="ini.sql.safe-mode"><parameter>sql.safe_mode</parameter></link></title>

  <para>
   El parámetro INI <parameter>sql.safe_mode</parameter> ha sido eliminado.
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.date_parse_from_format">
  <title>Cambio en <function>date_parse</function> y <function>date_parse_from_format</function></title>

  <para>
   El elemento de <literal>zone</literal> del array devuelto por <function>date_parse</function> y
   <function>date_parse_from_format</function> representa segundos en lugar de
   minutos, y su signo está invertido. Por ejemplo, <literal>-120</literal> ahora es
   <literal>7200</literal>.
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.cookie-decode">
  <title>Cookies entrantes</title>

  <para>
   Desde PHP 7.2.34, los <emphasis>nombres</emphasis> de las cookies entrantes ya no
   se decodifican URL por razones de seguridad.
  </para>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
