<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 86e6094e86b84a51d00ab217ac50ce8dde33d82a Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->

<sect1 xml:id="migration73.incompatible" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Modificaciones que causan incompatibilidad ascendente</title>

 <sect2 xml:id="migration73.incompatible.core">
  <title>Núcleo de PHP</title>

  <sect3 xml:id="migration73.incompatible.core.heredoc-nowdoc">
   <title>Interpretación de las Etiquetas de Terminación Heredoc/Nowdoc</title>

   <para>
    Con la introducción de <link
    linkend="migration73.new-features.core.heredoc">la sintaxis flexible heredoc
    / nowdoc</link>, los &string; doc que contienen la etiqueta de terminación
    en su cuerpo pueden causar errores de sintaxis o cambiar en interpretación. Por ejemplo en :
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$str = <<<FOO
abcdefg
   FOO
FOO;
?>
]]>
     </programlisting>
    </informalexample>
    la ocurrencia indentada de <literal>FOO</literal> no tenía significado
    particular anteriormente. Ahora será interpretada como el final de
    la &string; heredoc y el <literal>FOO;</literal> siguiente causará un error
    de sintaxis. Este problema puede siempre ser resuelto eligiendo una etiqueta de
    terminación que no aparezca en el contenido de la &string;.
   </para>
  </sect3>

  <sect3 xml:id="migration73.incompatible.core.continue-targeting-switch">
   <title>Continue apuntando a Switch genera Advertencias</title>

   <para>
    Las declaraciones <literal>continue</literal> apuntando a las estructuras de flujo de
    control <literal>switch</literal> generarán ahora una advertencia.
    En PHP estas declaraciones <literal>continue</literal> son equivalentes a
    <literal>break</literal>, mientras que se comportan como
    <literal>continue 2</literal> en otros lenguajes.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
while ($foo) {
    switch ($bar) {
      case "baz":
         continue;
         // Advertencia: "continue" apuntando a switch es equivalente a
         //          "break". ¿Quiso decir "continue 2"?
   }
}
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>

  <sect3 xml:id="migration73.incompatible.core.arrayaccess">
   <title>Interpretación Estricta de las Claves de Cadenas de Caracteres Enteros en ArrayAccess</title>

   <para>
    Los accesos de &array; del tipo <literal>$obj["123"]</literal>, donde
    <literal>$obj</literal> implementa <classname>ArrayAccess</classname> y
    <literal>"123"</literal> es una &string; de &integer; literal ya no
    resultarán en una conversión implícita a &integer;, es decir,
    <literal>$obj->offsetGet("123")</literal> será llamado en lugar de
    <literal>$obj->offsetGet(123)</literal>. Esto corresponde al comportamiento
    para los no literales. El comportamiento de los &array; no se ve afectado
    de ninguna manera, continúan convirtiendo implícitamente
    claves de &string; a &integer;.
   </para>
  </sect3>

  <sect3 xml:id="migration73.incompatible.core.static-properties">
   <title>Las Propiedades Estáticas ya no se Separan por la Asignación de Referencia</title>

   <para>
    En PHP, las propiedades estáticas se comparten entre las clases heredadas,
    a menos que la propiedad estática sea explícitamente reemplazada en una clase hija.
    Sin embargo, debido a un artefacto de implementación, era posible separar
    las propiedades estáticas asignando una referencia.
    Esta laguna ha sido corregida.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
class Test {
    public static $x = 0;
}
class Test2 extends Test { }

Test2::$x = &$x;
$x = 1;

var_dump(Test::$x, Test2::$x);
// Anteriormente: int(0), int(1)
// Ahora:        int(1), int(1)
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>

  <sect3 xml:id="migration73.incompatible.core.reference-unwrapping">
   <title>
    Las referencias devueltas por los arrays y los accesos a las propiedades
    son inmediatamente descomprimidas
   </title>

   <para>
    Las referencias devueltas por los arrays y los accesos a las propiedades
    son ahora descomprimidas en el contexto del acceso. Esto significa que ya no es
    posible modificar la referencia entre el acceso y el uso del valor accedido:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
$arr = [1];
$ref =& $arr[0];
var_dump($arr[0] + ($arr[0] = 2));
// Anteriormente: int(4), Ahora: int(3)
?>
]]>
     </programlisting>
    </informalexample>
    Esto hace que el comportamiento de las referencias y no referencias sea coherente.
    Es de notar que leer y escribir un valor dentro de una única
    expresión continúa siendo un comportamiento no definido y puede cambiar
    nuevamente en el futuro.
   </para>
  </sect3>

  <sect3 xml:id="migration73.incompatible.core.traversable-unpacking">
   <title>La descompresión de argumentos de Traversables con claves no enteras ya no es soportada</title>

   <para>
    La descompresión de argumentos ha dejado de funcionar con
    <classname>Traversable</classname>s con claves no enteras
    El siguiente código funcionaba en PHP 5.6-7.2 por accidente.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
function foo(...$args) {
    var_dump($args);
}
function gen() {
    yield 1.23 => 123;
}
foo(...gen());
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect3>

  <sect3 xml:id="migration73.incompatible.core.misc">
   <title>Diversos</title>

   <para>
    La utilidad <filename>ext_skel</filename> ha sido completamente repensada con
    nuevas opciones y algunas opciones antiguas eliminadas.
    Esto ahora está escrito en PHP y no tiene ninguna dependencia externa.
   </para>

   <para>
    El soporte para BeOS ha sido abandonado.
   </para>

   <para>
    Las excepciones lanzadas debido a una conversión automática de advertencias
    en excepciones con el modo <literal>EH_THROW</literal> (por ejemplo, algunas
    excepciones de <classname>DateTime</classname>) ya no llenan el estado de
    <function>error_get_last</function>. Como tales, ahora funcionan
    de la misma manera que las excepciones lanzadas manualmente.
   </para>

   <para>
    <classname>TypeError</classname> ahora reporta los tipos incorrectos
    como <literal>int</literal> y <literal>bool</literal> en lugar de
    <literal>integer</literal> y <literal>boolean</literal>, respectivamente.
   </para>

   <para>
    Las variables indefinidas pasadas a <function>compact</function> serán
    ahora reportadas con una notificación.
   </para>

   <para>
    <function>getimagesize</function> y las funciones conexas ahora reportan
    el tipo MIME de las imágenes BMP como
    <literal>image/bmp</literal> en lugar de <literal>image/x-ms-bmp</literal>,
    ya que el primero ha sido registrado con la IANA (ver
    <link xlink:href="&url.rfc;7903">RFC 7903</link>).
   </para>

   <para>
    <function>stream_socket_get_name</function> ahora devuelve las direcciones
    IPv6 con corchetes. Por ejemplo, <literal>"[::1]:1337"</literal> será
    devuelto en lugar de <literal>"::1:1337"</literal>.
   </para>
  </sect3>
 </sect2>

 <sect2 xml:id="migration73.incompatible.bc">
  <title>BCMath Arbitrary Precision Mathematics</title>

  <para>
   Todas las advertencias lanzadas por las <link linkend="ref.bc">funciones BCMath</link>
   ahora utilizan el gestor de errores de PHP. Anteriormente, algunas
   advertencias se escribían directamente a stderr.
  </para>

  <para>
   <function>bcmul</function> y <function>bcpow</function> ahora devuelven
   los números con la precisión solicitada. Anteriormente, algunos números podían
   omitir los ceros decimales finales.
  </para>
 </sect2>

 <sect2 xml:id="migration73.incompatible.imap">
  <title>IMAP, POP3 y NNTP</title>

  <para>
   Las autenticaciones <command>rsh</command>/<command>ssh</command> están
   deshabilitadas por defecto. Utilice <link
   linkend="ini.imap.enable-insecure-rsh">imap.enable_insecure_rsh</link> si
   desea activarlas. Es de notar que la biblioteca IMAP no filtra los nombres de las carpetas antes de pasarlos a los comandos
   <command>rsh</command>/<command>ssh</command>, por lo que pasar datos no fiables a esta función con <command>rsh</command>/<command>ssh</command> activado es peligroso.
  </para>
 </sect2>

 <sect2 xml:id="migration73.incompatible.mbstring">
  <title>Cadenas de caracteres multioctetos</title>

  <para>
   Debido al soporte de capturas nombradas, las máscaras
   <literal>mb_ereg_*()</literal> que utilizan capturas nombradas se comportarán
   de manera diferente. En particular, las capturas nombradas formarán parte de las
   coincidencias y <function>mb_ereg_replace</function> interpretará la
   sintaxis adicional. Ver <link
    linkend="migration73.new-features.mbstring.named-captures">Capturas
    Nombradas</link> para más información.
  </para>
 </sect2>

 <sect2 xml:id="migration73.incompatible.mysqli">
  <title>Extensión MySQL Mejorada (MySQLi)</title>

  <para>
   Las declaraciones preparadas ahora reportan las fracciones de segundo
   para las columnas <literal>DATETIME</literal>, <literal>TIME</literal> y
   <literal>TIMESTAMP</literal> con especificador decimal (por ejemplo
   <literal>TIMESTAMP(6)</literal> al usar microsegundos).
   Anteriormente, las fracciones de segundo eran simplemente omitidas
   de los valores de retorno.
  </para>
 </sect2>

 <sect2 xml:id="migration73.incompatible.pdo-mysql">
  <title>Funciones MySQL (PDO_MYSQL)</title>

  <para>
   Las declaraciones preparadas ahora reportan las fracciones de segundo
   para las columnas <literal>DATETIME</literal>, <literal>TIME</literal> y
   <literal>TIMESTAMP</literal> con especificador decimal (por ejemplo
   <literal>TIMESTAMP(6)</literal> al usar microsegundos).
   Anteriormente, las fracciones de segundo eran simplemente omitidas
   de los valores de retorno. Tenga en cuenta que esto solo afecta
   el uso de <link linkend="ref.pdo-mysql">PDO_MYSQL</link> con las
   declaraciones preparadas emuladas desactivadas (por ejemplo, utilizando la
   funcionalidad nativa de preparación). Las declaraciones que utilizan conexiones que tienen <constant>PDO::ATTR_EMULATE_PREPARES</constant>=&true;
   (que es por defecto) no se ven afectadas por la corrección de error
   y ya recuperaban los valores de las fracciones de segundo del motor.
  </para>
 </sect2>

 <sect2 xml:id="migration73.incompatible.reflection">
  <title>Reflection</title>

  <para>
   Las exportaciones de <link linkend="book.reflection">Reflection</link> en
   &string; ahora utilizan
   <literal>int</literal> y <literal>bool</literal> en lugar de
   <literal>integer</literal> y <literal>boolean</literal>, respectivamente.
  </para>
 </sect2>

 <sect2 xml:id="migration73.incompatible.spl">
  <title>Biblioteca Estándar de PHP (SPL)</title>

  <para>
   Si un autocargador <link linkend="book.spl">SPL</link> lanza una excepción,
   los autocargadores siguientes no serán ejecutados. Anteriormente, todos los
   autocargadores eran ejecutados y las excepciones eran encadenadas.
  </para>
 </sect2>

 <sect2 xml:id="migration73.incompatible.simplexml">
  <title>SimpleXML</title>

  <para>
   Las operaciones matemáticas que implican los objetos <link
   linkend="book.simplexml">SimpleXML</link> tratarán ahora el texto
   como un &integer; o un &float;, según lo que sea más apropiado.
   Anteriormente, los valores eran tratados como un &integer; sin condición.
  </para>
 </sect2>

 <sect2 xml:id="migration73.incompatible.cookie-decode">
  <title>Cookies entrantes</title>

  <para>
   Desde PHP 7.3.23, los <emphasis>nombres</emphasis> de las cookies entrantes
   ya no se decodifican por URL por razones de seguridad.
  </para>
 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
