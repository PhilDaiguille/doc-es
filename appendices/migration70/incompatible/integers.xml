<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 86e6094e86b84a51d00ab217ac50ce8dde33d82a Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes Maintainer: girgias -->

<sect2 xml:id="migration70.incompatible.integers">
 <title>Modificaciones en la gestión de &integer;</title>

 <sect3 xml:id="migration70.incompatible.integers.invalid-octals">
  <title>Literales octales no válidos</title>

  <para>
   Anteriormente, los literales octales que contenían números no válidos
   eran truncados silenciosamente (<literal>0128</literal> se interpretaba como
   <literal>012</literal>). Ahora, un literal octal no válido provocará
   un error de análisis.
  </para>
 </sect3>

 <sect3 xml:id="migration70.incompatible.integers.negative-bitshift">
  <title>Desplazamiento de bits negativo</title>

  <para>
   Los desplazamientos de bits por números negativos ahora lanzarán una
   <classname>ArithmeticError</classname>:
  </para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
var_dump(1 >> -1);
?>
]]>
   </programlisting>
    &example.outputs.5;
    <screen>
<![CDATA[
int(0)
]]>
    </screen>
    &example.outputs.7;
    <screen>
<![CDATA[
Fatal error: Uncaught ArithmeticError: Bit shift by negative number in /tmp/test.php:2
Stack trace:
#0 {main}
  thrown in /tmp/test.php on line 2
]]>
    </screen>
  </informalexample>
 </sect3>

 <sect3 xml:id="migration70.incompatible.integers.out-of-range">
  <title>Desplazamiento de bits fuera de rango</title>

  <para>
   Los desplazamientos de bits (en ambos sentidos) más allá del ancho de bits de un
   &integer; siempre devolverán 0. Anteriormente, el comportamiento de estos
   desplazamientos dependía de la arquitectura.
  </para>
 </sect3>

 <sect3 xml:id="migration70.incompatible.integers.div-by-zero">
  <title>Cambios en la división por cero</title>

  <para>
   Anteriormente, cuando se utilizaba 0 como divisor en los operadores de
   división (/) o módulo (%), se emitía un E_WARNING y se devolvía <constant>false</constant>.
   Ahora, el operador de división devuelve un float como +INF, -INF o NAN, según lo
   especificado por IEEE 754. La advertencia E_WARNING del operador de módulo ha sido
   eliminada y ahora lanzará una excepción <classname>DivisionByZeroError</classname>.
  </para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
var_dump(3/0);
var_dump(0/0);
var_dump(0%0);
?>
]]>
   </programlisting>
   &example.outputs.5;
   <screen>
<![CDATA[
Warning: Division by zero in %s on line %d
bool(false)

Warning: Division by zero in %s on line %d
bool(false)

Warning: Division by zero in %s on line %d
bool(false)
]]>
   </screen>
   &example.outputs.7;
   <screen>
<![CDATA[
Warning: Division by zero in %s on line %d
float(INF)

Warning: Division by zero in %s on line %d
float(NAN)

PHP Fatal error:  Uncaught DivisionByZeroError: Modulo by zero in %s line %d
]]>
   </screen>
  </informalexample>
 </sect3>
</sect2>


<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
