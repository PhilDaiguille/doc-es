<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 35511ebc54edd56f1653a6a956210b4728570316 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes Maintainer: girgias -->

<sect2 xml:id="migration70.incompatible.variable-handling">
 <title>Modificaciones en el manejo de variables</title>

 <para>
  PHP 7 ahora utiliza un árbol de sintaxis abstracta al analizar los archivos fuente.
  Esto ha permitido numerosas mejoras en el lenguaje que anteriormente eran imposibles debido
  a las limitaciones en el analizador utilizado en versiones anteriores de PHP, pero ha llevado
  a la eliminación de algunos casos especiales por razones de consistencia,
  lo que ha roto la retrocompatibilidad. Estos casos se detallan en esta sección.
 </para>

 <sect3 xml:id="migration70.incompatible.variable-handling.indirect">
  <title>
   Modificaciones en el manejo de variables, propiedades y métodos indirectos
  </title>

  <para>
   El acceso indirecto a variables, propiedades y métodos ahora se evaluará estrictamente
   en orden de izquierda a derecha, en contraste con la combinación anterior de casos especiales.
   La tabla a continuación muestra cómo ha cambiado el orden de evaluación.
  </para>

  <para>
   <table>
    <title>Evaluación antigua y nueva de expresiones indirectas</title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>Expresión</entry>
       <entry>Interpretación PHP 5</entry>
       <entry>Interpretación PHP 7</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>
        <code>$$foo['bar']['baz']</code>
       </entry>
       <entry>
        <code>${$foo['bar']['baz']}</code>
       </entry>
       <entry>
        <code>($$foo)['bar']['baz']</code>
       </entry>
      </row>
      <row>
       <entry>
        <code>$foo-&gt;$bar['baz']</code>
       </entry>
       <entry>
        <code>$foo-&gt;{$bar['baz']}</code>
       </entry>
       <entry>
        <code>($foo-&gt;$bar)['baz']</code>
       </entry>
      </row>
      <row>
       <entry>
        <code>$foo-&gt;$bar['baz']()</code>
       </entry>
       <entry>
        <code>$foo-&gt;{$bar['baz']}()</code>
       </entry>
       <entry>
        <code>($foo-&gt;$bar)['baz']()</code>
       </entry>
      </row>
      <row>
       <entry>
        <code>Foo::$bar['baz']()</code>
       </entry>
       <entry>
        <code>Foo::{$bar['baz']}()</code>
       </entry>
       <entry>
        <code>(Foo::$bar)['baz']()</code>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </para>

  <para>
   El código que utilizaba el antiguo orden de evaluación de derecha a izquierda debe ser reescrito
   para usar explícitamente este orden de evaluación con llaves (ver la columna del medio anterior).
   Esto hará que el código sea compatible con PHP 7.x y retrocompatible con PHP 5.x.
  </para>

  <para>
   Esto también afecta a la palabra clave &global;. La sintaxis de llaves puede ser utilizada
   para emular el comportamiento anterior si es necesario:
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
function f() {
    // Válido solo en PHP 5.
    global $$foo->bar;

    // Válido en PHP 5 y 7.
    global ${$foo->bar};
}
?>
]]>
   </programlisting>
  </informalexample>
 </sect3>

 <sect3 xml:id="migration70.incompatible.variable-handling.list">
  <title>Modificaciones en el manejo de <function>list</function></title>

  <sect4 xml:id="migration70.incompatible.variable-handling.list.order">
   <title>
    La función <function>list</function> ya no asigna variables en orden inverso
   </title>

   <para>
    <function>list</function> ahora asignará valores a las variables en el orden en que se definen,
    en lugar de en orden inverso. En general, esto solo afecta al caso en que <function>list</function>
    se usa en conjunción con el operador de array <code>[]</code>, como se ilustra a continuación:
   </para>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
list($a[], $a[], $a[]) = [1, 2, 3];
var_dump($a);
?>
]]>
    </programlisting>
    &example.outputs.5;
    <screen>
<![CDATA[
array(3) {
  [0]=>
  int(3)
  [1]=>
  int(2)
  [2]=>
  int(1)
}
]]>
    </screen>
    &example.outputs.7;
    <screen>
<![CDATA[
array(3) {
  [0]=>
  int(1)
  [1]=>
  int(2)
  [2]=>
  int(3)
}
]]>
    </screen>
   </informalexample>

   <para>
    En general, se recomienda no depender del orden en que ocurren las asignaciones
    de la función <function>list</function>, ya que es un detalle de implementación
    que puede cambiar nuevamente en el futuro.
   </para>
  </sect4>

  <sect4 xml:id="migration70.incompatible.variable-handling.list.empty">
   <title>Las asignaciones vacías de <function>list</function> han sido eliminadas</title>

   <para>
    Las construcciones de <function>list</function> ya no pueden estar vacías. Los siguientes elementos
    ya no están permitidos:
   </para>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
list() = $a;
list(,,) = $a;
list($x, list(), $y) = $a;
?>
]]>
    </programlisting>
   </informalexample>
  </sect4>

  <sect4 xml:id="migration70.incompatible.variable-handling.list.string">
   <title><function>list</function> no puede descomponer &string;</title>

   <para>
    <function>list</function> ya no puede descomponer variables de &string;.
    Debe usarse <function>str_split</function> en su lugar.
   </para>
  </sect4>
 </sect3>

 <sect3 xml:id="migration70.incompatible.variable-handling.array-order">
  <title>
   El orden de los elementos de los arrays ha cambiado cuando los elementos
   se crean automáticamente durante las asignaciones por referencia
  </title>

  <para>
   El orden de los elementos en un array ha cambiado cuando estos elementos
   fueron creados automáticamente al referenciarlos en una asignación por referencia. Por ejemplo:
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$array = [];
$array["a"] =& $array["b"];
$array["b"] = 1;
var_dump($array);
?>
]]>
   </programlisting>
   &example.outputs.5;
   <screen>
<![CDATA[
array(2) {
  ["b"]=>
  &int(1)
  ["a"]=>
  &int(1)
}
]]>
   </screen>
   &example.outputs.7;
   <screen>
<![CDATA[
array(2) {
  ["a"]=>
  &int(1)
  ["b"]=>
  &int(1)
}
]]>
   </screen>
  </informalexample>
 </sect3>

 <sect3 xml:id="migration70.incompatible.variable-handling.parentheses">
  <title>
   Los paréntesis alrededor de los argumentos de función ya no afectan el comportamiento
  </title>

  <para>
   En PHP 5, el uso de paréntesis redundantes alrededor de un argumento de función podía silenciar
   las advertencias de normas estrictas cuando el argumento de función se pasaba por referencia.
   La advertencia ahora siempre se emite.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
function getArray() {
    return [1, 2, 3];
}

function squareArray(array &$a) {
    foreach ($a as &$v) {
        $v **= 2;
    }
}

// Genera una advertencia en PHP 7.
squareArray((getArray()));
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Notice: Only variables should be passed by reference in /tmp/test.php on line 13
]]>
   </screen>
  </informalexample>
 </sect3>
</sect2>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
