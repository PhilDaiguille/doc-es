<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 285e7e31e523ac35abc12bb1d7d60c8a6e42c4c6 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes Maintainer: girgias -->

<sect2 xml:id="migration70.incompatible.foreach">
 <title>Cambios relacionados con &foreach;</title>

 <para>
  Se han realizado cambios menores en el comportamiento de la estructura de control
  &foreach;, principalmente en la gestión del puntero interno del array y la
  modificación del array mientras se recorre.
 </para>

 <sect3 xml:id="migration70.incompatible.foreach.array-pointer">
  <title>&foreach; ya no modifica el puntero interno del array</title>

  <para>
   Antes de PHP 7, el puntero interno del array se modificaba mientras se recorría
   un array con &foreach;. Esto ya no es el caso, como se muestra en el siguiente ejemplo:
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$array = [0, 1, 2];
foreach ($array as &$val) {
    var_dump(current($array));
}
?>
]]>
   </programlisting>
   &example.outputs.5;
   <screen>
<![CDATA[
int(1)
int(2)
bool(false)
]]>
   </screen>
   &example.outputs.7;
   <screen>
<![CDATA[
int(0)
int(0)
int(0)
]]>
   </screen>
  </informalexample>
 </sect3>

 <sect3 xml:id="migration70.incompatible.foreach.by-value">
  <title>&foreach; por valor trabaja sobre una copia del array</title>

  <para>
   Al utilizar el modo predeterminado (por valor), &foreach; ahora trabaja
   sobre una copia del array en lugar del array original. Esto significa que
   los cambios realizados en el array mientras se recorre no afectarán los
   valores que se están iterando.
  </para>
 </sect3>

 <sect3 xml:id="migration70.incompatible.foreach.by-ref">
  <title>El comportamiento de &foreach; por referencia ha sido mejorado</title>

  <para>
   Al recorrer un array por referencia, &foreach; ahora identifica mejor
   los cambios realizados en el array durante la iteración. Por ejemplo,
   si se añaden valores a un array mientras se recorre, estos nuevos valores
   también serán iterados:
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$array = [0];
foreach ($array as &$val) {
    var_dump($val);
    $array[1] = 1;
}
?>
]]>
   </programlisting>
   &example.outputs.5;
   <screen>
<![CDATA[
int(0)
]]>
   </screen>
   &example.outputs.7;
   <screen>
<![CDATA[
int(0)
int(1)
]]>
   </screen>
  </informalexample>
 </sect3>

 <sect3 xml:id="migration70.incompatible.foreach.object">
  <title>Iteración de objetos no-<classname>Traversable</classname></title>

  <para>
   La iteración de un objeto no-<classname>Traversable</classname> ahora es
   idéntica a la iteración de un array por referencia. Como resultado,
   la <link linkend="migration70.incompatible.foreach.by-ref">mejora en el comportamiento
   cuando se modifica un array durante su iteración</link> también se aplica
   cuando se añaden o eliminan propiedades de un objeto.
  </para>
 </sect3>
</sect2>


<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
