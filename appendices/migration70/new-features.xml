<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 1422d543bf028003a543fd1ce920c6a301a93a51 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->

<sect1 xml:id="migration70.new-features" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Nuevas funcionalidades</title>

 <sect2 xml:id="migration70.new-features.scalar-type-declarations">
  <title>Declaraciones de tipo escalar</title>

  <para>
   Las <link linkend="language.types.declarations">declaraciones de tipo</link>
   escalar vienen en dos modos: coercitivo (por defecto) o estricto. Los tipos de parámetros
   siguientes pueden ser forzados (ya sea coercitivo o estricto): los strings
   (<type>string</type>), los enteros (<literal>int</literal>),
   los decimales (<type>float</type>) y los valores booleanos (<literal>bool</literal>).
   Complementan los otros tipos introducidos en PHP 5: los nombres de clases, las interfaces,
   los arrays (<type>array</type>) y las funciones invocables (<type>callable</type>).
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
// Modo coercitivo
function sumaEnteros(int ...$enteros)
{
    return array_sum($enteros);
}

var_dump(sumaEnteros(2, '3', 4.1));
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
int(9)
]]>
   </screen>
  </informalexample>

  <para>
   Para activar el modo estricto, una sola directiva &declare; debe ser colocada
   en la parte superior del archivo. Esto significa que el modo estricto de declaración de tipo
   escalar se configura por archivo. La directiva no solo afecta a la
   declaración de parámetros, sino también al tipo de retorno de la función (ver
   <link linkend="language.types.declarations">las declaraciones de tipo de retorno</link>
   en las funciones de PHP y las que provienen de extensiones).
  </para>

  <para>
   Una documentación completa y ejemplos de declaraciones de tipo escalar
   pueden encontrarse en la referencia: <link linkend="language.types.declarations">Declaraciones de tipo</link>.
  </para>
 </sect2>

 <sect2 xml:id="migration70.new-features.return-type-declarations">
  <title>Declaraciones de tipo de retorno</title>

  <para>
   PHP 7 añade soporte para
   <link linkend="language.types.declarations">declaraciones de tipo de retorno</link>.
   Similar a las
   <link linkend="language.types.declarations">declaraciones de tipo de argumento</link>,
   las declaraciones de tipo de retorno especifican el tipo del valor que será devuelto por la función.
   Los mismos
   <link linkend="language.types.declarations">tipos</link>
   que están disponibles para las declaraciones de tipo de retorno están disponibles para las declaraciones
   de tipo de argumento.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

function sumaArrays(array ...$arrays): array
{
    return array_map(function(array $array): int {
        return array_sum($array);
    }, $arrays);
}

print_r(sumaArrays([1,2,3], [4,5,6], [7,8,9]));
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Array
(
    [0] => 6
    [1] => 15
    [2] => 24
)
]]>
   </screen>
  </informalexample>

  <para>
   Una documentación completa y ejemplos de declaraciones de tipo de retorno
   pueden encontrarse en la referencia: <link linkend="language.types.declarations">Declaraciones de tipo de retorno</link>.
  </para>
 </sect2>

 <sect2 xml:id="migration70.new-features.null-coalesce-op">
  <title>El operador de fusión nula</title>

  <para>
   El operador de fusión nula (<literal>??</literal>) se ha añadido como un azúcar
   sintáctico para los casos de uso más comunes de necesitar una tercera conjunción
   con la función <function>isset</function>. Devuelve el primer operando si existe
   y no tiene un valor &null;; y devuelve el segundo operando en caso contrario.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
// Recupera el valor de $_GET['usuario'] y devuelve 'ninguno'
// si no existe.
$identificador = $_GET['usuario'] ?? 'ninguno';
// Esto es equivalente a:
$identificador = isset($_GET['usuario']) ? $_GET['usuario'] : 'ninguno';

// El operador permite encadenar: esto devolverá el primer
// valor definido respectivamente en $_GET['usuario'], $_POST['usuario']
// y 'ninguno'.
$identificador = $_GET['usuario'] ?? $_POST['usuario'] ?? 'ninguno';
?>
]]>
   </programlisting>
  </informalexample>

  <!-- TODO: we don't need further details here, but this still has to be
       added to the operator precedence table -->
 </sect2>

 <sect2 xml:id="migration70.new-features.spaceship-op">
  <title>El operador nave espacial</title>
  <para>
   El operador nave espacial se utiliza para comparar dos expresiones.
   Devuelve -1, 0 o 1 cuando <varname>$a</varname> es respectivamente menor,
   igual o mayor que <varname>$b</varname>. Las comparaciones se realizan
   según
   <link linkend="types.comparisons">las reglas de comparación de tipos</link>
   habituales de PHP.
  </para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
// Enteros
echo 1 <=> 1; // 0
echo 1 <=> 2; // -1
echo 2 <=> 1; // 1

// Números de coma flotante
echo 1.5 <=> 1.5; // 0
echo 1.5 <=> 2.5; // -1
echo 2.5 <=> 1.5; // 1

// Strings
echo "a" <=> "a"; // 0
echo "a" <=> "b"; // -1
echo "b" <=> "a"; // 1
?>
]]>
   </programlisting>
  </informalexample>

  <!-- TODO: we don't need further details here, but this still has to be
       added to the operator precedence table -->
 </sect2>

 <sect2 xml:id="migration70.new-features.define-array">
  <title>Arrays constantes con <function>define</function></title>

  <para>
   Los arrays (<type>Array</type>) constantes ahora pueden ser definidos
   con la función <function>define</function>. En PHP 5.6, solo podían
   ser definidos con &const;.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
define('ANIMALES', [
    'perro',
    'gato',
    'pájaro'
]);

echo ANIMALES[1]; // muestra "gato"
?>
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration70.new-features.anonymous-classes">
  <title>Clases anónimas</title>

  <para>
   Se ha añadido soporte para clases anónimas a través de la instanciación
   <literal>new class</literal>. Esto puede ser utilizado en lugar de definir
   toda una clase para objetos desechables:
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
interface Logger {
    public function log(string $msg);
}

class Application {
    private $logger;

    public function getLogger(): Logger {
         return $this->logger;
    }

    public function setLogger(Logger $logger) {
         $this->logger = $logger;
    }
}

$app = new Application;
$app->setLogger(new class implements Logger {
    public function log(string $msg) {
        echo $msg;
    }
});

var_dump($app->getLogger());
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
object(class@anonymous)#2 (0) {
}
]]>
   </screen>
  </informalexample>

  <para>
   La documentación completa puede encontrarse en
   <link linkend="language.oop5.anonymous">la referencia de clases anónimas</link>.
  </para>
 </sect2>

 <sect2 xml:id="migration70.new-features.unicode-codepoint-escape-syntax">
  <title>Sintaxis de escape de punto de código Unicode</title>

  <para>
   Toma un punto de código Unicode en forma hexadecimal, en una cadena
   entre comillas dobles o una sintaxis heredoc, para convertirlo
   en UTF-8. Cualquier punto de código válido es aceptado,
   siendo opcionales los ceros iniciales.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

echo "\u{aa}", PHP_EOL;
echo "\u{0000aa}", PHP_EOL;

echo "\u{9999}", PHP_EOL;

echo <<<EOT
\u{01f418}
EOT;

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
ª
ª (misma visualización que la línea anterior pero con ceros iniciales)
香
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration70.new-features.closure-call-method">
  <title><methodname>Closure::call</methodname></title>

  <para>
   El método <methodname>Closure::call</methodname> se ha vuelto más eficiente.
   Una forma más corta de enlazar temporalmente una clausura al ámbito de un
   objeto e invocarla.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
class A {private $x = 1;}

// Código antes de PHP 7
$getX = function() {return $this->x;};
$getXCB = $getX->bindTo(new A, 'A'); // clausura intermedia
echo $getXCB();

// Código PHP 7+
$getX = function() {return $this->x;};
echo $getX->call(new A);
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
1
1
]]>
   </screen>
  </informalexample>
 </sect2>
 <sect2 xml:id="migration70.new-features.filtered-unserialize">
  <title><function>unserialize</function> filtrado</title>

  <para>
   Esta funcionalidad tiene como objetivo garantizar una mayor seguridad cuando
   se realiza la deserialización de objetos con datos no confiables.
   Evita posibles inyecciones de código permitiendo al desarrollador
   crear una lista blanca de las clases que pueden ser deserializadas.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

// Convierte todos los objetos en un objeto __PHP_Incomplete_Class
$data = unserialize($foo, ["allowed_classes" => false]);

// Convierte todos los objetos en un objeto __PHP_Incomplete_Class
// excepto aquellos de MyClass y MyClass2
$data = unserialize($foo, ["allowed_classes" => ["MyClass", "MyClass2"]]);

// Comportamiento por defecto (el mismo que cuando se omite el segundo argumento)
// que acepta todas las clases
$data = unserialize($foo, ["allowed_classes" => true]);
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration70.new-features.intlchar">
  <title><classname>IntlChar</classname></title>

  <para>
   La nueva clase <classname>IntlChar</classname> expone
   la funcionalidad ICU adicional. La clase en sí define un número de métodos
   estáticos y constantes que pueden ser utilizados para manipular los
   caracteres Unicode.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

printf('%x', IntlChar::CODEPOINT_MAX);
echo IntlChar::charName('@');
var_dump(IntlChar::ispunct('!'));
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
10ffff
COMMERCIAL AT
bool(true)
]]>
   </screen>
  </informalexample>

  <para>
   Para usar esta clase, debe instalar la extensión
   <link linkend="book.intl">Intl</link>.
  </para>
 </sect2>

 <sect2 xml:id="migration70.new-features.expectations">
  <title>Expectativas</title>

  <para>
   Las expectativas son
   una mejora retrocompatible a la antigua función
   <function>assert</function>. Ofrecen aserciones de muy bajo costo en el código de producción y permiten lanzar excepciones
   personalizadas cuando la aserción falla.
  </para>

  <para>
   Aunque la antigua API sigue siendo mantenida por razones de
   compatibilidad, la función <function>assert</function> ahora es
   una construcción del lenguaje, permitiendo que el primer parámetro sea
   una expresión en lugar de un <type>string</type> a evaluar o un
   <type>bool</type> a probar.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
ini_set('assert.exception', 1);

class CustomError extends AssertionError {}

assert(false, new CustomError('Un mensaje de error'));
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Fatal error: Uncaught CustomError: Un mensaje de error
]]>
   </screen>
  </informalexample>

  <para>
   Se pueden encontrar más detalles sobre esta funcionalidad, incluyendo cómo configurarla
   en entornos de desarrollo y producción, en la sección de expectativas
   en la referencia de la función <function>assert</function>.
  </para>
 </sect2>

 <sect2 xml:id="migration70.new-features.group-use-declarations">
  <title>Agrupar las declaraciones <literal>use</literal></title>

  <para>
   Las clases, funciones y constantes importadas desde el mismo &namespace;
   ahora pueden ser agrupadas en una sola instrucción &use.namespace;.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
// Código antes de PHP 7
use some\namespace\ClassA;
use some\namespace\ClassB;
use some\namespace\ClassC as C;

use function some\namespace\fn_a;
use function some\namespace\fn_b;
use function some\namespace\fn_c;

use const some\namespace\ConstA;
use const some\namespace\ConstB;
use const some\namespace\ConstC;

// Código PHP 7+
use some\namespace\{ClassA, ClassB, ClassC as C};
use function some\namespace\{fn_a, fn_b, fn_c};
use const some\namespace\{ConstA, ConstB, ConstC};
?>
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration70.new-features.generator-return-expressions">
  <title>Expresiones de retorno de generador</title>

  <para>
   Esta funcionalidad se basa en la funcionalidad de generador introducida en PHP 5.5.
   Permite usar una instrucción <literal>return</literal> en un generador
   para devolver una expresión final (el retorno por referencia no está permitido).
   Este valor puede ser extraído usando el nuevo método
   <literal>Generator::getReturn()</literal>, que solo puede ser usado cuando
   el generador ha terminado de producir valores.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

$gen = (function() {
    yield 1;
    yield 2;

    return 3;
})();

foreach ($gen as $val) {
    echo $val, PHP_EOL;
}

echo $gen->getReturn(), PHP_EOL;
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
1
2
3
]]>
   </screen>
  </informalexample>

  <para>
   Es muy práctico poder devolver explícitamente un valor final
   de un generador. Esto permite que un valor final, susceptible de ser manejado
   especialmente por el código cliente que ejecuta el generador, sea devuelto por el generador
   (posiblemente a partir de alguna forma de cálculo de corrutina). Esto es mucho más simple
   que forzar al código cliente a verificar primero si el valor final ha sido producido,
   y luego manejar específicamente el valor cuando sea el caso.
  </para>
 </sect2>
 <sect2 xml:id="migration70.new-features.generator-delegation">
  <title>Delegación de generador</title>

  <para>
   Los generadores ahora pueden ser delegados automáticamente a otro generador,
   un objeto <classname>Traversable</classname> o un <type>array</type>,
   usando &yield.from;, sin necesidad de recurrir a un código repetitivo.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
function gen()
{
    yield 1;
    yield 2;
    yield from gen2();
}

function gen2()
{
    yield 3;
    yield 4;
}

foreach (gen() as $val)
{
    echo $val, PHP_EOL;
}
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
1
2
3
4
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration70.new-features.intdiv">
  <title>División de enteros con <function>intdiv</function></title>

  <para>
   La nueva función <function>intdiv</function> devuelve el resultado de la división
   de enteros realizada sobre sus operandos.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
var_dump(intdiv(10, 3));
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
int(3)
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration70.new-features.session-options">
  <title>Opciones de sesión</title>

  <para>
   La función <function>session_start</function> ahora acepta un <type>array</type>
   de opciones que anulan
   <link linkend="session.configuration">las directivas de configuración de sesión</link>
   configuradas manualmente en el archivo php.ini.
  </para>

  <para>
   Estas opciones también han extendido el soporte para la opción
   <link linkend="ini.session.lazy-write">session.lazy_write</link>,
   que está habilitada por defecto y hace que PHP sobrescriba los archivos de sesión
   solo si los datos de sesión han sido actualizados, y la opción
   <literal>read_and_close</literal>, que solo puede ser pasada a la función
   <function>session_start</function> para indicar si los datos de sesión
   deben ser leídos antes de que la sesión se cierre sin cambios.
  </para>

  <para>
   Por ejemplo, para establecer <link linkend="ini.session.cache-limiter">session.cache_limiter</link>
   a <literal>private</literal> y cerrar inmediatamente la sesión después de leerla:
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
session_start([
    'cache_limiter' => 'private',
    'read_and_close' => true,
]);
?>
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration70.new-features.preg-replace-callback-array-function">
  <title><function>preg_replace_callback_array</function></title>

  <para>
   La nueva función <function>preg_replace_callback_array</function>
   permite que el código se escriba de manera más limpia usando la función
   <function>preg_replace_callback</function>. Antes de PHP 7, las funciones de devolución de llamada (callback)
   debían ser ejecutadas por expresión regular, lo que requería que la función de devolución de llamada
   estuviera salpicada con muchas ramificaciones.
  </para>

  <para>
   Ahora, las funciones de devolución de llamada pueden ser registradas para cada expresión
   regular usando un array asociativo, donde la clave es una expresión regular
   que tiene la función de devolución de llamada como valor.
  </para>
 </sect2>

 <sect2 xml:id="migration70.new-features.csprng-functions">
  <title>Funciones CSPRNG</title>

  <para>
   Se han añadido dos nuevas funciones para generar criptográficamente enteros
   y strings seguras de manera multiplataforma:
   <function>random_bytes</function> y <function>random_int</function>.
  </para>
 </sect2>

 <sect2 xml:id="migration70.new-features.list-arrayaccess">
  <title>
   La función <function>list</function> ahora puede desempaquetar objetos que implementan
   <classname>ArrayAccess</classname>
  </title>

  <para>
   Anteriormente, la función <function>list</function> no podía operar al 100% sobre objetos
   que implementaban <classname>ArrayAccess</classname>. Ahora, esto ha sido corregido.
  </para>
 </sect2>

 <sect2 xml:id="migration70.new-features.others">
  <title>Otras funcionalidades</title>
  <itemizedlist>
   <listitem>
    <simpara>
     Se ha añadido acceso a los miembros de la clase (atributos y métodos) durante la clonación.
     Ejemplo, <literal>(clone $foo)-&gt;bar()</literal>.
    </simpara>
   </listitem>
  </itemizedlist>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
