<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 19e8122137a1d42ed60f17fe2c0c2b69b0b2d16b Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="migration71.incompatible">
 <title>Modificaciones que causan incompatibilidad ascendente</title>

 <sect2 xml:id="migration71.incompatible.too-few-arguments-exception">
  <title>Excepción al pasar muy pocos argumentos de función</title>

  <para>
   Anteriormente, se emitía una advertencia al invocar funciones definidas por el usuario con muy pocos argumentos. Ahora, esta advertencia se ha promovido a una excepción de error. Esta modificación se aplica únicamente a las funciones definidas por el usuario, y no a las funciones internas. Por ejemplo:
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
function test($param){}
test();
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
Fatal error: Uncaught ArgumentCountError: Too few arguments to function test(), 0 passed in %s on line %d and exactly 1 expected in %s:%d
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.incompatible.forbid-dynamic-calls-to-scope-introspection-functions">
  <title>Prohibir las llamadas dinámicas a las funciones de introspección de ámbito</title>

  <para>
   Se han prohibido las llamadas dinámicas para ciertas funciones (en forma de <literal>$func()</literal> o <literal>array_map('extract', ...)</literal>, etc.). Estas funciones inspeccionan o modifican otro ámbito, y presentan un comportamiento ambiguo y no fiable. Las funciones son las siguientes:
  </para>

  <itemizedlist>
   <listitem>
    <simpara>
     <function>assert</function> - con una cadena como primer argumento
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>compact</function>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>extract</function>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>func_get_args</function>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>func_get_arg</function>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>func_num_args</function>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>get_defined_vars</function>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>mb_parse_str</function> - con un argumento
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <function>parse_str</function> - con un argumento
    </simpara>
   </listitem>
  </itemizedlist>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
(function () {
    $func = 'func_num_args';
    $func();
})();
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Warning: Cannot call func_num_args() dynamically in %s on line %d
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.incompatible.invalid-class-names">
  <title>Nombre de clase, interfaz y trait inválido</title>

  <para>
   Los siguientes nombres no pueden ser utilizados para nombrar clases, interfaces o traits:
  </para>

  <itemizedlist>
   <listitem>
    <simpara><type>void</type></simpara>
   </listitem>
   <listitem>
    <simpara><type>iterable</type></simpara>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration71.incompatible.numerical-strings-scientific-notation">
  <title>Las conversiones de cadenas numéricas ahora respetan la notación científica</title>

  <para>
   Las operaciones enteras y las conversiones sobre cadenas numéricas ahora respetan la notación científica. Esto incluye también la operación de cast <literal>(int)</literal> y las siguientes funciones: <function>intval</function> (donde la base es 10), <function>settype</function>, <function>decbin</function>, <function>decoct</function> y <function>dechex</function>.
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.fixes-to-mt_rand-algorithm">
  <title>Correcciones al algoritmo <function>mt_rand</function></title>

  <para>
   <function>mt_rand</function> ahora utiliza por defecto la versión corregida del algoritmo Mersenne Twister. Si la salida determinista de <function>mt_srand</function> ha sido invocada, entonces <constant>MT_RAND_PHP</constant> puede ser utilizado como segundo parámetro opcional de <function>mt_srand</function> para preservar la antigua (y incorrecta) implementación.
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.rand-srand-aliases">
  <title>
   <function>rand</function> alias de <function>mt_rand</function> y <function>srand</function> alias de <function>mt_srand</function>
  </title>

  <para>
   <function>rand</function> y <function>srand</function> son ahora alias de <function>mt_rand</function> y <function>mt_srand</function>, respectivamente. Esto significa que la salida para las siguientes funciones ha sido modificada: <function>rand</function>, <function>shuffle</function>, <function>str_shuffle</function> y <function>array_rand</function>.
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.delete-control-character-in-identifiers">
  <title>Prohibir el carácter de control de eliminación ASCII en los identificadores</title>

  <para>
   El carácter de control de eliminación ASCII (<literal>0X7f</literal>) no puede ser utilizado en los identificadores que no están entre comillas.
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.error_log-syslog">
  <title>
   <parameter>error_log</parameter> cambio para el valor <literal>syslog</literal>
  </title>

  <para>
   Si el parámetro INI <parameter>error_log</parameter> está definido en <literal>syslog</literal>, los niveles de error PHP se mapean a los niveles de error syslog. Esto aporta una diferenciación más fina en los registros de errores en comparación con el enfoque anterior donde todos los errores se registraban con el nivel de aviso únicamente.
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.dont-call-destructors">
  <title>No llamar a los destructores en objetos incompletos</title>

  <para>
   Los destructores ya no se llaman para los objetos que lanzan una excepción durante la ejecución de su constructor. En versiones anteriores, este comportamiento dependía de si el objeto era referenciado fuera del constructor (por ejemplo, por una traza de excepción).
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.call_user_func-with-ref-args">
  <title>
   <function>call_user_func</function> manejo de argumentos de referencia
  </title>

  <para>
   <function>call_user_func</function> ahora siempre generará una advertencia en las llamadas a funciones que esperan referencias como argumentos. Anteriormente, esto dependía de si la llamada estaba completamente calificada.
  </para>
  <para>
   Además, <function>call_user_func</function> y <function>call_user_func_array</function> ya no abandonarán la llamada de función en este caso. La advertencia "referencia esperada" será emitida, pero la llamada continuará como de costumbre.
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.empty-string-index-operator">
  <title>
   El operador de índice vacío ya no es soportado para las cadenas
  </title>

  <para>
   La aplicación del operador de índice vacío a una cadena (por ejemplo, <literal>$str[] = $x</literal>) lanza un error fatal en lugar de convertirla silenciosamente en un array.
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.empty-string-modifcation-by-character">
  <title>Asignación vía acceso de índice de cadena en una cadena vacía</title>
  <para>
   La modificación de cadena por carácter en una cadena vacía ahora funciona como para las cadenas no vacías, es decir, escribiendo en un desplazamiento fuera de rango de la cadena con espacios, donde los tipos no enteros se convierten en enteros, y solo el primer carácter de la cadena asignada se utiliza. Anteriormente, las cadenas vacías se trataban silenciosamente como un array vacío.
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$a = '';
$a[10] = 'foo';
var_dump($a);
?>
]]>
    </programlisting>
    &example.outputs.70;
    <screen>
<![CDATA[
array(1) {
  [10]=>
  string(3) "foo"
}
]]>
    </screen>
    &example.outputs.71;
    <screen>
<![CDATA[
string(11) "          f"
]]>
    </screen>
   </informalexample>
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.removed-ini-directives">
  <title>Directivas ini eliminadas</title>

  <para>
   Las siguientes directivas ini han sido eliminadas:
  </para>

  <itemizedlist>
   <listitem>
    <simpara>
     <parameter>session.entropy_file</parameter>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <parameter>session.entropy_length</parameter>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <parameter>session.hash_function</parameter>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <parameter>session.hash_bits_per_character</parameter>
    </simpara>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration71.incompatible.array-order">
  <title>
   El ordenamiento de los elementos de un array ha cambiado cuando se crean automáticamente durante las asignaciones por referencia
  </title>

  <para>
   El orden de los elementos en un array ha cambiado cuando estos elementos han sido creados automáticamente al referenciarlos en una asignación por referencia. Por ejemplo:
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$array = [];
$array["a"] =& $array["b"];
$array["b"] = 1;
var_dump($array);
?>
]]>
   </programlisting>
   &example.outputs.70;
   <screen>
<![CDATA[
array(2) {
  ["a"]=>
  &int(1)
  ["b"]=>
  &int(1)
}
]]>
   </screen>
   &example.outputs.71;
   <screen>
<![CDATA[
array(2) {
  ["b"]=>
  &int(1)
  ["a"]=>
  &int(1)
}
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.incompatible.sort-order">
  <title>Orden de clasificación de elementos iguales</title>
  <para>
   El algoritmo de clasificación interno ha sido mejorado, lo que puede resultar en un orden de clasificación diferente de los elementos que se comparaban como iguales anteriormente.
  </para>
  <note>
   <para>
    No se debe confiar en el orden de los elementos que se comparan como iguales; podría cambiar en cualquier momento.
   </para>
  </note>
 </sect2>

 <sect2 xml:id="migration71.incompatible.e-recoverable">
  <title>Mensaje de error para los errores E_RECOVERABLE</title>
  <para>
   El mensaje de error para los errores E_RECOVERABLE ha sido cambiado de "Catchable fatal error" a "Recoverable fatal error".
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.unserialize">
  <title>Parámetro $options de unserialize()</title>
  <para>
   El elemento <literal>allowed_classes</literal> del parámetro $options de <function>unserialize</function> ahora es estrictamente tipado, es decir, si se da un valor distinto de un array o un boolean, unserialize() devuelve false y emite un <constant>E_WARNING</constant>.
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.datetime-microseconds">
  <title>El constructor de DateTime incorpora microsegundos</title>
  <para>
   <classname>DateTime</classname> y <classname>DateTimeImmutable</classname> ahora incorporan correctamente los microsegundos cuando se construyen a partir de la hora actual, ya sea explícitamente o con una cadena relativa (por ejemplo, <literal>"first day of next month"</literal>). Esto significa que las comparaciones ingenuas de dos instancias recién creadas ahora serán más propensas a devolver false en lugar de true:
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
new DateTime() == new DateTime();
?>
]]>
    </programlisting>
   </informalexample>
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.fatal-errors-to-error-exceptions">
  <title>Conversiones de errores fatales en excepciones <classname>Error</classname></title>
  <para>
   En la extensión date, los datos de serialización inválidos para las clases <classname>DateTime</classname> o <classname>DatePeriod</classname>, o el fallo de la inicialización de la zona horaria a partir de datos serializados, ahora lanzarán una excepción <classname>Error</classname> a partir del método <methodname>__wakeup</methodname> o <methodname>__set_state</methodname>, en lugar de traducirse en un error fatal.
  </para>

  <para>
   En la extensión DBA, las funciones de modificación de datos (como <function>dba_insert</function>) ahora lanzarán una excepción <classname>Error</classname> en lugar de desencadenar un error fatal capturable si la clave no contiene exactamente dos elementos.
  </para>

  <para>
   En la extensión DOM, los contextos de validación de esquema o RelaxNG no válidos ahora lanzarán una excepción <classname>Error</classname> en lugar de resultar en un error fatal. Asimismo, el intento de registrar una clase de nodo que no extiende la clase base apropiada, o intenta leer una propiedad no válida o escribir en una propiedad de solo lectura, también lanzará una excepción <classname>Error</classname>.
  </para>

  <para>
   En la extensión IMAP, las direcciones de correo electrónico más largas que 16385 bytes lanzarán una excepción <classname>Error</classname> en lugar de traducirse en un error fatal.
  </para>

  <para>
   En la extensión Intl, no llamar al constructor padre en una clase que extiende <classname>Collator</classname> antes de llamar a los métodos padres ahora lanzará una <classname>Error</classname> en lugar de resultar en un error fatal recuperable. Además, la clonación de un objeto <classname>Transliterator</classname> ahora lanza una excepción <classname>Error</classname> en caso de fallo de la clonación del Transliterator interno en lugar de un error fatal.
  </para>

  <para>
   En la extensión LDAP, proporcionar un tipo de modificación desconocido a <function>ldap_batch_modify</function> ahora lanzará una excepción <classname>Error</classname> en lugar de un error fatal.
  </para>

  <para>
   En la extensión mbstring, las funciones <function>mb_ereg</function> y <function>mb_eregi</function> ahora lanzarán una excepción <classname>ParseError</classname> si se proporciona una expresión PHP no válida y se utiliza la opción 'e'.
  </para>

  <para>
   En la extensión mcrypt, <function>mcrypt_encrypt</function> y <function>mcrypt_decrypt</function> ahora lanzarán una excepción <classname>Error</classname> en lugar de un error fatal si mcrypt no puede ser inicializada.
  </para>

  <para>
   En la extensión mysqli, el intento de leer una propiedad no válida o de escribir en una propiedad de solo lectura ahora lanza una excepción <classname>Error</classname> en lugar de traducirse en un error fatal.
  </para>

  <para>
   En la extensión Reflection, no recuperar un objeto de reflexión o recuperar una propiedad de objeto ahora lanza una excepción <classname>Error</classname> en lugar de traducirse en un error fatal.
  </para>

  <para>
   En la extensión de sesión, los gestores de sesión personalizados que no devuelvan cadenas para los ID de sesión ahora lanzarán una excepción <classname>Error</classname> en lugar de provocar un error fatal cuando se llama a una función para generar un ID de sesión.
  </para>

  <para>
   En la extensión SimpleXML, la creación de un atributo sin nombre o duplicado ahora lanzará una excepción <classname>Error</classname> en lugar de generar un error fatal.
  </para>

  <para>
   En la extensión SPL, un intento de clonar un objeto <classname>SplDirectory</classname> ahora lanzará una excepción <classname>Error</classname> en lugar de generar un error fatal. Asimismo, llamar a <methodname>ArrayIterator::append</methodname> durante la iteración sobre un objeto también lanzará una excepción <classname>Error</classname>.
  </para>

  <para>
   En la extensión estándar, la función <function>assert</function>, cuando se proporciona con un argumento de cadena como primer parámetro, ahora lanzará una excepción <classname>ParseError</classname> en lugar de un error fatal capturable si el código PHP no es válido. Asimismo, la llamada a <function>forward_static_call</function> fuera de un ámbito de clase ahora lanza una excepción <classname>Error</classname>.
  </para>

  <para>
   En la extensión Tidy, la creación manual de un <classname>tidyNode</classname> lanzará una excepción <classname>Error</classname> en lugar de un error fatal.
  </para>

  <para>
   En la extensión WDDX, una referencia circular durante la serialización ahora lanzará una excepción <classname>Error</classname> en lugar de un error fatal.
  </para>

  <para>
   En la extensión XML-RPC, una referencia circular durante la serialización ahora lanzará una instancia de excepción <classname>Error</classname> en lugar de traducirse en un error fatal.
  </para>

  <para>
   En la extensión Zip, el método <methodname>ZipArchive::addGlob</methodname> ahora lanzará una excepción <classname>Error</classname> en lugar de traducirse en un error fatal si el soporte de glob no está disponible.
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.lexical-names">
  <title>Las variables ligadas léxicamente no pueden reutilizar los nombres</title>

  <para>
   Las variables ligadas a una <link linkend="functions.anonymous">función anónima</link> vía la construcción <literal>use</literal> no pueden utilizar el mismo nombre que cualquier &link.superglobals;, <varname>$this</varname> o cualquier parámetro. Por ejemplo, todas estas definiciones de función resultarán en un error fatal:

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
$f = function () use ($_SERVER) {};
$f = function () use ($this) {};
$f = function ($param) use ($param) {};
]]>
    </programlisting>
   </informalexample>
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.long2ip">
  <title>Cambio de tipo de parámetro de long2ip()</title>
  <para>
   <function>long2ip</function> ahora espera un <type>int</type> en lugar de <type>string</type>.
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.json">
  <title>Codificación y decodificación JSON</title>
  <para>
   El parámetro INI <parameter>serialize_precision</parameter> ahora controla la precisión de serialización al codificar los <type>float</type>s.
  </para>
  <para>
   La decodificación de una clave vacía ahora resulta en un nombre de propiedad vacío, en lugar de <literal>_empty_</literal> como nombre de propiedad.

   <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
var_dump(json_decode(json_encode(['' => 1])));
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
object(stdClass)#1 (1) {
  [""]=>
  int(1)
}
]]>
   </screen>
  </informalexample>
  </para>
  <para>
   Cuando se proporciona el indicador <constant>JSON_UNESCAPED_UNICODE</constant> a <function>json_encode</function>, las secuencias U+2028 y U+2029 ahora se escapan.
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.mbstring">
  <title>
   Modificaciones de la semántica de los parámetros de <function>mb_ereg</function> y <function>mb_eregi</function>
  </title>
  <para>
   El tercer parámetro de las funciones <function>mb_ereg</function> y <function>mb_eregi</function> (<parameter>regs</parameter>) ahora se establece en un array vacío si no se ha hecho ninguna coincidencia. Anteriormente, el parámetro no habría sido modificado.
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.openssl">
  <title>Abandono de los flujos sslv2</title>
  <para>
   El flujo SSLv2 ha sido abandonado en OpenSSL.
  </para>
 </sect2>

 <sect2 xml:id="migration71.incompatible.typed-returns-compile-time">
  <title>Prohibido "return;" para los retornos tipados en tiempo de compilación</title>
  <para>
   Una declaración de retorno sin argumentos en las funciones que declaran un tipo de retorno ahora emite <constant>E_COMPILE_ERROR</constant> (excepto si el tipo de retorno se declara como <type>void</type>), incluso si la declaración de retorno nunca sería alcanzada.
  </para>
 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
