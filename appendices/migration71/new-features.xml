<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: d987f5fea44af3e2b2740bebc9700903cdfcf1f6 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes Maintainer: PhilDaiguille -->

<sect1 xml:id="migration71.new-features" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Nuevas funcionalidades</title>

 <sect2 xml:id="migration71.new-features.nullable-types">
  <title>Tipo nullable</title>

  <para>
   La declaración de los tipos de parámetro y de valor de retorno puede ahora
   ser marcada como nullable prefijando el nombre del tipo con un signo de interrogación.
   Esto significa que el tipo especificado así como &null; pueden ser pasados como argumento,
   o devueltos como valor, respectivamente.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

function testReturnA(): ?string
{
    return 'elePHPant';
}

var_dump(testReturnA());

function testReturnB(): ?string
{
    return null;
}

var_dump(testReturnB());

function test(?string $name)
{
    var_dump($name);
}

test('elePHPant');
test(null);
test();
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
string(9) "elePHPant"
NULL
string(9) "elePHPant"
NULL
Fatal error: Uncaught ArgumentCountError: Too few arguments to function test(), 0 passed in...
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.void-functions">
  <title>Funciones Void</title>

  <para>
   Se ha introducido el tipo de retorno <type>void</type>. Las funciones declaradas
   con un tipo de retorno void deben omitir la declaración de retorno
   completamente, o utilizar una declaración de retorno vacía.
   &null; no es un tipo de retorno válido para una función void.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
function swap(&$left, &$right): void
{
    if ($left === $right) {
        return;
    }

    $tmp = $left;
    $left = $right;
    $right = $tmp;
}

$a = 1;
$b = 2;
var_dump(swap($a, $b), $a, $b);
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
null
int(2)
int(1)
]]>
   </screen>
  </informalexample>

  <para>
   Intentar utilizar el valor de retorno de una función void simplemente evalúa
   a &null;, sin advertencia emitida. La razón para esto es que una advertencia
   implicaría el uso de una función genérica de orden superior.
  </para>
 </sect2>

 <sect2 xml:id="migration71.new-features.symmetric-array-destructuring">
  <title>Descomposición simétrica de array</title>

  <para>
   La abreviatura de la sintaxis array <literal>[]</literal> puede ahora
   ser utilizada para descomponer &array;x para asignaciones
   (incluyendo dentro de <literal>foreach</literal>), en lugar de la
   sintaxis existente <function>list</function>, que sigue siendo soportada.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$data = [
    [1, 'Tom'],
    [2, 'Fred'],
];

// list() style
list($id1, $name1) = $data[0];

// [] style
[$id1, $name1] = $data[0];

// list() style
foreach ($data as list($id, $name)) {
    // lógica aquí con $id y $name
}

// [] style
foreach ($data as [$id, $name]) {
    // lógica aquí con $id y $name
}
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.class-constant-visibility">
  <title>Visibilidad de las constantes de clase</title>

  <para>
   Se ha añadido soporte para especificar la visibilidad de las constantes de clase.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
class ConstDemo
{
    const PUBLIC_CONST_A = 1;
    public const PUBLIC_CONST_B = 2;
    protected const PROTECTED_CONST = 3;
    private const PRIVATE_CONST = 4;
}
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.iterable-pseudo-type">
  <title>El pseudo-tipo <type>iterable</type></title>

  <para>
   Se ha introducido un nuevo pseudo-tipo (similar a <type>callable</type>) llamado
   <type>iterable</type>. Puede ser utilizado con los
   parámetros y retornos tipados, donde acepta &array; o
   objetos que implementan la interfaz <classname>Traversable</classname>.
   En cuanto a la subtipificación, los tipos de parámetros de las clases hijas pueden ampliar una declaración de un padre de <type>array</type>
   o <classname>Traversable</classname> en <type>iterable</type>.
   Con los tipos de retorno, las clases hijas pueden restringir el tipo de
   retorno <type>iterable</type> del padre en <type>array</type> o
   un objeto que implemente <classname>Traversable</classname>.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
function iterator(iterable $iter)
{
    foreach ($iter as $val) {
        //
    }
}
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.mulit-catch-exception-handling">
  <title>Gestión del catch de múltiples excepciones</title>

  <para>
   Ahora pueden especificarse múltiples excepciones por bloque catch utilizando el carácter barra vertical (<literal>|</literal>).
   Esto es útil cuando diferentes excepciones se manejan de la misma manera.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
try {
    // código
} catch (FirstException | SecondException $e) {
    // maneja las excepciones first y second
}
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.support-for-keys-in-list">
  <title>Soporte de claves en <function>list</function></title>

  <para>
   Ahora es posible especificar claves en <function>list</function>,
   o su nueva sintaxis abreviada <literal>[]</literal>. Esto permite la
   descomposición de arrays que tienen claves no enteras o no secuenciales.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$data = [
    ["id" => 1, "name" => 'Tom'],
    ["id" => 2, "name" => 'Fred'],
];

// list() style
list("id" => $id1, "name" => $name1) = $data[0];

// [] style
["id" => $id1, "name" => $name1] = $data[0];

// list() style
foreach ($data as list("id" => $id, "name" => $name)) {
    // lógica aquí con $id y $name
}

// [] style
foreach ($data as ["id" => $id, "name" => $name]) {
    // lógica aquí con $id y $name
}
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.support-for-negative-string-offsets">
  <title>Soporte para las posiciones negativas de &string;</title>

  <para>
   Se ha añadido soporte para las posiciones negativas de &string; a las
   <link linkend="book.strings">funciones de manipulación de &string;</link>
   que aceptan una posición, así como a
   <link linkend="language.types.string.substr">la indexación de &string;</link>
   con <literal>[]</literal> o <literal>{}</literal>. En tales casos, una
   posición negativa se interpreta como una posición partiendo del final
   de la &string;.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
var_dump("abcdef"[-2]);
var_dump(strpos("aabbcc", "b", -3));
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
string (1) "e"
int(3)
]]>
   </screen>
  </informalexample>

  <para>
   Las posiciones negativas de &string; y &array;x también son soportadas
   con la sintaxis simple de análisis en &string;.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$string = 'bar';
echo "El último carácter de '$string' es '$string[-1]'.\n";
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
El último carácter de 'bar' es 'r'.
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.support-for-aead-in-ext-openssl">
  <title>Soporte para AEAD en ext/openssl</title>

  <para>
   Se ha añadido soporte para AEAD (modos GCM y CCM) ampliando las funciones
   <function>openssl_encrypt</function> y
   <function>openssl_decrypt</function> con parámetros adicionales.
  </para>
 </sect2>

 <sect2 xml:id="migration71.new-features.convert-callables-to-closures">
  <title>Convertir callables en <classname>Closure</classname>s con <methodname>Closure::fromCallable</methodname></title>

  <para>
   Se ha introducido un nuevo método estático en la clase
   <classname>Closure</classname> para permitir que los <type>callable</type>s
   sean fácilmente convertidos en objetos <classname>Closure</classname>.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
class Test
{
    public function exposeFunction()
    {
        return Closure::fromCallable([$this, 'privateFunction']);
    }

    private function privateFunction($param)
    {
        var_dump($param);
    }
}

$privFunc = (new Test)->exposeFunction();
$privFunc('some value');
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
string(10) "some value"
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.asynchronous-signal-handling">
  <title>Gestión de señales asíncronas</title>

  <para>
   Se ha introducido una nueva función llamada <function>pcntl_async_signals</function>
   para permitir la gestión de señales asíncronas sin utilizar los ticks (lo que introducía mucho sobrecosto).
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
pcntl_async_signals(true); // activar las señales asíncronas

pcntl_signal(SIGHUP,  function($sig) {
    echo "SIGHUP\n";
});

posix_kill(posix_getpid(), SIGHUP);
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
SIGHUP
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration71.new-features.http2-server-push-support-in-ext-curl">
  <title>Soporte de push del servidor HTTP/2 en ext/curl</title>

  <para>
   Se ha añadido soporte para los push del servidor a la extensión CURL (requiere
   la versión 7.46 o posterior). Esto puede ser explotado a través de la
   función <function>curl_multi_setopt</function> con la nueva
   constante <constant>CURLMOPT_PUSHFUNCTION</constant>. Las constantes
   <constant>CURL_PUSH_OK</constant> y <constant>CURL_PUSH_DENY</constant>
   también han sido añadidas para que la ejecución de la función de retrollamada del
   push del servidor pueda ser aprobada o rechazada.
  </para>
 </sect2>

 <sect2 xml:id="migration71.new-features.stream-context-options">
  <title>Opciones del contexto de flujo (Stream Context Options)</title>

  <para>
   Se ha añadido la opción del contexto de flujo <link linkend="context.socket.tcp_nodelay">tcp_nodelay</link>.
  </para>
 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
