<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: c9b1de1c1266145d5472d0c05edea2c1bf970ff0 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes Maintainer: girgias -->

<sect1 xml:id="migration56.new-features" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Nuevas funcionalidades</title>

 <sect2 xml:id="migration56.new-features.const-scalar-exprs">
  <title>Expresiones de constante</title>

  <para>
   Ahora es posible proporcionar una expresión escalar que implique
   números y literales de &string; y/o constantes en contextos donde PHP
   previamente esperaba un valor estático, como una constante o una
   declaración de propiedades y los argumentos por defecto de función.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
const UNO = 1;
const DOS = UNO * 2;

class C {
    const TRES = DOS + 1;
    const UN_TERCIO = UNO / self::TRES;
    const RESULTADO = 'El valor de TRES es '.self::TRES;

    public function f($a = UNO + self::TRES) {
        return $a;
    }
}

echo (new C)->f()."\n";
echo C::RESULTADO;
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
4
El valor de TRES es 3
]]>
   </screen>
  </informalexample>

 <para>
   También es posible definir una constante &array; usando la palabra clave <literal>const</literal>:
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
const ARR = ['a', 'b'];

echo ARR[0];
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
a
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration56.new-features.variadics">
  <title>Funciones variables vía el operador de descomposición <literal>...</literal></title>

  <para>
   Las <link linkend="functions.variable-arg-list">funciones variables</link>
   ahora pueden ser implementadas usando el operador de descomposición <literal>...</literal>,
   en lugar de usar la función <function>func_get_args</function>.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
function f($req, $opt = null, ...$params) {
    // $params es un array que contiene los argumentos restantes.
    printf('$req: %d; $opt: %d; Número de argumentos: %d'."\n",
           $req, $opt, count($params));
}

f(1);
f(1, 2);
f(1, 2, 3);
f(1, 2, 3, 4);
f(1, 2, 3, 4, 5);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
$req: 1; $opt: 0; Número de argumentos: 0
$req: 1; $opt: 2; Número de argumentos: 0
$req: 1; $opt: 2; Número de argumentos: 1
$req: 1; $opt: 2; Número de argumentos: 2
$req: 1; $opt: 2; Número de argumentos: 3
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration56.new-features.splat">
  <title>Descompresión de argumentos vía el operador de descomposición <literal>...</literal></title>

  <para>
   Los <link linkend="language.types.array">arrays</link> y los objetos
   <interfacename>Traversable</interfacename> pueden ser descomprimidos
   en la lista de argumentos al llamar a una función usando el operador de
   descomposición <literal>...</literal>. Este método es conocido como el
   operador splat en otros lenguajes como Ruby, por ejemplo.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
function add($a, $b, $c) {
    return $a + $b + $c;
}

$operators = [2, 3];
echo add(1, ...$operators);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
6
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration56.new-features.exponentiation">
  <title>Exponenciación vía el operador <literal>**</literal></title>

  <para>
   Se ha añadido un operador <literal>**</literal> asociativo a la derecha
   para soportar la exponenciación, en conjunción con el operador de
   asignación <literal>**=</literal>.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
printf("2 ** 3 ==      %d\n", 2 ** 3);
printf("2 ** 3 ** 2 == %d\n", 2 ** 3 ** 2);

$a = 2;
$a **= 3;
printf("a ==           %d\n", $a);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
2 ** 3 ==      8
2 ** 3 ** 2 == 512
a ==           8
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration56.new-features.use">
  <title><literal>use function</literal> y <literal>use const</literal></title>

  <para>
   El operador
   <link linkend="language.namespaces.importing"><literal>use</literal></link>
   ha sido extendido para soportar la importación de funciones y constantes
   además de clases. Esto se realiza usando las construcciones
   <literal>use function</literal> y <literal>use const</literal>, respectivamente.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
namespace Name\Space {
    const FOO = 42;
    function f() { echo __FUNCTION__."\n"; }
}

namespace {
    use const Name\Space\FOO;
    use function Name\Space\f;

    echo FOO."\n";
    f();
}
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
42
Name\Space\f
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration56.new-features.phpdbg">
  <title>phpdbg</title>

  <para>
   PHP ahora incluye un depurador interactivo llamado phpdbg, implementado
   como un módulo SAPI. Para más información, visite la
   <link linkend="book.phpdbg">documentación phpdbg</link>.
  </para>
 </sect2>

 <sect2 xml:id="migration56.new-features.default-encoding">
  <title>Codificación de caracteres por defecto</title>

  <para>
   <link linkend="ini.default-charset">default_charset</link> ahora se usa
   como el conjunto de caracteres por defecto para las funciones
   <function>htmlentities</function>, <function>html_entity_decode</function> y
   <function>htmlspecialchars</function>.
   Tenga en cuenta que si las configuraciones de codificación (ahora obsoletas)
   de iconv y mbstring están definidas, estas tendrán prioridad sobre la
   configuración de default_charset para las funciones iconv y mbstring,
   respectivamente.
  </para>

  <para>
   El valor por defecto para esta configuración es <literal>UTF-8</literal>.
  </para>
 </sect2>

 <sect2 xml:id="migration56.new-features.reusable-input">
  <title><link linkend="wrappers.php.input"><literal>php://input</literal></link> es reutilizable</title>

  <para>
   <link linkend="wrappers.php.input"><literal>php://input</literal></link>
   ahora puede ser reabierto y leído tantas veces como sea necesario.
   Este nuevo mecanismo también ha permitido reducir significativamente la
   cantidad de memoria requerida durante las operaciones POST.
  </para>
 </sect2>

 <sect2 xml:id="migration56.new-features.large-file">
  <title>Subida de archivos grandes</title>

  <para>
   Ahora se aceptan archivos de más de 2 Gigabytes.
  </para>
 </sect2>

 <sect2 xml:id="migration56.new-features.gmp">
  <title><link linkend="book.gmp">GMP</link> soporta la sobrecarga de operadores</title>
  <para>
   Los objetos <link linkend="book.gmp">GMP</link> ahora soportan la sobrecarga
   de operadores y el cambio de tipo a tipos escalares. Esto permite un código más
   expresivo usando GMP:
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$a = gmp_init(42);
$b = gmp_init(17);

if (version_compare(PHP_VERSION, '5.6', '<')) {
    echo gmp_intval(gmp_add($a, $b)), PHP_EOL;
    echo gmp_intval(gmp_add($a, 17)), PHP_EOL;
    echo gmp_intval(gmp_add(42, $b)), PHP_EOL;
} else {
    echo $a + $b, PHP_EOL;
    echo $a + 17, PHP_EOL;
    echo 42 + $b, PHP_EOL;
}
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
59
59
59
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration56.new-features.hash-equals">
  <title><function>hash_equals</function> para la comparación de &string; para evitar ataques de temporización</title>

  <para>
   Se ha añadido la función <function>hash_equals</function> para comparar dos
   &string; en tiempo constante. Esto debería usarse para evitar ataques de
   temporización, por ejemplo, al probar el hash de una contraseña creada
   vía la función <function>crypt</function> (suponiendo que no pueda usar las
   funciones <function>password_hash</function> y <function>password_verify</function>,
   que no son sensibles a los ataques de temporización).
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$expected  = crypt('12345', '$2a$07$usesomesillystringforsalt$');
$correct   = crypt('12345', '$2a$07$usesomesillystringforsalt$');
$incorrect = crypt('1234',  '$2a$07$usesomesillystringforsalt$');

var_dump(hash_equals($expected, $correct));
var_dump(hash_equals($expected, $incorrect));
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
bool(true)
bool(false)
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration56.new-features.debuginfo">
  <title><literal>__debugInfo()</literal></title>

  <para>
   Se ha añadido el método mágico <link linkend="language.oop5.magic.debuginfo">__debugInfo()</link>
   para permitir a los objetos cambiar las propiedades y valores que se muestran
   cuando el objeto se muestra usando la función <function>var_dump</function>.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
class C {
    private $prop;

    public function __construct($val) {
        $this->prop = $val;
    }

    public function __debugInfo() {
        return [
            'propSquared' => $this->prop ** 2,
        ];
    }
}

var_dump(new C(42));
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
object(C)#1 (1) {
  ["propSquared"]=>
  int(1764)
}
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration56.new-features.gost">
  <title>Algoritmo de hashing gost-crypto</title>

  <para>
   Se ha añadido el algoritmo de hashing <literal>gost-crypto</literal>.
   Implementa la función de hashing GOST, usando las tablas CryptoPro S-box
   como se especifica en la
   <link xlink:href="&url.rfc;4357">RFC 4357, sección 11.2</link>.
  </para>
 </sect2>

 <sect2 xml:id="migration56.new-features.openssl">
  <title>Mejoras SSL/TLS</title>

  <para>
   Se ha realizado una amplia gama de mejoras en el soporte SSL/TLS en PHP 5.6.
   Esto incluye
   <link linkend="migration56.incompatible.peer-verification">la activación de
    la verificación por pares por defecto</link>, soportando la coincidencia de
   certificados de huellas digitales, permitiendo limitar los ataques de
   renegociación TLS, así como varias nuevas
   <link linkend="context.ssl">opciones de contexto SSL</link> permitiendo
   un control más fino del protocolo y las verificaciones de configuración
   cuando se usan flujos cifrados.
  </para>

  <para>
   Estos cambios se describen en detalle en la sección sobre
   los <link linkend="migration56.openssl">cambios OpenSSL en PHP 5.6.x</link>
   de la guía de migración.
  </para>
 </sect2>

 <sect2 xml:id="migration56.new-features.postgresql">
  <title>Soporte async <link linkend="book.pgsql">pgsql</link></title>

  <para>
   La extensión <link linkend="book.pgsql">pgsql</link> ahora soporta conexiones
   y consultas asíncronas, habilitando un comportamiento no bloqueante al
   interactuar con una base de datos PostgreSQL. Las conexiones asíncronas
   pueden establecerse vía la constante <constant>PGSQL_CONNECT_ASYNC</constant>,
   y las nuevas funciones <function>pg_connect_poll</function>,
   <function>pg_socket</function>, <function>pg_consume_input</function> y
   <function>pg_flush</function> pueden ser usadas para manejar las conexiones
   y consultas asíncronas.
  </para>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
