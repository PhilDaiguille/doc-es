<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 497c40ac164d5873fd87f622dfdeb5206392b446 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes Maintainer: girgias -->
<sect1 xml:id="migration56.openssl" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Cambios para OpenSSL en PHP 5.6.x</title>

 <sect2 xml:id="migration56.openssl.peer-verification">
  <title>Los manejado res de flujo ahora verifican por defecto los certificados de par y los nombres de host al usar SSL/TLS</title>

  &migration56.openssl.peer-verification;
 </sect2>

 <sect2 xml:id="migration56.openssl.fingerprint">
  <title>Huellas digitales de certificado</title>

  <para>
   Se ha añadido soporte para extraer y verificar las huellas digitales de los
   certificados. <function>openssl_x509_fingerprint</function> se ha añadido para
   extraer una huella digital de un certificado X.509 y dos
   <link linkend="context.ssl">opciones de contexto</link> de flujo SSL han sido
   añadidas: <literal>capture_peer_cert</literal> para capturar el certificado X.509
   del par y <literal>peer_fingerprint</literal> para asegurar que el
   certificado del par debe coincidir con la huella digital dada.
  </para>
 </sect2>

 <sect2 xml:id="migration56.openssl.ciphers">
  <title>Cifrados por defecto actualizados</title>

  <para>
   Los cifrados por defecto usados por PHP han sido actualizados a una lista
   más segura basada en las
   <link xlink:href="&url.openssl.ciphers.mozilla;">recomendaciones de cifrado de Mozilla</link>,
   con dos exclusiones adicionales: cifrados Diffie-Hellman anónimos y RC4.
  </para>

  <para>
   Esta lista es accesible a través de la nueva constante
   <constant>OPENSSL_DEFAULT_STREAM_CIPHERS</constant> y puede ser reemplazada
   (como en versiones anteriores de PHP) definiendo la opción de contexto
   <link linkend="context.ssl.ciphers"><parameter>cifrados</parameter></link>.
  </para>
 </sect2>

 <sect2 xml:id="migration56.openssl.tls-compression">
  <title>Compresión desactivada por defecto</title>

  <para>
   La compresión SSL/TLS ha sido desactivada por defecto para mitigar el ataque CRIME.
   PHP 5.4.13 añadió una opción de contexto
   <link linkend="context.ssl.disable-compression"><parameter>disable_compression</parameter></link>
   para permitir que la compresión sea desactivada: ahora está establecida en
   &true; (es decir, la compresión está desactivada) por defecto.
  </para>
 </sect2>

 <sect2 xml:id="migration56.openssl.honor-cipher-order">
  <title>Permitir a los servidores preferir su orden de cifrado</title>

  <para>
   La opción de contexto SSL <parameter>honor_cipher_order</parameter> ha sido
   añadida para permitir a los servidores de flujos cifrados mitigar las
   vulnerabilidades de BEAST prefiriendo los cifrados del servidor sobre el cliente.
  </para>
 </sect2>

 <sect2 xml:id="migration56.openssl.metadata">
  <title>Acceder al protocolo negociado y al cifrado</title>

  <para>
   El protocolo y el cifrado que han sido negociados para un flujo cifrado
   ahora pueden ser accedidos a través de <function>stream_get_meta_data</function>
   o <function>stream_context_get_options</function> cuando la opción de
   contexto SSL <parameter>capture_session_meta</parameter> está establecida en &true;.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$ctx = stream_context_create(['ssl' => [
    'capture_session_meta' => TRUE
]]);

$html = file_get_contents('https://google.com/', FALSE, $ctx);
$meta = stream_context_get_options($ctx)['ssl']['session_meta'];
var_dump($meta);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
array(4) {
  ["protocol"]=>
  string(5) "TLSv1"
  ["cipher_name"]=>
  string(20) "ECDHE-RSA-AES128-SHA"
  ["cipher_bits"]=>
  int(128)
  ["cipher_version"]=>
  string(11) "TLSv1/SSLv3"
}
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration56.openssl.forward-secrecy">
  <title>Nuevas opciones para la confidencialidad persistente en servidores de flujos cifrados</title>

  <para>
   Los flujos de clientes cifrados ya soportan la confidencialidad persistente,
   ya que generalmente es controlado por el servidor. Los flujos de servidores cifrados en PHP
   usando certificados capaces de confidencialidad persistente no necesitan
   tomar medidas adicionales para habilitar PFS; sin embargo, se han añadido varias
   nuevas opciones de contexto SSL para permitir un mayor control sobre
   PFS y manejar problemas de compatibilidad que puedan surgir.
  </para>

  <variablelist>
   <varlistentry>
    <term><parameter>ecdh_curve</parameter></term>
    <listitem>
     <para>
      Esta opción permite seleccionar una curva específica para usar con
      los cifrados ECDH. Si no se especifica, se usará <literal>prime256v1</literal>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>dh_param</parameter></term>
    <listitem>
     <para>
      Ruta a un archivo que contiene parámetros para el intercambio de claves Diffie-Hellman,
      como el creado por el siguiente comando:
     </para>
     <programlisting role="shell">
<![CDATA[
openssl dhparam -out /path/to/my/certs/dh-2048.pem 2048
]]>
     </programlisting>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>single_dh_use</parameter></term>
    <listitem>
     <para>
      Si se establece en &true;, se creará un nuevo par de claves al usar los
      parámetros Diffie-Hellman, mejorando así la confidencialidad persistente.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>single_ecdh_use</parameter></term>
    <listitem>
     <para>
      Si se establece en &true;, siempre se generará un nuevo par de claves al
      negociar las suites de cifrado ECDH. Esto mejora la confidencialidad persistente.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect2>

 <sect2 xml:id="migration56.openssl.crypto-method">
  <title>Selección de la versión SSL/TLS</title>

  <para>
   Ahora es posible seleccionar versiones específicas de SSL y
   TLS a través de la opción de contexto SSL <parameter>crypto_method</parameter> o
   especificando un transporte específico al crear un manejador de flujo
   (por ejemplo, llamando a <function>stream_socket_client</function> o
   <function>stream_socket_server</function>).
  </para>

  <para>
   La opción de contexto SSL <parameter>crypto_method</parameter> acepta una máscara de bits
   enumerando los protocolos que están permitidos, como lo hace el
   <parameter>crypto_type</parameter> de <function>stream_socket_enable_crypto</function>.
   <!-- TODO: link to full list, which is too big for this page but should be
              in the crypto_method and stream_socket_enable_crypto()
              documentation. -->
  </para>

  <segmentedlist>
   <title>Versiones de protocolo seleccionadas y opciones correspondientes</title>
   <segtitle>Protocolo(s)</segtitle>
   <segtitle>Bandera cliente</segtitle>
   <segtitle>Bandera servidor</segtitle>
   <segtitle>Transporte</segtitle>
   <seglistitem>
    <seg>Cualquier versión TLS o SSL</seg>
    <seg><constant>STREAM_CRYPTO_METHOD_ANY_CLIENT</constant></seg>
    <seg><constant>STREAM_CRYPTO_METHOD_ANY_SERVER</constant></seg>
    <seg><literal>ssl://</literal></seg>
   </seglistitem>
   <seglistitem>
    <seg>Cualquier versión TLS</seg>
    <seg><constant>STREAM_CRYPTO_METHOD_TLS_CLIENT</constant></seg>
    <seg><constant>STREAM_CRYPTO_METHOD_TLS_SERVER</constant></seg>
    <seg><literal>tls://</literal></seg>
   </seglistitem>
   <seglistitem>
    <seg>TLS 1.0</seg>
    <seg><constant>STREAM_CRYPTO_METHOD_TLSv1_0_CLIENT</constant></seg>
    <seg><constant>STREAM_CRYPTO_METHOD_TLSv1_0_SERVER</constant></seg>
    <seg><literal>tlsv1.0://</literal></seg>
   </seglistitem>
   <seglistitem>
    <seg>TLS 1.1</seg>
    <seg><constant>STREAM_CRYPTO_METHOD_TLSv1_1_CLIENT</constant></seg>
    <seg><constant>STREAM_CRYPTO_METHOD_TLSv1_1_SERVER</constant></seg>
    <seg><literal>tlsv1.1://</literal></seg>
   </seglistitem>
   <seglistitem>
    <seg>TLS 1.2</seg>
    <seg><constant>STREAM_CRYPTO_METHOD_TLSv1_2_CLIENT</constant></seg>
    <seg><constant>STREAM_CRYPTO_METHOD_TLSv1_2_SERVER</constant></seg>
    <seg><literal>tlsv1.2://</literal></seg>
   </seglistitem>
   <seglistitem>
    <seg>SSL 3</seg>
    <seg><constant>STREAM_CRYPTO_METHOD_SSLv3_CLIENT</constant></seg>
    <seg><constant>STREAM_CRYPTO_METHOD_SSLv3_SERVER</constant></seg>
    <seg><literal>sslv3://</literal></seg>
   </seglistitem>
  </segmentedlist>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

// Requiriendo TLS 1.0 o mejor al usar file_get_contents():
$ctx = stream_context_create([
    'ssl' => [
        'crypto_method' => STREAM_CRYPTO_METHOD_TLS_CLIENT,
    ],
]);
$html = file_get_contents('https://google.com/', false, $ctx);

// Requiriendo TLS 1.1 o 1.2:
$ctx = stream_context_create([
    'ssl' => [
        'crypto_method' => STREAM_CRYPTO_METHOD_TLSv1_1_CLIENT |
                           STREAM_CRYPTO_METHOD_TLSv1_2_CLIENT,
    ],
]);
$html = file_get_contents('https://google.com/', false, $ctx);

// Conexión usando el transporte de socket tlsv1.2://.
$sock = stream_socket_client('tlsv1.2://google.com:443/');

?>
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration56.openssl.default-certificate-paths">
  <title>Adición de <function>openssl_get_cert_locations</function></title>

  <para>
   Se ha añadido la función <function>openssl_get_cert_locations</function>:
   devuelve las ubicaciones por defecto donde PHP buscará al buscar paquetes CA.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
var_dump(openssl_get_cert_locations());
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
array(8) {
  ["default_cert_file"]=>
  string(21) "/etc/pki/tls/cert.pem"
  ["default_cert_file_env"]=>
  string(13) "SSL_CERT_FILE"
  ["default_cert_dir"]=>
  string(18) "/etc/pki/tls/certs"
  ["default_cert_dir_env"]=>
  string(12) "SSL_CERT_DIR"
  ["default_private_dir"]=>
  string(20) "/etc/pki/tls/private"
  ["default_default_cert_area"]=>
  string(12) "/etc/pki/tls"
  ["ini_cafile"]=>
  string(0) ""
  ["ini_capath"]=>
  string(0) ""
}
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration56.openssl.spki">
  <title>Soporte SPKI</title>

  <para>
   Se ha añadido soporte para generar, extraer y verificar claves y desafíos públicos firmados (SPKAC).
   <function>openssl_spki_new</function>,
   <function>openssl_spki_verify</function>,
   <function>openssl_spki_export_challenge</function> y
   <function>openssl_spki_export</function> han sido añadidas para crear, verificar
   la clave pública <acronym>PEM</acronym> de exportación y el desafío asociado de SPKAC generados
   a partir de un elemento HTML5 <literal>KeyGen</literal>.
  </para>

  <variablelist>
   <varlistentry>
    <term><parameter>openssl_spki_new</parameter></term>
    <listitem>
     <para>
      Genera un nuevo SPKAC usando la clave privada, &string; de desafío y
      el algoritmo de hashing.
     </para>

     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
$pkey = openssl_pkey_new();
openssl_pkey_export($pkey, 'secret passphrase');

$spkac = openssl_spki_new($pkey, 'challenge string');
?>
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
SPKAC=MIIBXjCByDCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA3L0IfUijj7+A8CPC8EmhcdNoe5fUAog7OrBdhn7EkxFButUp40P7+LiYiygYG1TmoI/a5EgsLU3s9twEz3hmgY9mYIqb/rb+SF8qlD/K6KVyUORC7Wlz1Df4L8O3DuRGzx6/+3jIW6cPBpfgH1sVuYS1vDBsP/gMMIxwTsKJ4P0CAwEAARYkYjViMzYxMTktNjY5YS00ZDljLWEyYzctMGZjNGFhMjVlMmE2MA0GCSqGSIb3DQEBAwUAA4GBAF7hu0ifzmjonhAak2FhhBRsKFDzXdKIkrWxVNe8e0bZzMrWOxFM/rqBgeH3/gtOUDRS5Fnzyq425UsTYbjfiKzxGeCYCQJb1KJ2V5Ij/mIJHZr53WYEXHQTNMGR8RPm7IxwVXVSHIgAfXsXZ9IXNbFbcaLRiSTr9/N4U+MXUWL7
]]>
      </screen>
     </informalexample>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><parameter>openssl_spki_verify</parameter></term>
    <listitem>
     <para>
      Verifica el SPKAC proporcionado.
     </para>

     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
$pkey = openssl_pkey_new();
openssl_pkey_export($pkey, 'secret passphrase');

$spkac = openssl_spki_new($pkey, 'challenge string');
var_dump(openssl_spki_verify($spkac));
?>
]]>
      </programlisting>
     </informalexample>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><parameter>openssl_spki_export_challenge</parameter></term>
    <listitem>
     <para>
      Exporta el desafío asociado al SPKAC proporcionado.
     </para>

     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
$pkey = openssl_pkey_new();
openssl_pkey_export($pkey, 'secret passphrase');

$spkac = openssl_spki_new($pkey, 'challenge string');
$challenge = openssl_spki_export_challenge($spkac);
echo $challenge;
?>
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
challenge string
]]>
      </screen>
     </informalexample>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><parameter>openssl_spki_export</parameter></term>
    <listitem>
     <para>
      Exporta la clave pública RSA en formato <acronym>PEM</acronym> del SPKAC.
     </para>

     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
$pkey = openssl_pkey_new();
openssl_pkey_export($pkey, 'secret passphrase');

$spkac = openssl_spki_new($pkey, 'challenge string');
echo openssl_spki_export($spkac);
?>
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDcvQh9SKOPv4DwI8LwSaFx02h7
l9QCiDs6sF2GfsSTEUG61SnjQ/v4uJiLKBgbVOagj9rkSCwtTez23ATPeGaBj2Zg
ipv+tv5IXyqUP8ropXJQ5ELtbXPUN/gvw7cO5EbPHr/7eMhbpw8Gl+AfWxW5hLW8
MGw/+AwwjHBOwong/QIDAQAB
-----END PUBLIC KEY-----
]]>
      </screen>
     </informalexample>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
