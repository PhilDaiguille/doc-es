<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 22583751fbfdaa3eaa41aeb6470d1343f5cb2c78 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<appendix xml:id="filters" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Lista de filtros estándar</title>
 <para>
  Esta sección contiene la lista de filtros de flujo, para usar
  con <function>stream_filter_append</function>.
  Su versión de PHP puede tener filtros adicionales,
  o faltantes en comparación con esta lista.
 </para>

 <para>
  Es bueno notar una ligera diferencia entre
  <function>stream_filter_append</function>
  y <function>stream_filter_prepend</function>.
  Todos los flujos PHP disponen de un pequeño <emphasis>buffer de lectura</emphasis>,
  donde almacenan bloques de datos leídos en el sistema
  de ficheros, o en otras fuentes, para tratarlos de manera más eficiente. Tan pronto como los datos son
  leídos desde el recurso en el buffer interno, los datos
  son inmediatamente pasados al filtro, incluso si la aplicación
  PHP no está lista para leer estos datos.
  Si los datos ya están en espera en el buffer cuando un
  filtro es añadido al flujo (<emphasis>appended</emphasis>), estos datos
  serán inmediatamente pasados al filtro, para que la modificación sea
  transparente. Pero si se añade un filtro con
  <emphasis>prepended</emphasis>, los datos
  <emphasis>NO serán</emphasis> filtrados. Esperarán a que el próximo bloque llegue del recurso.
 </para>

 <para>
  Para obtener la lista completa de filtros de su versión de
  PHP, utilice la función <function>stream_get_filters</function>.
 </para>

 <section xml:id="filters.string">
  <title>Filtros de cadenas de caracteres</title>

  <simpara>
   Cada filtro hace lo que su nombre implica, y se refiere al
   comportamiento de la función PHP correspondiente. Para más detalles sobre un filtro, consulte el manual de la función
   de referencia.
  </simpara>

  <section xml:id="filters.string.rot13">
   <title>string.rot13</title>
   <simpara>
    El uso de este filtro es equivalente a tratar todos los datos
    del flujo a través de la función <function>str_rot13</function>.
   </simpara>
   <example>
    <title>string.rot13</title>
    <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'string.rot13');
fwrite($fp, "Ceci est un test.\n");
/* muestra :  Prpv rfg ha grfg.   */
?>
]]>
    </programlisting>
   </example>
  </section>

  <section xml:id="filters.string.toupper">
   <title>string.toupper</title>
   <simpara>
    El uso de este filtro es equivalente a tratar todos los datos
    del flujo a través de la función <function>strtoupper</function>.
   </simpara>
   <example>
    <title>string.toupper</title>
    <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'string.toupper');
fwrite($fp, "Ceci est un test.\n");
/* muestra :  CECI EST UN TEST.   */
?>
]]>
    </programlisting>
   </example>
  </section>

  <section xml:id="filters.string.tolower">
   <title>string.tolower</title>
   <simpara>
    El uso de este filtro es equivalente a tratar todos los datos
    del flujo a través de la función <function>strtolower</function>.
   </simpara>
   <example>
    <title>string.tolower</title>
    <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'string.tolower');
fwrite($fp, "Ceci est un test.\n");
/* muestra :  ceci est un test.   */
?>
]]>
    </programlisting>
   </example>
  </section>

  <section xml:id="filters.string.strip_tags">
   <title>string.strip_tags</title>
   <simpara>
    El uso de este filtro es equivalente a tratar todos los datos
    del flujo a través de la función <function>strip_tags</function>.
    El filtro acepta parámetros en dos formatos:
    O bien como una &string; que contiene una lista de etiquetas, similar al
    segundo parámetro de la función <function>strip_tags</function>,
    o bien como un &array; de nombres de etiquetas.
   </simpara>
   <para>
    &warn.deprecated.feature-7-3-0;
   </para>
   <example>
    <title>string.strip_tags</title>
    <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'string.strip_tags', STREAM_FILTER_WRITE, "<strong><em><span>");
fwrite($fp, "<strong>Ce texte en gras</strong> finit par être agrandi <h1>en un titre 1</h1>\n");
fclose($fp);
/* muestra :  Ce texte en gras finit par être agrandi en un titre 1   */

$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'string.strip_tags', STREAM_FILTER_WRITE, array('strong','em','span'));
fwrite($fp, "<strong>Ce texte en gras</strong> finit par être agrandi <h1>en un titre 1</h1>\n");
fclose($fp);
/* muestra :  Ce texte en gras finit par être agrandi en un titre 1   */
?>
]]>
    </programlisting>
   </example>
  </section>
 </section>

 <section xml:id="filters.convert">
  <title>Filtros de conversión</title>

  <simpara>
   Al igual que los filtros de &string;, los filtros de conversión
   hacen lo que su nombre indica.
   Para más información sobre un filtro dado, consulte la página del
   manual de la función correspondiente.
  </simpara>

  <section xml:id="filters.convert.base64">
   <title>convert.base64-encode y convert.base64-decode</title>
   <simpara>
    El uso de este filtro es equivalente a tratar todos los datos
    del flujo a través de las funciones <function>base64_encode</function> y
    <function>base64_decode</function> respectivamente.
    <literal>convert.base64-encode</literal> soporta parámetros en forma
    de &array; asociativo. Si <parameter>line-length</parameter> es proporcionado,
    la salida base64 será separada en líneas de <parameter>line-length</parameter>
    caracteres. Si <parameter>line-break-chars</parameter> es proporcionado, cada
    bloque de caracteres será delimitado por el carácter proporcionado. Estos parámetros
    dan el mismo efecto que la función <function>base64_encode</function>
    utilizada conjuntamente con <function>chunk_split</function>.
   </simpara>
   <example>
    <title>
     convert.base64-encode &amp;
     convert.base64-decode
    </title>
    <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'convert.base64-encode');
fwrite($fp, "This is a test.\n");
fclose($fp);
/* muestra :  VGhpcyBpcyBhIHRlc3QuCg==  */

$param = array('line-length' => 8, 'line-break-chars' => "\r\n");
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'convert.base64-encode', STREAM_FILTER_WRITE, $param);
fwrite($fp, "This is a test.\n");
fclose($fp);
/* muestra :  VGhpcyBp
           :  cyBhIHRl
           :  c3QuCg==  */

$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'convert.base64-decode');
fwrite($fp, "VGhpcyBpcyBhIHRlc3QuCg==");
fclose($fp);
/* muestra :  This is a test.  */
?>
]]>
    </programlisting>
   </example>
  </section>

  <section xml:id="filters.covert.quoted-printable">
   <title>convert.quoted-printable-encode y convert.quoted-printable-decode</title>
   <simpara>
    El uso de la versión decode de este filtro es equivalente a tratar todos
    los datos del flujo a través de la función
    <function>quoted_printable_decode</function>. No hay equivalente
    funcional a <literal>convert.quoted-printable-encode</literal>.
    <literal>convert.quoted-printable-encode</literal> soporta parámetros
    en forma de &array; asociativo. Además de los parámetros soportados por
    <literal>convert.base64-encode</literal>, <literal>convert.quoted-printable-encode</literal>
    también acepta los argumentos &boolean; <parameter>binary</parameter> y
    <parameter>force-encode-first</parameter>.
    <literal>convert.base64-decode</literal> soporta únicamente el parámetro
    <parameter>line-break-chars</parameter> como indicador de tipo para
    la extracción de la carga codificada.
   </simpara>
   <example>
    <title>
     convert.quoted-printable-encode &amp;
     convert.quoted-printable-decode
    </title>
    <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'convert.quoted-printable-encode');
fwrite($fp, "This is a test.\n");
/* muestra :  =This is a test.=0A  */
?>
]]>
    </programlisting>
   </example>
  </section>

  <section xml:id="filters.convert.iconv">
   <title>convert.iconv.*</title>
   <simpara>
    Los filtros <literal>convert.iconv.*</literal> están disponibles, si el soporte
    de <link linkend="book.iconv">iconv</link> está activado, y sus usos son
    equivalentes a tratar todos los datos del flujo con <function>iconv</function>.
    Estos filtros no soportan parámetros, pero se espera que el nombre del filtro contenga
    la codificación de los datos de entrada y salida, es decir,
    <literal>convert.iconv.&lt;input-encoding&gt;.&lt;output-encoding&gt;</literal> o
    <literal>convert.iconv.&lt;input-encoding&gt;/&lt;output-encoding&gt;</literal>
    (ambas notaciones son semánticamente equivalentes).
   </simpara>

   <example>
    <title>convert.iconv.*</title>
    <programlisting role="php">
<![CDATA[
<?php
$fp = fopen('php://output', 'w');
stream_filter_append($fp, 'convert.iconv.utf-16le.utf-8');
fwrite($fp, "T\0h\0i\0s\0 \0i\0s\0 \0a\0 \0t\0e\0s\0t\0.\0\n\0");
fclose($fp);
/* Muestra: This is a test. */
?>
]]>
    </programlisting>
   </example>
  </section>
 </section>

 <section xml:id="filters.compression">
  <title>Filtros de compresión</title>

  <simpara>
   Aunque las <link linkend="wrappers.compression">envolturas de
   compresión</link>  proporcionan un medio para generar ficheros en los
   formatos gzip y bz2, no permiten manejar los protocolos de red
   comprimidos, ni comenzar con un flujo no comprimido para transformarlo
   en flujo comprimido. Para ello, un filtro de compresión puede ser aplicado
   en cualquier momento a cualquier recurso de flujo.
  </simpara>

  <note>
   <simpara>
    Los filtros de compresión <emphasis>no generan</emphasis> los encabezados
    y finales de ficheros, como lo hace la utilidad <literal>gzip</literal>.
    Solo comprimen y descomprimen porciones de flujo de datos.
   </simpara>
  </note>

  <section xml:id="filters.compression.zlib">
   <title>zlib.deflate y zlib.inflate</title>
   <simpara>
    <literal>zlib.deflate</literal> (compresión) y
    <literal>zlib.inflate</literal> (descompresión) son las implementaciones
    de los métodos de compresión presentados en la
    <link xlink:href="&url.rfc;1951">RFC 1951</link>.
    El filtro <literal>deflate</literal> toma hasta tres parámetros, pasados
    en forma de &array; asociativo.

    <parameter>level</parameter> especifica el nivel de compresión deseado,
    de 1 a 9. Cuanto más alto sea el nivel, mejor será la compresión, y más
    costoso será el coste de compresión. Existen dos niveles de compresión especiales:
    0, que representa la ausencia de compresión, y -1, que representa el nivel por defecto de zlib:
    actualmente, 6.

    <parameter>window</parameter> es el tamaño del buffer de memoria, en base 2.
    Los valores superiores, hasta 15, es decir, 32768 bytes, dan mejores
    compresiones, y los valores inferiores, hasta 9, es decir, 512 bytes,
    ocupan menos espacio en memoria. Por defecto,
    <parameter>window</parameter> vale actualmente <literal>15</literal>.

    <parameter>memory</parameter> es una indicación del nivel de memoria
    necesario.
    Los valores válidos van de 1, para la asignación mínima, a 9, para una
    asignación máxima. La asignación de memoria afecta la velocidad de ejecución,
    y no el coste global.
   </simpara>

   <note>
    <simpara>
     Como el nivel de compresión es el parámetro más común, también puede ser proporcionado
     como valor &integer;, en lugar de un &array;.
    </simpara>
   </note>

   <simpara>
    Los filtros de compresión zlib.* están disponibles si el soporte de
    <link linkend="ref.zlib">zlib</link> está activado.
   </simpara>

   <example>
    <title>
     <literal>zlib.deflate</literal> y
     <literal>zlib.inflate</literal>
    </title>
    <programlisting role="php">
<![CDATA[
<?php
$params = array('level' => 6, 'window' => 15, 'memory' => 9);

$original_text = "This is a test.\nThis is only a test.\nThis is not an important string.\n";
echo "El texto original es largo de " . strlen($original_text) . " bytes.\n";

$fp = fopen('test.deflated', 'w');
stream_filter_append($fp, 'zlib.deflate', STREAM_FILTER_WRITE, $params);
fwrite($fp, $original_text);
fclose($fp);

echo "El fichero comprimido hace " . filesize('test.deflated') . " bytes de largo.\n";
echo "El texto original era :\n";
/* Utiliza readfile y zlib.inflate para descomprimir al vuelo */
readfile('php://filter/zlib.inflate/resource=test.deflated');

/* Muestra :

El texto original es largo de 70 bytes
El fichero comprimido hace 56 bytes de largo.
El texto original era :
This is a test.
This is only a test.
This is not an important string.

 */
?>
]]>
    </programlisting>
   </example>

   <example>
    <title>
     <literal>zlib.deflate</literal> simple
    </title>
    <programlisting role="php">
<![CDATA[
<?php
$original_text = "This is a test.\nThis is only a test.\nThis is not an important string.\n";
echo "El texto original es largo de " . strlen($original_text) . " bytes.\n";

$fp = fopen('test.deflated', 'w');
/* Aquí, "6" indica el nivel de compresión de 6 */
stream_filter_append($fp, 'zlib.deflate', STREAM_FILTER_WRITE, 6);
fwrite($fp, $original_text);
fclose($fp);

echo "El fichero comprimido hace " . filesize('test.deflated') . " bytes de largo.\n";

/* Muestra :

El texto original es largo de 70 bytes
El fichero comprimido hace 56 bytes de largo.

 */
?>
]]>
    </programlisting>
   </example>
  </section>

  <section xml:id="filters.compression.bzip2">
   <title>bzip2.compress y bzip2.decompress</title>
   <simpara>
    <literal>bzip2.compress</literal> y
    <literal>bzip2.decompress</literal>
    funcionan de la misma manera que los filtros zlib descritos anteriormente.
    El filtro <literal>bzip2.compress</literal> acepta hasta 2 parámetros,
    en forma de &array; asociativo:

    <parameter>blocks</parameter> es un valor &integer;, de 1 a 9,
    especificando el número de bloques de 100 kb de memoria a asignar al espacio de
    trabajo.

    <parameter>work</parameter> es también un &integer; cuyo valor va de
    0 a 250, e indica el nivel de esfuerzo proporcionado con un método de
    compresión antes de pasar a otro método, más lento. Modificar este
    parámetro solo tiene efecto en la velocidad de compresión. La ganancia de espacio
    o la memoria utilizada permanecen iguales. Un nivel de 0 indica que la
    biblioteca debe utilizar su configuración por defecto.

    El filtro <literal>bzip2.decompress</literal> acepta únicamente un parámetro,
    que puede ser pasado en forma de &boolean;, o como el elemento
    <parameter>small</parameter> de un &array; asociativo.

    <parameter>small</parameter>, cuando se define a &true;, indica a la
    biblioteca bzip que debe realizar una descompresión utilizando la menor cantidad de memoria posible, a expensas de la velocidad.
   </simpara>

   <simpara>
    Los filtros bzip2.* están disponibles si el soporte de
    <link linkend="ref.bzip2">bz2</link> está activado.
   </simpara>

   <example>
    <title>
     <literal>bzip2.compress</literal> y
     <literal>bzip2.decompress</literal>
    </title>
    <programlisting role="php">
<![CDATA[
<?php
$param = array('blocks' => 9, 'work' => 0);

echo "El fichero original hace " . strlen(LICENSE) . " bytes de largo.\n";

$fp = fopen('LICENSE.compressed', 'w');
stream_filter_append($fp, 'bzip2.compress', STREAM_FILTER_WRITE, $param);
fwrite($fp, file_get_contents('LICENSE'));
fclose($fp);

echo "El fichero comprimido hace " . filesize('LICENSE.compressed') . " bytes de largo.\n";

/* Muestra :

El fichero original hace 3288 bytes de largo.
El fichero comprimido hace 1488 bytes de largo.

 */
?>
]]>
    </programlisting>
   </example>
  </section>
  </section>

 <section xml:id="filters.encryption">
  <title>Filtros de cifrado</title>

  <para>
   Los filtros de cifrado son particularmente útiles para el cifrado
   de ficheros/flujos.
  </para>

  <section xml:id="filters.encryption.mcrypt">
   <title>mcrypt.* y mdecrypt.*</title>
   <para>
     &warn.deprecated.feature-7-1-0;
   </para>

   <simpara>
    <literal>mcrypt.*</literal> y <literal>mdecrypt.*</literal>
    proporcionan un sistema de cifrado simétrico utilizando libmcrypt.
    Ambos conjuntos de filtros soportan los mismos algoritmos disponibles en la
    <link linkend="ref.mcrypt">extensión mcrypt</link> en forma
    <literal>mcrypt.ciphername</literal> donde <parameter>ciphername</parameter>
    es el nombre del cifrado que será transmitido a
    <function>mcrypt_module_open</function>.
    Los cinco parámetros siguientes también están disponibles:
   </simpara>

   <para>
    <table>
     <title>Parámetros de los filtros mcrypt</title>
     <tgroup cols="4">
      <thead>
       <row>
        <entry>Parámetro</entry>
        <entry>Obligatorio ?</entry>
        <entry>Por omisión</entry>
        <entry>Valores posibles</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>mode</entry>
        <entry>Opcional</entry>
        <entry>cbc</entry>
        <entry>cbc, cfb, ecb, nofb, ofb, stream</entry>
       </row>
       <row>
        <entry>algorithms_dir</entry>
        <entry>Opcional</entry>
        <entry>ini_get('mcrypt.algorithms_dir')</entry>
        <entry>Ruta hacia los algoritmos de módulos</entry>
       </row>
       <row>
        <entry>modes_dir</entry>
        <entry>Opcional</entry>
        <entry>ini_get('mcrypt.modes_dir')</entry>
        <entry>Ruta hacia los modos de módulos</entry>
       </row>
       <row>
        <entry>iv</entry>
        <entry>Obligatorio</entry>
        <entry>N/A</entry>
        <entry>Generalmente 8, 16 o 32 bytes de datos binarios. Depende del cifrado</entry>
       </row>
       <row>
        <entry>key</entry>
        <entry>Obligatorio</entry>
        <entry>N/A</entry>
        <entry>Generalmente 8, 16 o 32 bytes de datos binarios. Depende del cifrado</entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </para>

   <example>
    <title>Cifrado / Descifrado con Blowfish</title>
    <programlisting role="php">
<![CDATA[
<?php
//$key se supone que fue generado previamente
$iv_size = mcrypt_get_iv_size(MCRYPT_BLOWFISH, MCRYPT_MODE_CBC);
$iv = mcrypt_create_iv($iv_size, MCRYPT_DEV_URANDOM);
$fp = fopen('encrypted-file.enc', 'wb');
fwrite($fp, $iv);
$opts = array('mode'=>'cbc','iv'=>$iv, 'key'=>$key);
stream_filter_append($fp, 'mcrypt.blowfish', STREAM_FILTER_WRITE, $opts);
fwrite($fp, 'message to encrypt');
fclose($fp);

//descifrado...
$fp = fopen('encrypted-file.enc', 'rb');
$iv = fread($fp, $iv_size = mcrypt_get_iv_size(MCRYPT_BLOWFISH, MCRYPT_MODE_CBC));
$opts = array('mode'=>'cbc','iv'=>$iv, 'key'=>$key);
stream_filter_append($fp, 'mdecrypt.blowfish', STREAM_FILTER_READ, $opts);
$data = rtrim(stream_get_contents($fp));//elimina el relleno nulo
fclose($fp);
echo $data;
?>
]]>
    </programlisting>
   </example>
   <example>
    <title>Cifrar un fichero utilizando AES-128 CBC con SHA256 HMAC</title>
    <programlisting role="php">
<![CDATA[
<?php
AES_CBC::encryptFile($password, "plaintext.txt", "encrypted.enc");
AES_CBC::decryptFile($password, "encrypted.enc", "decrypted.txt");

class AES_CBC
{
   protected static $KEY_SIZES = array('AES-128'=>16,'AES-192'=>24,'AES-256'=>32);
   protected static function key_size() { return self::$KEY_SIZES['AES-128']; } //por defecto AES-128
   public static function encryptFile($password, $input_stream, $aes_filename){
      $iv_size = mcrypt_get_iv_size(MCRYPT_RIJNDAEL_128, MCRYPT_MODE_CBC);
      $fin = fopen($input_stream, "rb");
      $fc = fopen($aes_filename, "wb+");
      if (!empty($fin) && !empty($fc)) {
         fwrite($fc, str_repeat("_", 32) );//marcador de posición, SHA256 HMAC irá aquí más tarde
         fwrite($fc, $hmac_salt = mcrypt_create_iv($iv_size, MCRYPT_DEV_URANDOM));
         fwrite($fc, $esalt = mcrypt_create_iv($iv_size, MCRYPT_DEV_URANDOM));
         fwrite($fc, $iv = mcrypt_create_iv($iv_size, MCRYPT_DEV_URANDOM));
         $ekey = hash_pbkdf2("sha256", $password, $esalt, $it=1000, self::key_size(), $raw=true);
         $opts = array('mode'=>'cbc', 'iv'=>$iv, 'key'=>$ekey);
         stream_filter_append($fc, 'mcrypt.rijndael-128', STREAM_FILTER_WRITE, $opts);
         $infilesize = 0;
         while (!feof($fin)) {
            $block = fread($fin, 8192);
            $infilesize+=strlen($block);
            fwrite($fc, $block);
         }
         $block_size = mcrypt_get_block_size(MCRYPT_RIJNDAEL_128, MCRYPT_MODE_CBC);
         $padding = $block_size - ($infilesize % $block_size);//$padding es un número de 1-16
         fwrite($fc, str_repeat(chr($padding), $padding) );//realiza PKCS7 padding
         fclose($fin);
         fclose($fc);
         $hmac_raw = self::calculate_hmac_after_32bytes($password, $hmac_salt, $aes_filename);
         $fc = fopen($aes_filename, "rb+");
         fwrite($fc, $hmac_raw);//sobrescribe el marcador de posición
         fclose($fc);
      }
   }
   public static function decryptFile($password, $aes_filename, $out_stream) {
      $iv_size = mcrypt_get_iv_size(MCRYPT_RIJNDAEL_128, MCRYPT_MODE_CBC);
      $hmac_raw = file_get_contents($aes_filename, false, NULL,  0, 32);
      $hmac_salt = file_get_contents($aes_filename, false, NULL, 32, $iv_size);
      $hmac_calc = self::calculate_hmac_after_32bytes($password, $hmac_salt, $aes_filename);
      $fc = fopen($aes_filename, "rb");
      $fout = fopen($out_stream, 'wb');
      if (!empty($fout) && !empty($fc) && self::hash_equals($hmac_raw,$hmac_calc)) {
         fread($fc, 32+$iv_size);//saltar sha256 hmac y salt
         $esalt = fread($fc, $iv_size);
         $iv    = fread($fc, $iv_size);
         $ekey = hash_pbkdf2("sha256", $password, $esalt, $it=1000, self::key_size(), $raw=true);
         $opts = array('mode'=>'cbc', 'iv'=>$iv, 'key'=>$ekey);
         stream_filter_append($fc, 'mdecrypt.rijndael-128', STREAM_FILTER_READ, $opts);
         while (!feof($fc)) {
            $block = fread($fc, 8192);
            if (feof($fc)) {
               $padding = ord($block[strlen($block) - 1]);//supone PKCS7 padding
               $block = substr($block, 0, 0-$padding);
            }
            fwrite($fout, $block);
         }
         fclose($fout);
         fclose($fc);
      }
   }
   private static function hash_equals($str1, $str2) {
      if(strlen($str1) == strlen($str2)) {
         $res = $str1 ^ $str2;
         for($ret=0,$i = strlen($res) - 1; $i >= 0; $i--) $ret |= ord($res[$i]);
         return !$ret;
      }
      return false;
   }
   private static function calculate_hmac_after_32bytes($password, $hsalt, $filename) {
      static $init=0;
      $init or $init = stream_filter_register("user-filter.skipfirst32bytes", "FileSkip32Bytes");
      $stream = 'php://filter/read=user-filter.skipfirst32bytes/resource=' . $filename;
      $hkey = hash_pbkdf2("sha256", $password, $hsalt, $iterations=1000, 24, $raw=true);
      return hash_hmac_file('sha256', $stream, $hkey, $raw=true);
   }
}
class FileSkip32Bytes extends php_user_filter
{
   private $skipped=0;
   function filter($in, $out, &$consumed, $closing)  {
      while ($bucket = stream_bucket_make_writeable($in)) {
         $outlen = $bucket->datalen;
         if ($this->skipped<32){
            $outlen = min($bucket->datalen,32-$this->skipped);
            $bucket->data = substr($bucket->data, $outlen);
            $bucket->datalen = $bucket->datalen-$outlen;
            $this->skipped+=$outlen;
         }
         $consumed += $outlen;
         stream_bucket_append($out, $bucket);
      }
      return PSFS_PASS_ON;
   }
}
class AES_128_CBC extends AES_CBC {
   protected static function key_size() { return self::$KEY_SIZES['AES-128']; }
}
class AES_192_CBC extends AES_CBC {
   protected static function key_size() { return self::$KEY_SIZES['AES-192']; }
}
class AES_256_CBC extends AES_CBC {
   protected static function key_size() { return self::$KEY_SIZES['AES-256']; }
}
]]>
    </programlisting>
   </example>
  </section>
 </section>

</appendix>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
