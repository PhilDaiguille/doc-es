<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: c4650e160398873696e59305a11db9645e0b7304 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<reference xml:id="class.weakmap" role="class" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">

 <title>La clase WeakMap</title>
 <titleabbrev>WeakMap</titleabbrev>

 <partintro>

  <!-- {{{ WeakMap intro -->
  <section xml:id="weakmap.intro">
   &reftitle.intro;
   <para>
    Un <classname>WeakMap</classname> es un array asociativo (o diccionario) que acepta objetos como claves. Sin embargo, a diferencia
    del similar <classname>SplObjectStorage</classname>, un objeto en una clave de <classname>WeakMap</classname>
    no contribuye al número de referencias del objeto. En otras palabras, si, en un momento dado, la única referencia restante
    a un objeto es la clave de un <classname>WeakMap</classname>, el objeto será recolectado y eliminado del <classname>WeakMap</classname>.
    Su principal caso de uso es la construcción de cachés de datos derivados de un objeto que no necesitan ser conservados
    más tiempo que el objeto.
   </para>
   <para>
    <classname>WeakMap</classname> implementa <interfacename>ArrayAccess</interfacename>,
    <interfacename>Traversable</interfacename> (vía <interfacename>IteratorAggregate</interfacename>),
    y <interfacename>Countable</interfacename>, de modo que, en la mayoría de los casos, puede ser utilizado de la misma manera que un array asociativo.
   </para>
  </section>
  <!-- }}} -->

  <section xml:id="weakmap.synopsis">
   &reftitle.classsynopsis;

   <!-- {{{ Synopsis -->
   <classsynopsis class="class">
    <ooclass>
     <modifier>final</modifier>
     <classname>WeakMap</classname>
    </ooclass>

    <oointerface>
     <modifier>implements</modifier>
     <interfacename>ArrayAccess</interfacename>
    </oointerface>

    <oointerface>
     <interfacename>Countable</interfacename>
    </oointerface>

    <oointerface>
     <interfacename>IteratorAggregate</interfacename>
    </oointerface>

    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.weakmap')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[@role='WeakMap'])">
     <xi:fallback/>
    </xi:include>
   </classsynopsis>
   <!-- }}} -->

  </section>
  <!-- {{{ weakmap examples -->
  <section xml:id="weakmap.examples">
   &reftitle.examples;
   <para>
    <example>
     <title>Ejemplo de uso de un <classname>Weakmap</classname></title>
     <programlisting role="php">
      <![CDATA[
<?php
$wm = new WeakMap();

$o = new stdClass;

class A {
    public function __destruct() {
        echo "Dead!\n";
    }
}

$wm[$o] = new A;

var_dump(count($wm));
echo "Unsetting...\n";
unset($o);
echo "Done\n";
var_dump(count($wm));
]]>
     </programlisting>
     &example.outputs;
     <screen>
      <![CDATA[
int(1)
Unsetting...
Dead!
Done
int(0)
]]>
     </screen>
    </example>
   </para>
  </section>
  <!-- }}} -->

 </partintro>

 &language.predefined.weakmap.count;
 &language.predefined.weakmap.getiterator;
 &language.predefined.weakmap.offsetexists;
 &language.predefined.weakmap.offsetget;
 &language.predefined.weakmap.offsetset;
 &language.predefined.weakmap.offsetunset;

</reference>
<!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
 indent-tabs-mode:nil
 sgml-parent-document:nil
 sgml-default-dtd-file:"~/.phpdoc/manual.ced"
 sgml-exposed-tags:nil
 sgml-local-catalogs:nil
 sgml-local-ecat-files:nil
 End:
 vim600: syn=xml fen fdm=syntax fdl=2 si
 vim: et tw=78 syn=sgml
 vi: ts=1 sw=1
 -->
