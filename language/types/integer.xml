<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 8859c8b96cd9e80652813f7bcf561432a5e9f934 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes Maintainer: Marqitos -->
<sect1 xml:id="language.types.integer">
 <title>Integers</title>

 <simpara>
  Un <type>int</type> es un número del conjunto
  &#8484; = {..., -2, -1, 0, 1, 2, ...}.
 </simpara>

 <sect2 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><link linkend="language.types.float">Números de punto flotante</link></member>
    <member><link linkend="book.bc">Precisión arbitraria / BCMath</link></member>
    <member><link linkend="book.gmp">Entero de longitud arbitraria / GMP</link></member>
   </simplelist>
  </para>
 </sect2>

 <sect2 xml:id="language.types.integer.syntax">
  <title>Sintaxis</title>

  <simpara>
   Los <type>int</type> pueden especificarse en notación decimal (base 10), hexadecimal
   (base 16), octal (base 8) o binaria (base 2).
   El <link linkend="language.operators.arithmetic">operador de negación</link>
   puede utilizarse para denotar un <type>int</type> negativo.
  </simpara>

  <para>
   Para usar la notación octal, preceda el número con un <literal>0</literal> (cero).
   A partir de PHP 8.1.0, la notación octal también puede ser precedida por <literal>0o</literal> o <literal>0O</literal>.
   Para usar la notación hexadecimal, preceda el número con <literal>0x</literal>.
   Para usar la notación binaria, preceda el número con <literal>0b</literal>.
  </para>

  <para>
   A partir de PHP 7.4.0, los literales de enteros pueden contener guiones bajos (<literal>_</literal>) entre dígitos,
   para una mejor legibilidad de los literales. Estos guiones bajos son eliminados por el analizador de PHP.
  </para>

  <example>
   <title>Literales de enteros</title>
   <programlisting role="php">
<![CDATA[
<?php
$a = 1234; // número decimal
$a = 0123; // número octal (equivalente a 83 decimal)
$a = 0o123; // número octal (a partir de PHP 8.1.0)
$a = 0x1A; // número hexadecimal (equivalente a 26 decimal)
$a = 0b11111111; // número binario (equivalente a 255 decimal)
$a = 1_234_567; // número decimal (a partir de PHP 7.4.0)
?>
]]>
   </programlisting>
  </example>

  <para>
   Formalmente, la estructura para los literales <type>int</type> es a partir de PHP 8.1.0
   (anteriormente, los prefijos octales <literal>0o</literal> o <literal>0O</literal> no estaban permitidos, y antes de PHP 7.4.0 los guiones bajos no estaban permitidos):
  </para>

  <informalexample>
   <programlisting>
<![CDATA[
decimal     : [1-9][0-9]*(_[0-9]+)*
            | 0

hexadecimal : 0[xX][0-9a-fA-F]+(_[0-9a-fA-F]+)*

octal       : 0[oO]?[0-7]+(_[0-7]+)*

binary      : 0[bB][01]+(_[01]+)*

integer     : decimal
            | hexadecimal
            | octal
            | binary
]]>
   </programlisting>
  </informalexample>

  <para>
   El tamaño de un <type>int</type> depende de la plataforma, aunque un valor máximo de aproximadamente dos mil millones es el valor habitual (eso es 32 bits con signo).
   Las plataformas de 64 bits suelen tener un valor máximo de aproximadamente 9E18.
   PHP no soporta <type>int</type> sin signo.
   El tamaño de <type>int</type> puede determinarse
   utilizando la constante <constant>PHP_INT_SIZE</constant>, el valor máximo utilizando
   la constante <constant>PHP_INT_MAX</constant>,
   y el valor mínimo utilizando la constante <constant>PHP_INT_MIN</constant>.
  </para>
 </sect2>

 <sect2 xml:id="language.types.integer.overflow">
  <title>Desbordamiento de enteros</title>

  <para>
   Si PHP encuentra un número más allá de los límites del tipo <type>int</type>,
   se interpretará como un <type>float</type> en su lugar. Asimismo, una operación que resulte en un número más allá de los límites del
   tipo <type>int</type> devolverá un <type>float</type> en su lugar.
  </para>

  <example>
   <title>Desbordamiento de enteros</title>
   <programlisting role="php">
<![CDATA[
<?php
$large_number = 50000000000000000000;
var_dump($large_number);         // float(5.0E+19)

var_dump(PHP_INT_MAX + 1);       // sistema de 32 bits: float(2147483648)
                                 // sistema de 64 bits: float(9.2233720368548E+18)
?>
]]>
   </programlisting>
  </example>
 </sect2>

 <sect2 xml:id="language.types.integer.division">
  <title>División de enteros</title>

  <para>
   No existe un operador de división de <type>int</type> en PHP, para lograr esto
   utilice la función <function>intdiv</function>.
   <literal>1/2</literal> produce el <type>float</type> <literal>0.5</literal>.
   El valor puede convertirse a un <type>int</type> para redondearlo hacia cero, o
   la función <function>round</function> proporciona un control más fino sobre el redondeo.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
var_dump(25/7);         // float(3.5714285714286)
var_dump((int) (25/7)); // int(3)
var_dump(round(25/7));  // float(4)
?>
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="language.types.integer.casting">
  <title>Conversión a entero</title>

  <simpara>
   Para convertir explícitamente un valor a <type>int</type>, utilice la conversión <literal>(int)</literal> o <literal>(integer)</literal>. Sin embargo, en
   la mayoría de los casos la conversión no es necesaria, ya que un valor será convertido automáticamente si un operador, función o estructura de control requiere un
   argumento <type>int</type>. Un valor también puede convertirse a
   <type>int</type> con la función <function>intval</function>.
  </simpara>

  <simpara>
   Si un <type>resource</type> se convierte a un <type>int</type>, entonces
   el resultado será el número de recurso único asignado al
   <type>resource</type> por PHP en tiempo de ejecución.
  </simpara>

  <simpara>
   Véase también <link linkend="language.types.type-juggling">Manipulación de tipos</link>.
  </simpara>

  <sect3 xml:id="language.types.integer.casting.from-boolean">
   <title>Desde <link linkend="language.types.boolean">booleanos</link></title>

   <simpara>
    &false; producirá <literal>0</literal> (cero), y &true; producirá
    <literal>1</literal> (uno).
   </simpara>
  </sect3>

  <sect3 xml:id="language.types.integer.casting.from-float">
   <title>
    Desde <link linkend="language.types.float">números de punto flotante</link>
   </title>

   <simpara>
    Al convertir de <type>float</type> a <type>int</type>, el número
    será redondeado <emphasis>hacia cero</emphasis>.
    A partir de PHP 8.1.0, se emite un aviso de deprecación cuando se convierte implícitamente un &float; no entero a &integer; que pierde precisión.
   </simpara>

   <programlisting role="php">
<![CDATA[
<?php

function foo($value): int {
  return $value;
}

var_dump(foo(8.1)); // "Deprecated: Implicit conversion from float 8.1 to int loses precision" a partir de PHP 8.1.0
var_dump(foo(8.1)); // 8 anterior a PHP 8.1.0
var_dump(foo(8.0)); // 8 en ambos casos

var_dump((int) 8.1); // 8 en ambos casos
var_dump(intval(8.1)); // 8 en ambos casos
?>
]]>
   </programlisting>

   <para>
    Si el float está más allá de los límites de <type>int</type> (normalmente
    <literal>+/- 2.15e+9 = 2^31</literal> en plataformas de 32 bits y
    <literal>+/- 9.22e+18 = 2^63</literal> en plataformas de 64 bits),
    el resultado es indefinido, ya que el <type>float</type>
    no tiene suficiente precisión para dar un resultado <type>int</type> exacto.
    ¡No se emitirá ninguna advertencia, ni siquiera un aviso cuando esto ocurra!
   </para>

   <note>
    <para>
     <literal>NaN</literal>, <literal>Inf</literal> y <literal>-Inf</literal> siempre serán cero cuando se conviertan a <type>int</type>.
    </para>
   </note>

   <warning>
    <para>
     Nunca convierta una fracción desconocida a <type>int</type>, ya que esto puede
     llevar a veces a resultados inesperados.
    </para>

    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
echo (int) ( (0.1+0.7) * 10 ); // imprime 7!
?>
]]>
     </programlisting>
    </informalexample>

    <para>
     Véase también la <link linkend="warn.float-precision">advertencia sobre la precisión de los flotantes</link>.
    </para>
   </warning>
  </sect3>

  <sect3 xml:id="language.types.integer.casting.from-string">
   <title>Desde strings</title>

   <simpara>
    Si la string es
    <link linkend="language.types.numeric-strings">numérica</link>
    o numérica inicial, entonces se resolverá al
    valor entero correspondiente, de lo contrario se convertirá a cero
    (<literal>0</literal>).
   </simpara>
  </sect3>

  <sect3 xml:id="language.types.integer.casting-from-null">
   <title>Desde <type>NULL</type></title>

   <simpara>
    &null; siempre se convierte a cero (<literal>0</literal>).
   </simpara>
  </sect3>

  <sect3 xml:id="language.types.integer.casting.from-other">
   <title>Desde otros tipos</title>

   <caution>
    <simpara>
     El comportamiento de la conversión a <type>int</type> es indefinido para otros
     tipos. No se debe confiar en ningún comportamiento observado, ya que puede cambiar sin previo aviso.
    </simpara>
   </caution>
  </sect3>

 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
