<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: d98f67b5c6a30cdb8f323320ecb70e61309c5920 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes Maintainer: Marqitos -->
<sect1 xml:id="language.types.integer">
 <title>Los enteros</title>

 <simpara>
  Un &integer; es un número perteneciente al conjunto
  &#8484; = {..., -2, -1, 0, 1, 2, ...}.
 </simpara>

 <sect2 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><link linkend="language.types.float">Los números de coma flotante</link></member>
    <member><link linkend="book.bc">Las precisiones arbitrarias / BCMath</link></member>
    <member><link linkend="book.gmp">Los enteros de longitud arbitraria / GMP</link></member>
   </simplelist>
  </para>
 </sect2>

 <sect2 xml:id="language.types.integer.syntax">
  <title>Sintaxis</title>

  <simpara>
   Los &integer;s pueden ser especificados en notación decimal (base 10), hexadecimal
   (base 16), octal (base 8), o binaria (base 2).
   El <link linkend="language.operators.arithmetic">operador de negación</link>
   puede ser utilizado para designar un &integer; negativo.
  </simpara>

  <para>
   Para utilizar la notación octal, preceda el número de un <literal>0</literal> (cero).
   A partir de PHP 8.1.0, la notación octal puede ser precedida con <literal>0o</literal> o <literal>0O</literal>.
   Para utilizar la notación hexadecimal, preceda el número de <literal>0x</literal>.
   Para utilizar la notación binaria, preceda el número de <literal>0b</literal>.
  </para>

  <para>
   A partir de PHP 7.4.0, los enteros literales pueden contener underscores
   (<literal>_</literal>) entre los dígitos, para una mejor legibilidad
   de los literales. Estos underscores son eliminados por el scanner de PHP.
  </para>

  <example>
   <title>Los enteros literales</title>
   <programlisting role="php">
<![CDATA[
<?php
$a = 1234; // un número decimal
$a = 0123; // un número octal (equivalente a 83 en decimal)
$a = 0o123; // un número octal (a partir de PHP 8.1.0)
$a = 0x1A; // un número hexadecimal (equivalente a 26 en decimal)
$a = 0b11111111; // un número binario (equivalente a 255 en decimal)
$a = 1_234_567; // un número decimal (a partir de PHP 7.4.0)
?>
]]>
   </programlisting>
  </example>

  <para>
   Formalmente, la estructura de un <type>entero</type> literal es a partir de PHP 8.1.0
   (anteriormente, los prefijos octales <literal>0o</literal> o <literal>0O</literal>
   no estaban permitidos, y antes de PHP 7.4.0, los underscores no estaban permitidos.
  </para>

  <informalexample>
   <programlisting>
<![CDATA[
decimal     : [1-9][0-9]*(_[0-9]+)*
            | 0

hexadecimal : 0[xX][0-9a-fA-F]+(_[0-9a-fA-F]+)*

octal       : 0[oO]?[0-7]+(_[0-7]+)*

binary      : 0[bB][01]+(_[01]+)*

integer     : decimal
            | hexadecimal
            | octal
            | binary
]]>
   </programlisting>
  </informalexample>

  <para>
   El tamaño de un &integer; es dependiente de la plataforma, sin embargo,
   un valor máximo de aproximadamente 2 mil millones es habitual (esto corresponde
   a 32 bits con signo). Las plataformas de 64 bits tienen habitualmente un valor
   máximo de aproximadamente 9E18.
   PHP no soporta &integer;s sin signo.
   El tamaño de un &integer; puede ser determinado utilizando la constante
   <constant>PHP_INT_SIZE</constant>, el valor máximo, utilizando
   la constante <constant>PHP_INT_MAX</constant>,
   y el valor mínimo utilizando la constante
   <constant>PHP_INT_MIN</constant>.
  </para>
 </sect2>

 <sect2 xml:id="language.types.integer.overflow">
  <title>Desbordamiento de entero</title>

  <para>
   Si PHP encuentra un número superior al máximo de un &integer;, será
   interpretado como un &float;. De la misma manera, una operación que resulte en
   un número fuera del rango del tipo &integer; devolverá un &float;.
  </para>

  <example>
   <title>Desbordamiento de entero en un sistema de 32 bits</title>
   <programlisting role="php">
<![CDATA[
<?php

$large_number = 50000000000000000000;
var_dump($large_number);         // float(5.0E+19)
var_dump(PHP_INT_MAX + 1);       // sistema de 32 bits: float(2147483648)
                                 // sistema de 64 bits: float(9.2233720368548E+18)
?>
]]>
   </programlisting>
  </example>
 </sect2>

 <sect2 xml:id="language.types.integer.division">
  <title>División de entero</title>

  <para>
   No hay operador de división de &integer; en PHP, para lograr esto
   utilizar la función <function>intdiv</function>.
   <literal>1/2</literal> produce el &float; (<literal>0.5</literal>).
   El valor puede ser convertido en un &integer; para redondear hacia cero, o
   utilizando la función <function>round</function> para tener un control
   más fino sobre la forma en que se realiza el redondeo.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
var_dump(25/7);         // float(3.5714285714286)
var_dump((int) (25/7)); // int(3)
var_dump(round(25/7));  // float(4)
?>
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="language.types.integer.casting">
  <title>Conversión a entero</title>

  <simpara>
   Para convertir explícitamente un valor en un &integer;, utilizar ya sea
   la palabra clave <literal>(int)</literal>, o <literal>(integer)</literal>.
   Sin embargo, en la mayoría de los casos, esta palabra clave no es necesaria
   ya que un valor será automáticamente convertido si un operador, una
   función o una estructura de control requiere un &integer; como argumento. Un valor también puede ser convertido en un &integer;
   utilizando la función <function>intval</function>.
  </simpara>

  <simpara>
   Si un &resource; es convertido a un &integer;, entonces
   el resultado será el identificador único del &resource; asignado
   por PHP en la ejecución.
  </simpara>

  <simpara>
   Ver también <link linkend="language.types.type-juggling">el transtipado</link>.
  </simpara>

  <sect3 xml:id="language.types.integer.casting.from-boolean">
   <title>Desde un <link linkend="language.types.boolean">booléen</link></title>

   <simpara>
    &false; corresponde a <literal>0</literal> (cero), y &true; corresponde a
    <literal>1</literal> (uno).
   </simpara>
  </sect3>

  <sect3 xml:id="language.types.integer.casting.from-float">
   <title>
    Desde <link linkend="language.types.float">un número de coma flotante</link>
   </title>

   <simpara>
    Al convertir un &float; en &integer;, el número es redondeado
    <emphasis>hacia cero</emphasis>.
    A partir de PHP 8.1.0, se emite una notificación de deprecación al realizar la
    conversión implícita de un &float; no integral a &integer; perdiendo precisión.
   </simpara>
   <programlisting role="php">
<![CDATA[
<?php

function foo($value): int {
  return $value;
}

var_dump(foo(8.1)); // "Deprecated: Implicit conversion from float 8.1 to int loses precision" a partir de PHP 8.1.0
var_dump(foo(8.1)); // Antes de PHP 8.1.0
var_dump(foo(8.0)); // 8 en ambos casos

var_dump((int) 8.1); // 8 en ambos casos
var_dump(intval(8.1)); // 8 en ambos casos
?>
]]>
   </programlisting>
   <para>
    Si el número de coma flotante está más allá de los límites de los &integer;s (habitualmente,
    <literal>+/- 2.15e+9 = 2^31</literal> en plataformas de 32 bits y
    <literal>+/- 9.22e+18 = 2^63</literal> en plataformas de 64 bits),
    el resultado será indefinido, ya que el &float; no tiene suficiente precisión para dar un resultado &integer; exacto.
    ¡No se emite ninguna alerta cuando ocurre este comportamiento!
   </para>

   <note>
    <para>
     <literal>NaN</literal>, <literal>Infinity</literal> y <literal>-Inf</literal> son siempre igual a cero al convertir a
     <type>int</type>.
    </para>
   </note>

   <warning>
    <para>
     Nunca convierta una fracción desconocida a un &integer;, esto puede
     generar resultados inesperados.
    </para>

    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
echo (int) ( (0.1+0.7) * 10 ); // Muestra 7 !
?>
]]>
     </programlisting>
    </informalexample>

    <para>
     Ver también la sección sobre <link linkend="warn.float-precision">las alertas
     concernientes a la precisión de los números de coma flotante</link>.
    </para>
   </warning>
  </sect3>

  <sect3 xml:id="language.types.integer.casting.from-string">
   <title>Desde cadenas de caracteres</title>

   <simpara>
    Si una cadena es
    <link linkend="language.types.numeric-strings">numérica</link>
    o numérica de cabeza entonces será transformada en su valor entero
    correspondiente, de lo contrario será convertida a cero (<literal>0</literal>).
   </simpara>
  </sect3>

  <sect3 xml:id="language.types.integer.casting-from-null">
   <title>Desde <type>NULL</type></title>

   <simpara>
    &null; es siempre convertido en cero (<literal>0</literal>).
   </simpara>
  </sect3>

  <sect3 xml:id="language.types.integer.casting.from-other">
   <title>Desde otros tipos</title>

   <caution>
    <simpara>
     El comportamiento de la conversión a &integer; es indefinido desde otros tipos.
     No informar <emphasis>ningún</emphasis> comportamiento observado, ya que pueden
     cambiar sin previo aviso.
    </simpara>
   </caution>
  </sect3>

 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
