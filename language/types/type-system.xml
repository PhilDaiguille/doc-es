<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: f908fff129bcd8ec1605658e06457cb04e5b2b51 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no Maintainer: Marqitos -->
<sect1 xml:id="language.types.type-system">
 <title>Sistema de tipos</title>

 <para>
  PHP utiliza un sistema de tipos nominal con una fuerte relación de subtipado comportamental.
  La relación de subtipado se verifica en la compilación, mientras que la verificación de tipos
  se verifica dinámicamente en el momento de la ejecución.
 </para>

 <para>
  El sistema de tipos de PHP soporta varios tipos atómicos que pueden ser compuestos juntos
  para crear tipos más complejos. Algunos de estos tipos pueden ser escritos en forma de
  <link linkend="language.types.declarations">declaración de tipo</link>.
 </para>

 <sect2 xml:id="language.types.type-system.atomic">
  <title>Tipos atómicos</title>
  <para>
   Algunos tipos atómicos son tipos que están estrechamente integrados en el lenguaje
   y no pueden ser reproducidos con tipos definidos por el usuario.
  </para>

  <para>
   La lista de tipos básicos es la siguiente:
   <itemizedlist>
    <listitem>
     <simpara>Tipos integrados</simpara>
     <itemizedlist>
      <listitem>
       <simpara>
        Tipos escalares:
       </simpara>
       <itemizedlist>
        <listitem>
         <simpara>tipo <type>bool</type></simpara>
        </listitem>
        <listitem>
         <simpara>tipo <type>int</type></simpara>
        </listitem>
        <listitem>
         <simpara>tipo <type>float</type></simpara>
        </listitem>
        <listitem>
         <simpara>tipo <type>string</type></simpara>
        </listitem>
       </itemizedlist>
      </listitem>
      <listitem>
       <simpara>tipo <type>array</type></simpara>
      </listitem>
      <listitem>
       <simpara>tipo <type>object</type></simpara>
      </listitem>
      <listitem>
       <simpara>tipo <type>resource</type></simpara>
      </listitem>
      <listitem>
       <simpara>tipo <type>never</type></simpara>
      </listitem>
      <listitem>
       <simpara>tipo <type>void</type></simpara>
      </listitem>
      <listitem>
       <simpara>
       <link linkend="language.types.relative-class-types">Tipos de clases relativas</link>:
       <type>self</type>, <type>parent</type>, y <type>static</type>
       </simpara>
      </listitem>
     </itemizedlist>
    </listitem>
    <listitem>
     <simpara>
      <link linkend="language.types.singleton">Tipos singleton</link>
     </simpara>
     <itemizedlist>
      <listitem>
       <simpara><type>false</type></simpara>
      </listitem>
      <listitem>
       <simpara><type>true</type></simpara>
      </listitem>
     </itemizedlist>
    </listitem>
    <listitem>
     <simpara>
      Tipos unitarios
     </simpara>
     <itemizedlist>
      <listitem>
       <simpara><type>null</type></simpara>
      </listitem>
     </itemizedlist>
    </listitem>
    <listitem>
     <simpara>
      Tipos definidos por el usuario (generalmente llamados clases-tipos)
     </simpara>
     <itemizedlist>
      <listitem>
       <simpara><link linkend="language.oop5.interfaces">Interfaces</link></simpara>
      </listitem>
      <listitem>
       <simpara><link linkend="language.oop5.basic.class">Clases</link></simpara>
      </listitem>
      <listitem>
       <simpara><link linkend="language.types.enumerations">Enumeraciones</link></simpara>
      </listitem>
     </itemizedlist>
    </listitem>
    <listitem>
     <simpara>tipo <type>callable</type></simpara>
    </listitem>
   </itemizedlist>
  </para>

  <sect3 xml:id="language.types.type-system.atomic.scalar">
   <title>Tipos escalares</title>
   <simpara>
    Un valor se considera escalar si es de tipo <type>int</type>,
    <type>float</type>, <type>string</type> o <type>bool</type>.
   </simpara>
  </sect3>

  <sect3 xml:id="language.types.type-system.atomic.user-defined">
   <title>Tipos definidos por el usuario</title>
   <simpara>
    Es posible definir tipos personalizados con
    <link linkend="language.oop5.interfaces">interfaces</link>,
    <link linkend="language.oop5.basic.class">clases</link> y
    <link linkend="language.types.enumerations">enumeraciones</link>.
    Estos se consideran tipos definidos por el usuario, o tipos de clase.
    Por ejemplo, una clase llamada <literal>Elephant</literal> puede ser definida,
    luego objetos de tipo <literal>Elephant</literal> pueden ser instanciados,
    y una función puede requerir un argumento de tipo <literal>Elephant</literal>.
    </simpara>
   </sect3>
  </sect2>

  <sect2 xml:id="language.types.type-system.composite">
   <title>Tipos compuestos</title>
   <para>
    Es posible combinar varios tipos atómicos en tipos compuestos.
    PHP permite combinar los tipos de la siguiente manera:
  </para>

  <itemizedlist>
   <listitem>
    <simpara>
     Intersección de clases-tipos (interfaces y nombres de clases).
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Unión de tipos.
    </simpara>
   </listitem>
  </itemizedlist>

  <sect3 xml:id="language.types.type-system.composite.intersection">
   <title>Intersección de tipos</title>
   <para>
    Un tipo de intersección acepta valores que satisfacen varias
    declaraciones de tipo de clase, en lugar de una sola.
    Los tipos individuales que forman el tipo de intersección están unidos por el símbolo
    <literal>&amp;</literal>. Por lo tanto, un tipo de intersección compuesto
    por los tipos <literal>T</literal>, <literal>U</literal> y
    <literal>V</literal> se escribe <literal>T&amp;U&amp;V</literal>.
   </para>
  </sect3>

  <sect3 xml:id="language.types.type-system.composite.union">
   <title>Tipos de unión</title>
   <para>
    Un tipo de unión acepta valores de varios tipos diferentes,
    en lugar de uno solo.
    Los tipos individuales que forman el tipo de unión están unidos por el símbolo
    <literal>|</literal>. Por lo tanto, un tipo de unión compuesto
    por los tipos <literal>T</literal>, <literal>U</literal> y
    <literal>V</literal> se escribe <literal>T|U|V</literal>.
    Si uno de los tipos es un tipo de intersección, debe ser puesto entre
    paréntesis para ser escrito en <acronym>DNF</acronym>.
    <literal>T|(X&amp;Y)</literal>.
   </para>
  </sect3>
 </sect2>

 <sect2 xml:id="language.types.type-system.alias">
  <title>Alias de tipo</title>

  <para>
   PHP soporta dos alias de tipo: <type>mixed</type> y
   <type>iterable</type> que corresponde al tipo
   <link linkend="language.types.type-system.composite.union">tipo de unión</link>
   de <literal>object|resource|array|string|float|int|bool|null</literal>
   y <literal>Traversable|array</literal> respectivamente.
  </para>

  <note>
   <simpara>
    PHP no soporta alias de tipo definidos por el usuario.
   </simpara>
  </note>
 </sect2>

</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
