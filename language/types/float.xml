<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: e587d0655e426f97b3fcb431453da5030e743b23 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes Maintainer: PhilDaiguille -->
<!-- CREDITS: DavidA -->

<sect1 xml:id="language.types.float" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Números de punto flotante</title>

 <para>
  Los números de punto flotante (también conocidos como <literal>"floats"</literal>,
  <literal>"doubles"</literal>, o  <literal>"números reales"</literal>)
  pueden ser especificados utilizando las siguientes sintaxis:
 </para>

 <informalexample>
  <programlisting role="php">
<![CDATA[
<?php
$a = 1.234;
$b = 1.2e3;
$c = 7E-10;
$d = 1_234.567; // a partir de PHP 7.4.0
?>
]]>
  </programlisting>
 </informalexample>

 <para>
  Formalmente a partir de PHP 7.4.0 (anteriormente, los guiones bajos no estaban permitidos):
 </para>

 <informalexample>
  <programlisting>
<![CDATA[
LNUM          [0-9]+(_[0-9]+)*
DNUM          ({LNUM}?"."{LNUM}) | ({LNUM}"."{LNUM}?)
EXPONENT_DNUM (({LNUM} | {DNUM}) [eE][+-]? {LNUM})
]]>
  </programlisting>
 </informalexample>

 <para>
  El tamaño de un &float; depende de la plataforma, sin embargo,
  un número máximo de aproximadamente 1.8e308 con una precisión de 14 dígitos es
  un valor común (formato de 64 bits IEEE).
 </para>

 <warning xml:id="warn.float-precision">
  <title>Precisión de los números de punto flotante</title>

  <para>
   Los números de punto flotante tienen una precisión limitada. Aunque dependen del sistema,
   PHP utiliza el formato de precisión decimal IEEE 754, que dará un error relativo máximo del orden de 1.11e-16 (debido a los redondeos). Las operaciones
   aritméticas no elementales pueden dar errores más grandes y, por supuesto, los errores deben ser tenidos en cuenta cuando se realizan múltiples operaciones.
  </para>

  <para>
   Asimismo, los números racionales exactamente representables como números de punto flotante en base 10, como <literal>0.1</literal> o <literal>0.7</literal>, no tienen
   una representación exacta como números de punto flotante en base 2, utilizada internamente, y esto independientemente del tamaño de la mantisa. Por lo tanto, no pueden
   ser convertidos sin una pequeña pérdida de precisión. Esto puede llevar a resultados confusos: por ejemplo, <literal>floor((0.1+0.7)*10)</literal> normalmente devolverá
   <literal>7</literal> en lugar del <literal>8</literal> esperado, ya que la representación interna será algo como <literal>7.9999999999999991118...</literal>.
  </para>

  <para>
   Por lo tanto, nunca se debe confiar en los últimos dígitos de un número
   de punto flotante, y tampoco se debe comparar la igualdad de 2 números de punto flotante
   directamente. Si se necesita una mayor precisión, las
   <link linkend="ref.bc">funciones matemáticas de precisión arbitraria</link>
   y las funciones <link linkend="ref.gmp">gmp</link> están disponibles.
  </para>

  <para>
   Para una explicación "simple", ver el
   <link xlink:href="&url.floating.point.guide;">guía relativa a los números
    de punto flotante</link>.
  </para>

 </warning>

 <sect2 xml:id="language.types.float.casting">
  <title>Convertir a un número de punto flotante</title>

  <sect3 xml:id="language.types.float.casting.from-string">
   <title>Desde cadenas de caracteres</title>

   <simpara>
    Si una cadena es
    <link linkend="language.types.numeric-strings">numérica</link>
    o numérica de cabeza entonces será transformada en su valor de punto flotante
    correspondiente, de lo contrario será convertida a cero(<literal>0</literal>).
   </simpara>
  </sect3>

  <sect3 xml:id="language.types.float.casting.from-other">
   <title>Desde otros tipos</title>

   <para>
    Para los valores de otros tipos, la conversión se realiza convirtiendo
    el valor primero en <type>int</type> y luego en <type>float</type>. Ver
    <link linkend="language.types.integer.casting">conversión a entero</link>
    para más información.
   </para>

   <note>
    <para>
     Como algunos tipos tienen un comportamiento indefinido al convertirse
     en <type>int</type>, esto también es el caso al convertirse en
     <type>float</type>.
    </para>
   </note>
  </sect3>
 </sect2>

 <sect2 xml:id="language.types.float.comparison">
  <title>Comparación de números de punto flotante</title>

  <para>
   Como se mencionó anteriormente, la prueba de igualdad de valores de
   números de punto flotante es problemática, debido a la forma en que se representan internamente. Sin embargo, existen formas de
   realizar esta comparación.
  </para>

  <para>
   Para probar la igualdad de valores de números de punto flotante, se utiliza un límite superior del error relativo al redondeo. Este valor es conocido
   como el epsilon de la máquina, o el <literal>unit roundoff</literal>,
   y es la diferencia más pequeña aceptable en los cálculos.
  </para>

  <simpara>
   <varname>$a</varname> y <varname>$b</varname> son iguales en 5 números
   después de la coma.
  </simpara>

  <example>
   <title>Comparación de números de punto flotante</title>
   <programlisting role="php">
<![CDATA[
<?php
$a = 1.23456789;
$b = 1.23456780;
$epsilon = 0.00001;

if( abs($a - $b) < $epsilon) {
    echo "true";
}
?>
]]>
   </programlisting>
  </example>
 </sect2>

 <sect2 xml:id="language.types.float.nan">
  <title>NaN</title>
  <para>
   Algunas operaciones numéricas pueden dar como resultado un valor
   representado por la constante <constant>NAN</constant>. Este resultado representa
   un valor indefinido o no representable en cálculos con números de punto flotante. Cualquier comparación, incluso estricta de este valor con
   otro valor, incluyendo esta constante misma, excepto si es igual a &true;, dará un valor de &false;.
  </para>
  <para>
   Debido a que <constant>NAN</constant> representa cualquier número de valores
   diferentes, <constant>NAN</constant> no debe ser comparado con otros valores,
   incluyendo esta constante misma, y en su lugar, debe ser verificado
   utilizando la función <function>is_nan</function>.
  </para>
 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
