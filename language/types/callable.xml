<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: c897161ca5a62a887295c695adc161b8fde5d772 Maintainer: seros Status: ready -->
<!-- Reviewed: yes Maintainer: seros -->
<sect1 xml:id="language.types.callable">
 <title>Llamadas de retorno (Callbacks / Callables)</title>

 <para>
  Las devoluciones de llamada pueden indicarse mediante la declaración de tipo <type>callable</type>.
 </para>

 <para>
  Algunas funciones como <function>call_user_func</function> o
  <function>usort</function> aceptan como parámetro funciones de llamada de retorno definidas por
  el usuario. Las funciones de llamadas de retorno no sólo pueden ser funciones simples, sino también
  métodos de un <type>object</type>, incluyendo métodos de clase estáticos.
 </para>

 <sect2 xml:id="language.types.callable.passing">
  <title>Pasar una función de llamada de retorno</title>

  <para>
   Una función de PHP se pasa por su nombre como un <type>string</type>. Se puede utilizar
   cualquier función nativa o definida por el usuario, exceptuando contrucciones del lenguaje, tales como:
   <function>array</function>, <function>echo</function>,
   <function>empty</function>, <function>eval</function>,
   <function>exit</function>, <function>isset</function>,
   <function>list</function>, <function>print</function> o
   <function>unset</function>.
  </para>

  <para>
   Un método de un <type>object</type> instanciado se pasa como un
   <type>array</type> que contiene un <type>object</type> en el índice 0 y el
   nombre del método en el índice 1. Está permitido el acceso a métodos protegidos
   y privados desde dentro de una clase.
  </para>

  <para>
   Los métodos de clase estáticos también se pueden pasar sin instanciar un
   <type>object</type> de esa clase, ya sea pasando el nombre de la clase
   en lugar de un <type>object</type> en el índice 0, o pasando
   <literal>'NombreDeClase::nombreDeMetodo'</literal>.
  </para>

  <para>
   A parte de las funciones comunes definidas por el usuario,
   <link linkend="functions.anonymous">Funciones anónimas</link> y
   <link linkend="functions.arrow">Funciones flecha</link> también pueden
   pasarse como parámetro de devolución de llamada.
  </para>
  <note>
   <para>
    A partir de PHP 8.1.0, las funciones anónimas también pueden crearse
    usando la <link linkend="functions.first_class_callable_syntax">sintaxis de callable de primera clase</link>.
   </para>
  </note>

  <para>
     Generalmente, cualquier objeto que implemente <link linkend="object.invoke">__invoke()</link>
     también puede pasarse como parámetro de devolución de llamada.
  </para>

  <para>
   <example>
    <title>
     Ejemplos de funciones de llamadas de retorno
    </title>
    <programlisting role="php">
<![CDATA[
<?php

// Un ejemplo de función de llamada de retorno
function mi_función_de_llamada_de_retorno() {
    echo '¡hola mundo!';
}

// Un ejemplo de método de llamada de retorno
class MiClase {
    static function miMétodoDeLlamadaDeRetorno() {
        echo '¡Hola Mundo!';
    }
}

// Tipo 1: Llamada de retorno simple
call_user_func('mi_función_de_llamada_de_retorno');

// Tipo 2: Llamada a un método de clase estático
call_user_func(array('MiClase', 'miMétodoDeLlamadaDeRetorno'));

// Tipo 3: Llamada al método de un objeto
$obj = new MiClase();
call_user_func(array($obj, 'miMétodoDeLlamadaDeRetorno'));

// Tipo 4: Llamada a un método de clase estático
call_user_func('MiClase::miMétodoDeLlamadaDeRetorno');

// Tipo 5: Llamada a un método de clase estático relativo
class A {
    public static function quién() {
        echo "A\n";
    }
}

class B extends A {
    public static function quién() {
        echo "B\n";
    }
}

call_user_func(array('B', 'parent::quién')); // A, obsoleto a partir de PHP 8.2.0

// Tipe 6: Los objetos que implementan __invoke se pueden emplear como retrollamadas
class C {
    public function __invoke($nombre) {
        echo 'Hola ', $nombre, "\n";
    }
}

$c = new C();
call_user_func($c, 'PHP!');
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>
     Ejemplo de retrollamada utilizando un cierre
    </title>
    <programlisting role="php">
<![CDATA[
<?php
// Nuestro cierre
$doble = function($a) {
    return $a * 2;
};

// Este es nuestro rango de números
$números = range(1, 5);

// Usar el cierre como llamada de retorno para
// doblar el valor de cada elemento de nuestro
// rango
$números_nuevos = array_map($doble, $números);

print implode(' ', $números_nuevos);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
2 4 6 8 10
]]>
    </screen>
   </example>
  </para>
  &note.func-callback-exceptions;
 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
