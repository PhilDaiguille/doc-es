<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: ffbe6525350c91d58e1d5b7a52c46c911035c8e0 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->

<sect1 xml:id="function.include" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>include</title>
 <?phpdoc print-version-for="include"?>
 <simpara>
  La expresión de lenguaje <literal>include</literal> incluye y ejecuta
  el fichero especificado en el argumento.
 </simpara>
 <simpara>
  Esta documentación se aplica también a la instrucción de lenguaje
  <function>require</function>.
 </simpara>
 <simpara>
  Los ficheros son incluidos según la ruta del fichero proporcionado; si no se proporciona ninguno,
  se verificará el <link linkend="ini.include-path">include_path</link>.
  Si el fichero no se encuentra en el <link linkend="ini.include-path">include_path</link>,
  <literal>include</literal> verificará en el directorio del script que llama y en el directorio de trabajo actual antes de fallar.
  La instrucción <literal>include</literal> emitirá <constant>E_WARNING</constant> si no puede encontrar el fichero;
  este comportamiento es diferente de <function>require</function>, que emitirá <constant>E_ERROR</constant>.
 </simpara>
 <simpara>
  Tenga en cuenta que <literal>include</literal> y <literal>require</literal>
  lanzarán errores de tipo <constant>E_WARNING</constant>, si el fichero no es accesible, antes de lanzar un error de tipo
  <constant>E_WARNING</constant> o <constant>E_ERROR</constant>, respectivamente.
 </simpara>
 <simpara>
  Si se define una ruta, absoluta (comenzando por una letra de unidad seguida de
  <literal>\</literal> para Windows, o <literal>/</literal> para Unix/Linux)
  o relativa (comenzando por . o ..), el <link linkend="ini.include-path">include_path</link>
  será ignorado. Por ejemplo, si un nombre de fichero comienza por <literal>../</literal>,
  PHP buscará en el directorio padre para encontrar el fichero especificado.
 </simpara>
 <simpara>
  Para más información sobre cómo PHP maneja los ficheros incluidos así como la ruta de inclusión,
  consulte la documentación relativa al <link linkend="ini.include-path">include_path</link>.
 </simpara>
 <simpara>
  Cuando un fichero es incluido, el código que lo compone hereda el
  <link linkend="language.variables.scope">ámbito de las variables</link>
  de la línea donde aparece la inclusión. Todas las variables disponibles en esa
  línea en el fichero que llama estarán disponibles en el fichero llamado, a
  partir de ese punto. Sin embargo, todas las funciones y clases definidas en
  el fichero incluido tienen un ámbito global.
 </simpara>
 <para>
  <example>
   <title>Ejemplo con <literal>include</literal></title>
   <programlisting role="php">
<![CDATA[
vars.php
<?php

$color = 'verde';
$fruta = 'manzana';

?>

test.php
<?php

echo "Una $fruta $color"; // Una

include 'vars.php';

echo "Una $fruta $color"; // Una manzana verde

?>
]]>
   </programlisting>
  </example>
 </para>
 <simpara>
  Si la inclusión ocurre dentro de una función,
  el código incluido será considerado como parte de la
  función. Esto modifica, por lo tanto, el contexto de las variables accesibles.
  Una excepción a esta regla: las <link
  linkend="language.constants.predefined">constantes mágicas</link> son analizadas
  por el analizador antes de que la inclusión ocurra.
 </simpara>
 <para>
  <example>
   <title>Inclusión de ficheros en una función</title>
   <programlisting role="php">
<![CDATA[
<?php

function foo()
{
    global $color;

    include 'vars.php';

    echo "Una $fruta $color";
}

/* vars.php está en el contexto de foo()     *
 * por lo tanto $fruta no está disponible fuera de   *
 * esta función. $color lo está, ya que es  *
 * una variable global                       */

foo();                      // Una manzana verde
echo "Una $fruta $color"; // Una  verde

?>
]]>
   </programlisting>
  </example>
 </para>
 <simpara>
  Es importante señalar que cuando un fichero es
  <function>include</function> o <function>require</function>,
  los errores de análisis aparecerán en HTML
  al principio del fichero, y el análisis del fichero
  padre no será interrumpido. Por esta razón, el código
  que está en el fichero debe ser colocado entre
  <link linkend="language.basic-syntax.phpmode">las etiquetas
  habituales de PHP</link>.
 </simpara>
 <simpara>
  Si los <link linkend="ini.allow-url-include">gestores de inclusión de URL</link>
  están activados en PHP,
  se puede localizar el fichero con una URL (a través de HTTP o
  bien con un gestor adaptado: ver <xref linkend="wrappers"/>
  para una lista de los protocolos), en lugar de una simple ruta
  local. Si el servidor remoto interpreta el fichero como código
  PHP, las variables pueden ser transmitidas al servidor remoto
  a través de la URL y el método GET. Esto no es, estrictamente
  hablando, lo mismo que heredar el contexto de la variable.
  El fichero incluido es en realidad un script ejecutado de forma remota,
  y su resultado es incluido en el código actual.
 </simpara>
 <para>
  <example>
   <title>Uso de la instrucción <literal>include</literal> a través de HTTP</title>
   <programlisting role="php">
<![CDATA[
<?php

/* Este ejemplo asume que www.example.com está configurado para tratar
 * los ficheros .php y no los ficheros .txt. Además,
 * 'Work' significa aquí que las variables
 * $foo y $bar están disponibles en el fichero incluido
 */

// No funciona: file.txt no ha sido tratado por www.example.com como PHP
include 'http://www.example.com/file.txt?foo=1&bar=2';

// No funciona: el script busca un fichero llamado
// 'file.php?foo=1&bar=2' en el sistema local
include 'file.php?foo=1&bar=2';

// Éxito
include 'http://www.example.com/file.php?foo=1&bar=2';
?>
]]>
   </programlisting>
  </example>
 </para>
 <warning>
  <title>Alerta de seguridad</title>
  <para>
   Un fichero remoto puede ser tratado en el servidor remoto
   (dependiendo de la extensión del fichero y si el servidor remoto
   ejecuta PHP o no) pero siempre debe producir un script PHP válido
   porque será tratado en el servidor local. Si el fichero del servidor
   remoto debe ser tratado en el lugar y mostrado únicamente,
   <function>readfile</function> es una función mucho más adecuada.
   De lo contrario, se debe tener cuidado de asegurar el script remoto
   para que produzca un código válido y deseado.
   </para>
 </warning>
 <para>
  Véase también
  <link linkend="features.remote-files">trabajar con ficheros remotos</link>,
  <function>fopen</function> y
  <function>file</function> para información relacionada.
 </para>
 <simpara>
  Gestión del retorno: <literal>include</literal> devuelve &false; en caso
  de error y emite una advertencia. Las inclusiones con éxito, incluyendo si
  son sobrescritas por el fichero incluido, devuelven
  <literal>1</literal>. Es posible ejecutar la estructura de lenguaje
  <function>return</function> dentro de un fichero
  incluido para determinar el proceso en ese fichero, y devolver
  al script que lo llamó. Además, es posible devolver valores desde ficheros incluidos.
  Se puede tomar el valor
  desde la llamada al fichero incluido como se desee desde una
  función normal. Esto no es posible, sin embargo, cuando se incluyen ficheros remotos,
  y esto, mientras la salida del fichero remoto no tenga
  <link linkend="language.basic-syntax.phpmode">etiquetas PHP de inicio
  y fin válidas</link> (al igual que para los ficheros locales).
  Se pueden declarar las variables necesarias dentro de estas etiquetas
  y serán introducidas en el lugar donde el fichero fue incluido.
 </simpara>
 <para>
  Como <literal>include</literal> es una estructura de lenguaje particular,
  los paréntesis no son necesarios alrededor del argumento. Tenga cuidado
  cuando compare el valor devuelto.
  <example>
   <title>Comparación del valor de retorno de una inclusión</title>
   <programlisting role="php">
<![CDATA[
<?php
// No funciona, evaluado como include(('vars.php') == TRUE), es decir, include('1')
if (include('vars.php') == TRUE) {
    echo 'OK';
}

// Funciona
if ((include 'vars.php') == TRUE) {
    echo 'OK';
}
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  <example>
   <title><literal>include</literal> y <function>return</function></title>
   <programlisting role="php">
<![CDATA[
return.php
<?php

$var = 'PHP';

return $var;

?>

noreturn.php
<?php

$var = 'PHP';

?>

testreturns.php
<?php

$foo = include 'return.php';

echo $foo; // muestra 'PHP'

$bar = include 'noreturn.php';

echo $bar; // muestra 1

?>
]]>
   </programlisting>
  </example>
 </para>
 <simpara>
  <literal>$bar</literal> tiene el valor de &one; porque
  la inclusión fue exitosa. Note la diferencia entre los dos
  ejemplos anteriores. El primero usa el comando
  <function>return</function>
  en el fichero incluido, mientras que el segundo no lo hace.
  Si el fichero no puede ser incluido, &false; es devuelto y un error
  de nivel <constant>E_WARNING</constant> es enviado.
 </simpara>
 <para>
  Si hay funciones definidas en el fichero incluido, pueden ser
  utilizadas en el fichero principal si están antes del
  <function>return</function> o después.
  Si el fichero es incluido dos veces, PHP emitirá un error fatal porque las
  funciones ya han sido declaradas.
  Se recomienda usar <function>include_once</function>
  en lugar de verificar si el fichero ya ha sido incluido y por lo tanto devolver
  condicionalmente la inclusión del fichero.
 </para>
 <simpara>
  Otra forma de incluir un fichero PHP en una variable es capturar
  la salida usando las funciones de
  <link linkend="ref.outcontrol">control de salida</link> con
  <literal>include</literal>. Por ejemplo:
 </simpara>
 <para>
  <example>
   <title>Uso de la salida del buffer para incluir un fichero PHP en
   una cadena</title>
   <programlisting role="php">
<![CDATA[
<?php
$string = get_include_contents('somefile.php');

function get_include_contents($filename) {
    if (is_file($filename)) {
        ob_start();
        include $filename;
        return ob_get_clean();
    }
    return false;
}

?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  Para incluir automáticamente ficheros en sus scripts, vea también
  las opciones de configuración
  <link linkend="ini.auto-prepend-file">auto_prepend_file</link> y
  <link linkend="ini.auto-append-file">auto_append_file</link>
  del &php.ini;.
 </para>

 &note.language-construct;

 <simpara>
  Véase también
  <function>require</function>,
  <function>require_once</function>,
  <function>include_once</function>,
  <function>get_included_files</function>,
  <function>readfile</function>, <function>virtual</function>, y
  <link linkend="ini.include-path">include_path</link>.
 </simpara>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
