<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 7104ee97ced1768a3231588dfc0bc0d7eb1117ad Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes -->

<sect1 xml:id="control-structures.do.while" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>do-while</title>
 <?phpdoc print-version-for="dowhile"?>
 <simpara>
  Las bucles <literal>do-while</literal> se parecen mucho
  a las bucles <literal>while</literal>, pero la expresión es
  evaluada al final de cada iteración en lugar
  de al principio. La principal diferencia con respecto
  a la bucle <literal>while</literal> es que la
  primera iteración de la bucle
  <literal>do-while</literal> siempre se ejecuta
  (la expresión solo se evalúa al final de
  la iteración), lo cual no ocurre cuando se utiliza una bucle <literal>while</literal> (la condición
  se verifica al inicio de cada iteración, y si resulta &false; desde el principio, la bucle se detendrá de inmediato).
 </simpara>
 <para>
  Solo existe una sintaxis posible para las bucles <literal>do-while</literal>:

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$i = 0;
do {
    echo $i;
} while ($i > 0);
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <simpara>
  La bucle anterior solo se ejecutará
  una vez, ya que cuando la expresión es
  evaluada, resulta &false; (ya que
  la variable <varname>$i</varname> no es mayor que 0) y la ejecución
  de la bucle se detiene.
 </simpara>
 <para>
  Los usuarios familiarizados con C están acostumbrados a
  un uso diferente de las bucles
  <literal>do-while</literal>, que permite detener
  la ejecución de la bucle en medio de las instrucciones, encapsulando en un <literal>do-while</literal>(0) la
  función <link linkend="control-structures.break"><literal>break</literal></link>.
  El siguiente código muestra un uso posible:
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
do {
    if ($i < 5) {
        echo "i no es suficientemente grande";
        break;
    }
    $i *= $factor;
    if ($i < $minimum_limit) {
        break;
    }
   echo "i es bueno";

    /* ...procesamiento de i... */

} while (0);
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <simpara>
  Es posible utilizar el operador
  <link linkend="control-structures.goto"><literal>goto</literal></link>
  en lugar de este truco.
 </simpara>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
