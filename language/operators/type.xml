<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 16934048f79c6e117cd16a23c09c1b2ea502e284 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="language.operators.type">
 <title>Operadores de tipos</title>
 <titleabbrev>Tipo</titleabbrev>
 <para>
  <literal>instanceof</literal> se utiliza para determinar si una variable PHP
  es un objeto instanciado de una cierta
  <link linkend="language.oop5.basic.class">clase</link>:
  <example>
   <title>Uso de <literal>instanceof</literal> con clases</title>
   <programlisting role="php">
<![CDATA[
<?php
class MiClase
{
}
class NoMiClase
{
}
$a = new MiClase;

var_dump($a instanceof MiClase);
var_dump($a instanceof NoMiClase);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
bool(true)
bool(false)
]]>
   </screen>
  </example>
 </para>
 <para>
  <literal>instanceof</literal> también puede ser utilizado para determinar
  si una variable es un objeto instanciado de una clase que hereda de una clase padre:
  <example>
   <title>Uso de <literal>instanceof</literal> con clases heredadas</title>
   <programlisting role="php">
<![CDATA[
<?php
class ClasePadre
{
}
class MiClase extends ClasePadre
{
}
$a = new MiClase;

var_dump($a instanceof MiClase);
var_dump($a instanceof ClasePadre);
?>
     ]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
bool(true)
bool(true)
]]>
   </screen>
  </example>
 </para>
 <para>
  Para verificar si un objeto <emphasis>no es</emphasis> una instancia de una clase,
  el <link linkend="language.operators.logical">operador lógico <literal>not</literal></link>
  puede ser utilizado.
  <example>
   <title>Uso de <literal>instanceof</literal> para verificar que el objeto
    <emphasis>no es</emphasis> una instancia de la clase</title>
   <programlisting role="php">
<![CDATA[
<?php
class MiClase
{
}
$a = new MiClase;
var_dump(!($a instanceof stdClass));
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
bool(true)
]]>
   </screen>
  </example>
 </para>
 <para>
  Y finalmente, <literal>instanceof</literal> puede ser utilizado para determinar
  si una variable es un objeto instanciado de una clase que implementa una
  <link linkend="language.oop5.interfaces">interface</link>:
  <example>
   <title>Uso de <literal>instanceof</literal> para una interface</title>
   <programlisting role="php">
<![CDATA[
<?php
interface MiInterface
{
}
class MiClase implements MiInterface
{
}
$a = new MiClase;

var_dump($a instanceof MiClase);
var_dump($a instanceof MiInterface);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
bool(true)
bool(true)
]]>
   </screen>
  </example>
 </para>
 <para>
  Aunque <literal>instanceof</literal> se utiliza habitualmente con un nombre
  de clase literal, también puede ser utilizado con otro objeto o una cadena
  representando una variable:
  <example>
   <title>Uso de <literal>instanceof</literal> con otras variables</title>
   <programlisting role="php">
<![CDATA[
<?php
interface MiInterface
{
}
class MiClase implements MiInterface
{
}
$a = new MiClase;
$b = new MiClase;
$c = 'MiClase';
$d = 'NoMiClase';
var_dump($a instanceof $b); // $b es un objeto de la clase MiClase
var_dump($a instanceof $c); // $c es una cadena 'MiClase'
var_dump($a instanceof $d); // $d es una cadena 'NoMiClase'
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
bool(true)
bool(true)
bool(false)
]]>
   </screen>
  </example>
 </para>
 <para>
  instanceof no lanza ningún error si la variable probada no es
  un objeto, simplemente devolverá &false;. Sin embargo, las constantes
  no están permitidas.
  <example>
   <title>Uso de <literal>instanceof</literal> para probar otras variables</title>
   <programlisting role="php">
<![CDATA[
<?php
$a = 1;
$b = NULL;
$c = fopen('/tmp/', 'r');
var_dump($a instanceof stdClass); // $a es un entero
var_dump($b instanceof stdClass); // $b vale NULL
var_dump($c instanceof stdClass); // $c es un recurso
var_dump(FALSE instanceof stdClass);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
bool(false)
bool(false)
bool(false)
PHP Fatal error:  instanceof espera una instancia de objeto, constante dada
]]>
   </screen>
  </example>
 </para>
 <para>
  A partir de PHP 7.3.0, las constantes están permitidas en el lado izquierdo
  del operador <literal>instanceof</literal>.
  <example>
   <title>Uso de <literal>instanceof</literal> para probar constantes</title>
   <programlisting role="php">
<![CDATA[
<?php
var_dump(FALSE instanceof stdClass);
?>
]]>
   </programlisting>
   &example.outputs.73;
   <screen>
<![CDATA[
bool(false)
]]>
   </screen>
  </example>
 </para>
 <para>
  A partir de PHP 8.0.0, <literal>instanceof</literal> puede ahora ser
  utilizado con expresiones arbitrarias.
  La expresión debe estar entre paréntesis y producir una <type>string</type>.
  <!-- RFC: https://wiki.php.net/rfc/variable_syntax_tweaks -->
  <example>
   <title>Uso de <literal>instanceof</literal> con una expresión arbitraria</title>
   <programlisting role="php">
<![CDATA[
<?php

class ClaseA extends \stdClass {}
class ClaseB extends \stdClass {}
class ClaseC extends ClaseB {}
class ClaseD extends ClaseA {}

function obtenerAlgunaClase(): string
{
    return ClaseA::class;
}

var_dump(new ClaseA instanceof ('std' . 'Class'));
var_dump(new ClaseB instanceof ('Class' . 'B'));
var_dump(new ClaseC instanceof ('Class' . 'A'));
var_dump(new ClaseD instanceof (obtenerAlgunaClase()));
?>
]]>
   </programlisting>
   &example.outputs.8;
   <screen>
<![CDATA[
bool(true)
bool(true)
bool(false)
bool(true)
]]>
   </screen>
  </example>
 </para>
 <simpara>
  El operador <literal>instanceof</literal> tiene una variante funcional
  con la función <function>is_a</function>.
 </simpara>

 <sect2 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>get_class</function></member>
    <member><function>is_a</function></member>
   </simplelist>
  </para>
 </sect2>
</sect1>
