<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 16934048f79c6e117cd16a23c09c1b2ea502e284 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="language.operators.precedence">
 <title>La prioridad de los operadores</title>
 <titleabbrev>Prioridad de los operadores</titleabbrev>
 <para>
  La prioridad de los operadores especifica el orden en el que deben ser analizadas las valores.
  Por ejemplo, en la expresión <literal>1 + 5 * 3</literal>, el resultado es
  <literal>16</literal> y no <literal>18</literal>, ya que la multiplicación ("*") tiene una prioridad superior a la suma ("+").
  Las parentesis pueden ser utilizados para forzar la prioridad, si es necesario. Por ejemplo: <literal>(1 + 5) * 3</literal> dará
  <literal>18</literal>.
 </para>
 <para>
  Cuando los operadores tienen una prioridad igual, su asociatividad decide la forma en que los operadores son agrupados. Por ejemplo,
  "-" es una asociatividad por la izquierda, así <literal>1 - 2 - 3</literal> es agrupado de esta manera <literal>(1 - 2) - 3</literal> y será evaluado
  a <literal>-4</literal>. Por otro lado, "=" es una asociatividad por la derecha, así, <literal>$a = $b = $c</literal> es agrupado de esta manera
  <literal>$a = ($b = $c)</literal>.
 </para>

 <para>
  Los operadores, cuya prioridad es igual, que no son asociativos, no pueden ser utilizados entre ellos, por ejemplo,
  <literal>1 &lt; 2 &gt; 1</literal> está prohibido en PHP. La expresión
  <literal>1 &lt;= 1 == 1</literal> por el contrario, está permitida, ya que el operador
  <literal>==</literal> tiene una precedencia inferior al operador
  <literal>&lt;=</literal>.
 </para>
 <para>
  La asociatividad tiene sentido únicamente para los operadores binarios (y ternarios).
  Los operadores unitarios son prefijos o sufijos, por lo que esta noción no es aplicable. Por ejemplo <literal>!!$a</literal> puede ser agrupado únicamente de la siguiente manera <literal>!(!$a)</literal>.
 </para>
 <para>
  El uso de parentesis, incluso cuando no son necesarios, permite mejorar la legibilidad del código realizando agrupamientos explícitos en lugar de imaginar la prioridad de los operadores y sus asociatividades.
 </para>
 <para>
  La tabla siguiente lista los operadores por orden de prioridad, con la prioridad más alta en la parte superior. Los operadores en la misma línea tienen una prioridad equivalente (por lo tanto, la asociatividad decide el agrupamiento).
  <table>
   <title>Prioridad de los operadores</title>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>Asociatividad</entry>
      <entry>Operadores</entry>
      <entry>Información adicional</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>(n/a)</entry>
      <entry>
       <literal>clone</literal>
       <literal>new</literal>
      </entry>
      <entry><link linkend="language.oop5.cloning">clone</link> y <link linkend="language.oop5.basic.new">new</link></entry>
     </row>
     <row>
      <entry>derecha</entry>
      <entry><literal>**</literal></entry>
      <entry><link linkend="language.operators.arithmetic">aritmética</link></entry>
     </row>
     <row>
      <entry>(n/a)</entry>
      <entry>
       <literal>+</literal>
       <literal>-</literal>
       <literal>++</literal>
       <literal>--</literal>
       <literal>~</literal>
       <literal>(int)</literal>
       <literal>(float)</literal>
       <literal>(string)</literal>
       <literal>(array)</literal>
       <literal>(object)</literal>
       <literal>(bool)</literal>
       <literal>@</literal>
      </entry>
      <entry>
       <link linkend="language.operators.arithmetic">aritmética</link> (unario <literal>+</literal> y <literal>-</literal>),
       <link linkend="language.operators.increment">incremento/decremento</link>
       <link linkend="language.operators.bitwise">a nivel de bits</link>,
       <link linkend="language.types.typecasting">conversión de tipo</link>&listendand;
       <link linkend="language.operators.errorcontrol">control de errores</link>
      </entry>
     </row>
     <row>
      <entry>izquierda</entry>
      <entry><literal>instanceof</literal></entry>
      <entry>
       <link linkend="language.operators.type">tipo</link>
      </entry>
     </row>
     <row>
      <entry>(n/a)</entry>
      <entry><literal>!</literal></entry>
      <entry>
       <link linkend="language.operators.logical">lógico</link>
      </entry>
     </row>
     <row>
      <entry>izquierda</entry>
      <entry>
       <literal>*</literal>
       <literal>/</literal>
       <literal>%</literal>
      </entry>
      <entry>
       <link linkend="language.operators.arithmetic">aritmética</link>
      </entry>
     </row>
     <row>
      <entry>izquierda</entry>
      <entry>
       <literal>+</literal>
       <literal>-</literal>
       <literal>.</literal>
      </entry>
      <entry>
       <link linkend="language.operators.arithmetic">aritmética</link>
       (binario <literal>+</literal> y <literal>-</literal>),
       <link linkend="language.operators.array">array</link>&listendand;
       <link linkend="language.operators.string">string</link>
       (<literal>.</literal> anterior a PHP 8.0.0)
      </entry>
     </row>
     <row>
      <entry>izquierda</entry>
      <entry>
       <literal>&lt;&lt;</literal>
       <literal>&gt;&gt;</literal>
      </entry>
      <entry>
       <link linkend="language.operators.bitwise">bitwise</link>
      </entry>
     </row>
     <row>
      <entry>izquierda</entry>
      <entry><literal>.</literal></entry>
      <entry>
       <link linkend="language.operators.string">string</link> (a partir de PHP 8.0.0)
      </entry>
     </row>
     <row>
      <entry>no asociativo</entry>
      <entry>
       <literal>&lt;</literal>
       <literal>&lt;=</literal>
       <literal>&gt;</literal>
       <literal>&gt;=</literal>
      </entry>
      <entry>
       <link linkend="language.operators.comparison">comparación</link>
      </entry>
     </row>
     <row>
      <entry>no asociativo</entry>
      <entry>
       <literal>==</literal>
       <literal>!=</literal>
       <literal>===</literal>
       <literal>!==</literal>
       <literal>&lt;&gt;</literal>
       <literal>&lt;=&gt;</literal>
      </entry>
      <entry>
       <link linkend="language.operators.comparison">comparación</link>
      </entry>
     </row>
     <row>
      <entry>izquierda</entry>
      <entry><literal>&amp;</literal></entry>
      <entry>
       <link linkend="language.operators.bitwise">bitwise</link>&listendand;
       <link linkend="language.references">referencias</link></entry>
     </row>
     <row>
      <entry>izquierda</entry>
      <entry><literal>^</literal></entry>
      <entry>
       <link linkend="language.operators.bitwise">bitwise</link>
      </entry>
     </row>
     <row>
      <entry>izquierda</entry>
      <entry><literal>|</literal></entry>
      <entry>
       <link linkend="language.operators.bitwise">bitwise</link>
      </entry>
     </row>
     <row>
      <entry>izquierda</entry>
      <entry><literal>&amp;&amp;</literal></entry>
      <entry>
       <link linkend="language.operators.logical">lógico</link>
      </entry>
     </row>
     <row>
      <entry>izquierda</entry>
      <entry><literal>||</literal></entry>
      <entry>
       <link linkend="language.operators.logical">lógico</link>
      </entry>
     </row>
     <row>
      <entry>derecha</entry>
      <entry><literal>??</literal></entry>
      <entry>
       <link linkend="language.operators.comparison.coalesce">coalescencia nula</link>
      </entry>
     </row>
     <row>
      <entry>no asociativo</entry>
      <entry><literal>? :</literal></entry>
      <entry>
       <link linkend="language.operators.comparison.ternary">ternario</link>
       (izquierda--asociativo anterior a PHP 8.0.0)
      </entry>
     </row>
     <row>
      <entry>derecha</entry>
      <entry>
       <literal>=</literal>
       <literal>+=</literal>
       <literal>-=</literal>
       <literal>*=</literal>
       <literal>**=</literal>
       <literal>/=</literal>
       <literal>.=</literal>
       <literal>%=</literal>
       <literal>&amp;=</literal>
       <literal>|=</literal>
       <literal>^=</literal>
       <literal>&lt;&lt;=</literal>
       <literal>&gt;&gt;=</literal>
       <literal>??=</literal>
      </entry>
      <entry>
       <link linkend="language.operators.assignment">asignación</link>
      </entry>
     </row>
     <row>
      <entry>(n/a)</entry>
      <entry><literal>yield from</literal></entry>
      <entry>
       <link linkend="control-structures.yield.from">yield from</link>
      </entry>
     </row>
     <row>
      <entry>(n/a)</entry>
      <entry><literal>yield</literal></entry>
      <entry>
       <link linkend="control-structures.yield">yield</link>
      </entry>
     </row>
     <row>
      <entry>(n/a)</entry>
      <entry><literal>print</literal></entry>
      <entry><function>print</function></entry>
     </row>
     <row>
      <entry>izquierda</entry>
      <entry><literal>and</literal></entry>
      <entry>
       <link linkend="language.operators.logical">lógico</link>
      </entry>
     </row>
     <row>
      <entry>izquierda</entry>
      <entry><literal>xor</literal></entry>
      <entry>
       <link linkend="language.operators.logical">lógico</link>
      </entry>
     </row>
     <row>
      <entry>izquierda</entry>
      <entry><literal>or</literal></entry>
      <entry>
       <link linkend="language.operators.logical">lógico</link>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </para>
 <para>
  <example>
   <title>Asociatividad</title>
   <programlisting role="php">
    <![CDATA[
<?php
$a = 3 * 3 % 5; // (3 * 3) % 5 = 4
// La asociatividad de los operadores ternarios difiere de C/C++
var_dump($a);

$a = 1;
$b = 2;
$a = $b += 3; // $a = ($b += 3) -> $a = 5, $b = 5
var_dump($a, $b);
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  El operador ternario requiere específicamente el uso de parentesis para levantar la ambigüedad de la prioridad.
 </para>
 <para>
  <example>
   <title>Precedencia explícita</title>
   <programlisting role="php">
<![CDATA[
<?php
$a = true ? 0 : (true ? 1 : 2);
var_dump($a);

// Esto ya no está permitido a partir de PHP 8
// $a = true ? 0 : true ? 1 : 2;
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  La prioridad y la asociatividad del operador determinan únicamente la forma en que las expresiones son agrupadas; no especifican el orden de la evaluación. PHP no especifica (de manera general) el orden en que una expresión es evaluada y el código que asume un orden específico de evaluación no debería existir, ya que el comportamiento puede cambiar entre las diferentes versiones de PHP o según el código circundante.
  <example>
   <title>Orden de evaluación indefinido</title>
   <programlisting role="php" annotations="non-interactive">
    <![CDATA[
<?php
$a = 1;
echo $a + $a++; // puede mostrar 2 o 3

$i = 1;
$array[$i] = $i++; // puede definir el índice 1 o 2
?>
]]>
   </programlisting>
  </example>
  <example>
   <title>Precedencia de <literal>+</literal>, <literal>-</literal> y <literal>.</literal></title>
   <programlisting role="php">
<![CDATA[
<?php
$x = 4;

// Esta línea puede causar una salida inesperada :
echo "x menos uno es igual a" . $x-1 . ", en todo caso espero\n";

// la precedencia deseada puede ser reforzada utilizando parentesis. :
echo "x menos uno es igual a" . ($x-1) . ", en todo caso espero\n";

// Esto no está permitido, y levanta una TypeError :
echo ("x menos uno es igual a" . $x) - 1 . ", en todo caso espero\n";
?>
]]>
  </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
-1, en todo caso espero
-1, en todo caso espero
Fatal error: Uncaught TypeError: Unsupported operand types: string - int
]]>
   </screen>
  </example>
  <example>
   <title>Antes de PHP 8, <literal>+</literal>, <literal>-</literal> y <literal>.</literal> tenían la misma precedencia</title>
   <programlisting role="php" annotations="non-interactive">
<![CDATA[
<?php
$x = 4;
// Esta línea puede causar una salida inesperada :
echo "x menos uno es igual a" . $x-1 . ", en todo caso espero\n";

// porque es evaluada como la línea siguiente (anterior a PHP 8.0.0) :
echo (("x menos uno es igual a" . $x) - 1) . ", en todo caso espero\n";

// la precedencia deseada puede ser reforzada utilizando parentesis. :
echo "x menos uno es igual a" . ($x-1) . ", en todo caso espero\n";

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
    <![CDATA[
-1, en todo caso espero
-1, en todo caso espero
x menos uno es igual 3, en todo caso espero
]]>
   </screen>
  </example>
 </para>
 <note>
  <para>
   Aunque <literal>=</literal> tiene prioridad sobre la mayoría de los operadores, PHP ejecutará expresiones como: <literal>if (!$a = foo())</literal>.
   En esta situación, el resultado de <literal>foo()</literal> será colocado en la variable <varname>$a</varname>.
  </para>
 </note>
 <sect2 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       La concatenación de strings (<literal>.</literal>) ahora tiene una precedencia más baja que la suma/resta aritmética
       (<literal>+</literal> y <literal>-</literal>) y los desplazamientos bit a bit izquierda/derecha (<literal>&lt;&lt;</literal> y <literal>&gt;&gt;</literal>);
       anteriormente, esto tenía la misma precedencia que <literal>+</literal> y <literal>-</literal>, y una precedencia más alta que <literal>&lt;&lt;</literal> y <literal>&gt;&gt;</literal>.
      </entry>
     </row>
     <row>
      <entry>8.0.0</entry>
      <entry>
       El operador ternario (<literal>? :</literal>) ahora es no asociativo; anteriormente, era asociativo por la izquierda.
      </entry>
     </row>
     <row>
      <entry>7.4.0</entry>
      <entry>
       Dependencia de la precedencia de la concatenación de strings
       (<literal>.</literal>) relativo a la suma/resta aritmética
       (<literal>+</literal> o <literal>-</literal>) o los desplazamientos bit a bit izquierda/derecha (<literal>&lt;&lt;</literal> o <literal>&gt;&gt;</literal>),
       es decir, su uso conjunto en una expresión sin parentesis, está obsoleto.
      </entry>
     </row>
     <row>
      <entry>7.4.0</entry>
      <entry>
       Dependencia de la asociatividad por la izquierda del operador ternario (<literal>? :</literal>),
       es decir, la imbricación de múltiples operadores ternarios que no están entre parentesis, está obsoleta.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </sect2>
</sect1>
