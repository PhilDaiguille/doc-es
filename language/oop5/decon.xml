<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: c1f37a6c270aadbbb3da56a3973ffd62197adf2b Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="language.oop5.decon" xmlns="http://docbook.org/ns/docbook">
  <title>Constructores y destructores</title>

  <sect2 xml:id="language.oop5.decon.constructor">
   <title>Constructor</title>
   <methodsynopsis xml:id="object.construct">
    <type>void</type><methodname>__construct</methodname>
    <methodparam rep="repeat"><type>mixed</type><parameter>values</parameter><initializer>""</initializer></methodparam>
   </methodsynopsis>
   <para>
    PHP permite a los desarrolladores declarar constructores para las clases. Las clases que poseen un método constructor llaman a este método cada vez que se crea una nueva instancia del objeto, lo cual es interesante para todas las inicializaciones que el objeto necesita antes de ser utilizado.
   </para>
   <note>
    <simpara>
     Los constructores de la clase padre no son llamados implícitamente si la clase hija define un constructor. Si se desea utilizar un constructor de la clase padre, será necesario llamar a <literal>parent::__construct()</literal> desde el constructor de la clase hija. Si la clase hija no define un constructor, entonces puede ser heredado de la clase padre, exactamente de la misma manera que una método lo sería (si no ha sido declarado como privado).
    </simpara>
   </note>
   <example>
    <title>Constructor en la herencia</title>
    <programlisting role="php">
<![CDATA[
<?php
class BaseClass {
    function __construct() {
        print "En el constructor de BaseClass\n";
    }
}

class SubClass extends BaseClass {
    function __construct() {
        parent::__construct();
        print "En el constructor de SubClass\n";
    }
}

class OtherSubClass extends BaseClass {
    // Constructor heredado de BaseClass
}

// En el constructor de BaseClass
$obj = new BaseClass();

// En el constructor de BaseClass
// En el constructor de SubClass
$obj = new SubClass();

// En el constructor de BaseClass
$obj = new OtherSubClass();
?>
]]>
    </programlisting>
   </example>
   <para>
    A diferencia de otros métodos, <link linkend="object.construct">__construct()</link> está excluido de las <link linkend="language.oop.lsp">reglas de compatibilidad de las firmas</link> usuelles cuando se extiende.
   </para>
   <para>
    Los constructores son métodos ordinarios que son llamados durante la instanciación de su objeto correspondiente. Por consiguiente, pueden definir un número arbitrario de argumentos, que pueden ser requeridos, tener un tipo, y pueden tener un valor por omisión. Los argumentos de un constructor son llamados colocando los argumentos entre paréntesis después del nombre de la clase.
   </para>
   <example>
    <title>Utilizando los argumentos de un constructor</title>
    <programlisting role="php">
<![CDATA[
<?php
class Point {
    protected int $x;
    protected int $y;

    public function __construct(int $x, int $y = 0) {
        $this->x = $x;
        $this->y = $y;
    }
}

// Pasar ambos parámetros.
$p1 = new Point(4, 5);
// Pasar solo el parámetro requerido. $y tomará su valor por omisión de 0.
$p2 = new Point(4);
// Con parámetros nombrados (a partir de PHP 8.0):
$p3 = new Point(y: 5, x: 4);
?>
]]>
    </programlisting>
   </example>
   <para>
    Si una clase no tiene constructor, o si el constructor no tiene argumentos requeridos, los paréntesis pueden ser omitidos.
   </para>
   <sect3>
    <title>Estilo antiguo de los constructores</title>
    <para>
     Anterior a PHP 8.0.0, las clases en el espacio de nombres global interpretarán un método que tiene el mismo nombre que la clase como un constructor de estilo antiguo. Esta sintaxis está obsoleta y resultará en un error <constant>E_DEPRECATED</constant>, pero llamará a esta función como un constructor. Si <link linkend="object.construct">__construct()</link> y un método con el mismo nombre son definidos, <link linkend="object.construct">__construct()</link> será llamado.
    </para>
    <para>
     Las clases en los espacios de nombres, o cualquier clase a partir de PHP 8.0.0, un método con el mismo nombre que la clase no tendrá ningún significado especial.
    </para>
    <para>
     Siempre utilizar <link linkend="object.construct">__construct()</link> en el nuevo código.
    </para>
   </sect3>
   <sect3 xml:id="language.oop5.decon.constructor.promotion">
    <title>Promoción del Constructor</title>
    <para>
     A partir de PHP 8.0.0, los parámetros del constructor pueden ser promovidos para corresponder a una propiedad del objeto. Es muy común que los parámetros de un constructor sean asignados a una propiedad sin realizar operaciones sobre ellos. La promoción del constructor proporciona un atajo para este caso de uso. El ejemplo anterior puede ser reescrito de la siguiente manera.
    </para>
    <example>
     <title>Utilizando la promoción de propiedad del constructor</title>
     <programlisting role="php">
<![CDATA[
<?php
class Point {
    public function __construct(protected int $x, protected int $y = 0) {
    }
}
]]>
     </programlisting>
    </example>
    <para>
     Cuando un argumento de constructor incluye un modificador, PHP lo interpretará como una propiedad del objeto y un argumento del constructor, y asignará el valor del argumento a la propiedad. El cuerpo del constructor puede estar entonces vacío o puede contener otras declaraciones. Todas las declaraciones adicionales serán ejecutadas después de que el valor del argumento haya sido asignado a su propiedad correspondiente.
    </para>
    <para>
     No todos los argumentos deben ser promovidos. Es posible mezclar y combinar argumentos promovidos y no promovidos, en cualquier orden. Los argumentos promovidos no tienen ningún impacto en el código que llama al constructor.
    </para>
    <note>
     <para>
      Utilizar un <link linkend="language.oop5.visibility">modificador de visibilidad</link> (<literal>public</literal>, <literal>protected</literal> o <literal>private</literal>) es la manera más probable de aplicar la promoción de propiedad, pero cualquier otro modificador único (como <literal>readonly</literal>) tendrá el mismo efecto.
     </para>
    </note>
    <note>
     <para>
      Las propiedades del objeto no pueden ser tipadas <type>callable</type> debido a las ambigüedades del motor que esto introduciría. Por lo tanto, los argumentos promovidos tampoco pueden ser tipados <type>callable</type>. Sin embargo, cualquier otra <link linkend="language.types.declarations">declaración de tipo</link> está permitida.
     </para>
    </note>
    <note>
     <para>
      Como las propiedades promovidas son tanto desucradas a una propiedad como también como el parámetro de una función, todas las restricciones de nombramiento para las propiedades y los parámetros se aplican.
     </para>
    </note>
    <note>
     <para>
      Los <link linkend="language.attributes">atributos</link> colocados en un argumento de constructor promovido serán reproducidos tanto en la propiedad como en el argumento. Los valores por omisión en un argumento de constructor promovido serán replicados solo en el argumento y no en la propiedad.
     </para>
    </note>
   </sect3>

   <sect3 xml:id="language.oop5.decon.constructor.new">
    <title>New en inicializadores</title>
    <para>
     A partir de PHP 8.1.0, los objetos pueden ser utilizados como valor por omisión para los parámetros, variables estáticas, constantes globales y los argumentos de atributos. Los objetos pueden ser ahora pasados a <function>define</function>.
    </para>
    <note>
     <para>
      El uso de un nombre de clase dinámico o no-string o una clase anónima no está permitido. El uso del desempaquetado de argumentos no está permitido. El uso de expresiones no soportadas como argumento no está permitido.
     </para>
    </note>
    <example>
     <title>Uso de new en inicializadores</title>
     <programlisting role="php" annotations="non-interactive">
<![CDATA[
<?php

// Todos permitidos:
static $x = new Foo;

const C = new Foo;

function test($param = new Foo) {}

#[AnAttribute(new Foo)]
class Test {
    public function __construct(
        public $prop = new Foo,
    ) {}
}

// Todos no permitidos (error en tiempo de compilación):
function test(
    $a = new (CLASS_NAME_CONSTANT)(), // nombre de clase dinámico
    $b = new class {}, // clase anónima
    $c = new A(...[]), // desempaquetado de argumentos
    $d = new B($abc), // expresión de constante no soportada
) {}
?>
]]>
     </programlisting>
    </example>
   </sect3>

   <sect3 xml:id="language.oop5.decon.constructor.static">
    <title>Método de creación estático</title>
    <para>
     PHP soporta únicamente un constructor único por clase. Sin embargo, en algunos casos puede ser deseable permitir que un objeto sea construido de manera diferente con diferentes entradas. La manera recomendada de hacer esto es utilizando métodos estáticos como una envoltura del constructor.
    </para>
    <example>
     <title>Utilizando la creación vía un método estático</title>
     <programlisting role="php">
<![CDATA[
<?php
$some_json_string = '{ "id": 1004, "name": "Elephpant" }';
$some_xml_string = "<animal><id>1005</id><name>Elephpant</name></animal>";

class Product {

    private ?int $id;
    private ?string $name;

    private function __construct(?int $id = null, ?string $name = null) {
        $this->id = $id;
        $this->name = $name;
    }

    public static function fromBasicData(int $id, string $name): static {
        $new = new static($id, $name);
        return $new;
    }

    public static function fromJson(string $json): static {
        $data = json_decode($json, true);
        return new static($data['id'], $data['name']);
    }

    public static function fromXml(string $xml): static {
        $data = simplexml_load_string($xml);
        $new = new static();
        $new->id = $data->id;
        $new->name = $data->name;
        return $new;
    }
}

$p1 = Product::fromBasicData(5, 'Widget');
$p2 = Product::fromJson($some_json_string);
$p3 = Product::fromXml($some_xml_string);

var_dump($p1, $p2, $p3);
]]>
     </programlisting>
    </example>
    <para>
     El constructor puede ser hecho privado o protegido para evitar su llamada desde el exterior. En este caso, solo un método estático será capaz de instanciar la clase. Dado que están en la misma definición de clase, tienen acceso a los métodos privados, incluso en una instancia diferente del objeto. Un constructor privado es opcional y puede o no tener sentido dependiendo del caso de uso.
    </para>
    <para>
     Los tres métodos estáticos públicos demuestran entonces diferentes maneras de instanciar el objeto.
    </para>
    <simplelist>
     <member><code>fromBasicData()</code> toma los parámetros exactos que son necesarios, luego crea el objeto llamando al constructor y devolviendo el resultado.</member>
     <member><code>fromJson()</code> acepta una cadena de caracteres JSON y realiza un preprocesamiento sobre ella misma para convertirse en el formato deseado por el constructor. Luego devuelve el nuevo objeto.</member>
     <member>
      <code>fromXml()</code> acepta una cadena de caracteres XML, realiza un preprocesamiento, luego crea un objeto en bruto. El constructor es llamado, pero como todos los parámetros son opcionales, el método los ignora. Luego asigna los valores a las propiedades del objeto directamente antes de devolver el resultado.
     </member>
    </simplelist>
    <para>
     En los tres casos, la palabra clave <code>static</code> es traducida en el nombre de la clase donde el código se encuentra. En este caso, <code>Product</code>.
    </para>
   </sect3>
  </sect2>

  <sect2 xml:id="language.oop5.decon.destructor">
   <title>Destructor</title>
   <methodsynopsis xml:id="object.destruct">
    <type>void</type><methodname>__destruct</methodname>
    <void />
   </methodsynopsis>
   <para>
    PHP posee un concepto de destructor similar al de otros lenguajes orientados a objetos, como el <literal>C++</literal>. El método destructor es llamado tan pronto como no haya más referencias a un objeto dado, o en cualquier orden durante la secuencia de parada.
   </para>
   <example>
    <title>Ejemplo con un Destructor</title>
    <programlisting role="php">
<![CDATA[
<?php

class MyDestructableClass
{
    function __construct() {
        print "En el constructor\n";
    }

    function __destruct() {
        print "Destruyendo " . __CLASS__ . "\n";
    }
}

$obj = new MyDestructableClass();

]]>
    </programlisting>
   </example>
   <para>
    Al igual que el constructor, el destructor de la clase padre no será llamado implícitamente por el motor. Para ejecutar el destructor de la clase padre, es necesario llamar explícitamente a la función <literal>parent::__destruct</literal> en el cuerpo del destructor. Al igual que los constructores, una clase hija puede heredar el destructor de la clase padre si no implementa uno propio.
   </para>
   <para>
    El destructor será llamado incluso si la ejecución del script es detenida utilizando la función <function>exit</function>. Llamar a la función <function>exit</function> en un destructor impedirá la ejecución de las rutinas de parada restantes.
   </para>
   <para>
    Si un destructor crea nuevas referencias a su objeto, no será llamado una segunda vez cuando el contador de referencias vuelva a cero o durante la secuencia de parada.
   </para>
   <para>
    A partir de PHP 8.4.0, cuando la <link linkend="features.gc.collecting-cycles">recolección de ciclos</link> ocurre durante la ejecución de una <link linkend="language.fibers">fibra</link>, los destructores de los objetos programados para la recolección son ejecutados en una fibra distinta, llamada <literal>gc_destructor_fiber</literal>. Si esta fibra es suspendida, se creará una nueva fibra para ejecutar los destructores restantes. La anterior <literal>gc_destructor_fiber</literal> no será más referenciada por el recolector de basura y podrá ser recolectada si no es referenciada en otro lugar. Los objetos cuyo destructor es suspendido no serán recolectados hasta que el destructor haya terminado o la fibra misma sea recolectada.
   </para>
   <note>
    <para>
     Los destructores llamados durante la parada del script están en una situación donde los encabezados HTTP ya han sido enviados. El directorio de trabajo en la fase de parada del script puede ser diferente con ciertas APIs (e.g. Apache).
    </para>
   </note>
   <note>
    <para>
     Intentar lanzar una excepción desde un destructor (llamado al final del script) resulta en un error fatal.
    </para>
   </note>
  </sect2>
 </sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
