<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 28529d3539b850e870e3aa97570f4db0e53daa03 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="language.oop5.cloning" xmlns="http://docbook.org/ns/docbook">
  <title>Clonación de objetos</title>

  <para>
   La creación de una copia de un objeto con exactamente las mismas
   propiedades no siempre es el comportamiento deseado.
   Un buen ejemplo para ilustrar la necesidad de un constructor de copia:
   si se tiene un objeto que representa una ventana GTK y el objeto
   contiene el recurso que representa esa ventana GTK, al crear una copia,
   se puede desear crear una nueva ventana con las mismas propiedades,
   pero que el nuevo objeto contenga un recurso que represente la nueva ventana.
  </para>

  <para>
   Una copia de objeto se crea utilizando la palabra clave <literal>clone</literal>
   (que invoca al método <link linkend="object.clone">__clone()</link>
   del objeto, si ha sido definido).
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$copy_of_object = clone $object;
?>
]]>
   </programlisting>
  </informalexample>

  <para>
   Cuando un objeto es clonado, PHP realiza una copia superficial de todas
   las propiedades del objeto. Todas las propiedades que son referencias a otras
   variables permanecerán como referencias.
  </para>

  <methodsynopsis xml:id="object.clone">
   <type>void</type><methodname>__clone</methodname>
   <void/>
  </methodsynopsis>

  <para>
   Una vez realizada la clonación, si se ha definido un método <link linkend="object.clone">__clone()</link>,
   el método <link linkend="object.clone">__clone()</link>
   del nuevo objeto será llamado, para permitir que cada propiedad que deba ser modificada lo sea.
  </para>

  <example>
   <title>Ejemplo de duplicación de objetos</title>
   <programlisting role="php">
<![CDATA[
<?php
class SubObject
{
  static $instances = 0;
  public $instance;

  public function __construct() {
    $this->instance = ++self::$instances;
  }

  public function __clone() {
    $this->instance = ++self::$instances;
  }
}

class MyCloneable
{
  public $objet1;
  public $objet2;

  function __clone()
  {
    // Fuerza la copia de this->object, de lo contrario
    // apuntará al mismo objeto.
    $this->object1 = clone $this->object1;
  }
}

$obj = new MyCloneable();

$obj->object1 = new SubObject();
$obj->object2 = new SubObject();

$obj2 = clone $obj;

print "Objeto original :\n";
print_r($obj);

print "Objeto clonado :\n";
print_r($obj2);

?>
]]>
   </programlisting>
   &example.outputs;
   <screen role="php">
<![CDATA[
Objeto original :
MyCloneable Object
(
    [object1] => SubObject Object
        (
            [instance] => 1
        )

    [object2] => SubObject Object
        (
            [instance] => 2
        )

)
Objeto clonado :
MyCloneable Object
(
    [object1] => SubObject Object
        (
            [instance] => 3
        )

    [object2] => SubObject Object
        (
            [instance] => 2
        )

)
]]>

   </screen>

  </example>

  <para>
   Es posible acceder a un miembro de un objeto
   recién clonado en una sola expresión:
  </para>
  <example>
   <title>Acceso a un miembro de un objeto recién clonado</title>
   <programlisting role="php">
<![CDATA[
<?php
$dateTime = new DateTime();
echo (clone $dateTime)->format('Y');
?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
2016
]]>
   </screen>
  </example>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
