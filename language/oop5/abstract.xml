<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: c1f37a6c270aadbbb3da56a3973ffd62197adf2b Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="language.oop5.abstract" xmlns="http://docbook.org/ns/docbook">
 <title>Abstracción de clases</title>

 <para>
  PHP tiene clases, métodos y propiedades abstractas.
  Las clases definidas como abstractas no pueden ser
  instanciadas, y cualquier clase que contenga al menos un
  método abstracto debe ser también abstracta.
  Los métodos definidos como abstractos se contentan con declarar la firma del método y con indicar si es público o protegido;
  no pueden definir la implementación. Las propiedades definidas como abstractas
  pueden declarar un requisito para el comportamiento de <literal>get</literal> o de <literal>set</literal>,
  y pueden proporcionar una implementación para una de estas operaciones, pero no para ambas.
 </para>

 <para>
  Al heredar de una clase abstracta, todos los métodos
  marcados como abstractos en la declaración de la clase padre
  deben ser definidos por la clase hija y seguir las reglas habituales
  de <link linkend="language.oop5.inheritance">herencia</link> y de
  <link linkend="language.oop.lsp">compatibilidad de firma</link>.
 </para>

 <simpara>
  A partir de PHP 8.4, una clase abstracta puede declarar una propiedad abstracta, pública o protegida.
  Una propiedad abstracta protegida puede ser satisfecha por una propiedad accesible en lectura/escritura
  desde un contexto protegido o público.
 </simpara>
 <simpara>
  Una propiedad abstracta puede ser satisfecha ya sea por una propiedad
  estándar, ya sea por una propiedad
  con <link linkend="language.oop5.property-hooks">hooks</link> definidos, correspondiente a la operación requerida.
 </simpara>

 <example>
  <title>Ejemplo de método abstracto</title>
  <programlisting role="php">
<![CDATA[
<?php

abstract class AbstractClass
{
    // Fuerza a las clases hijas a definir este método
    abstract protected function getValue();
    abstract protected function prefixValue($prefix);

    // método común
   public function printOut()
   {
        print $this->getValue() . "\n";
   }
}

class ConcreteClass1 extends AbstractClass
{
     protected function getValue()
     {
       return "ConcreteClass1";
     }

     public function prefixValue($prefix)
     {
       return "{$prefix}ConcreteClass1";
     }
}

class ConcreteClass2 extends AbstractClass
{
     public function getValue()
     {
       return "ConcreteClass2";
     }

     public function prefixValue($prefix)
     {
       return "{$prefix}ConcreteClass2";
     }
}

$class1 = new ConcreteClass1();
$class1->printOut();
echo $class1->prefixValue('FOO_'), "\n";

$class2 = new ConcreteClass2();
$class2->printOut();
echo $class2->prefixValue('FOO_'), "\n";

?>
]]>
  </programlisting>
  &example.outputs;
  <screen>
<![CDATA[
ConcreteClass1
FOO_ConcreteClass1
ConcreteClass2
FOO_ConcreteClass2
]]>
  </screen>
 </example>

  <example>
   <title>Ejemplo de método abstracto</title>
    <programlisting role="php">
<![CDATA[
<?php

abstract class AbstractClass
{
    // Un método abstracto solo debe definir los argumentos requeridos
    abstract protected function prefixName($name);

}

class ConcreteClass extends AbstractClass
{

    // Una clase hija puede definir argumentos opcionales que no están presentes en la firma del padre
     public function prefixName($name, $separator = ".")
     {
        if ($name == "Pacman") {
            $prefix = "Mr";
        } elseif ($name == "Pacwoman") {
            $prefix = "Mrs";
        } else {
            $prefix = "";
        }

        return "{$prefix}{$separator} {$name}";
    }
}

$class = new ConcreteClass();
echo $class->prefixName("Pacman"), "\n";
echo $class->prefixName("Pacwoman"), "\n";

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Mr. Pacman
Mrs. Pacwoman
]]>
   </screen>
  </example>
  <example>
   <title>Ejemplo de propiedad abstracta</title>
    <programlisting role="php">
<![CDATA[
<?php

abstract class A
{
    // Las clases derivadas deben tener una propiedad públicamente accesible en lectura.
    abstract public string $readable {
        get;
    }

    // Las clases derivadas deben tener una propiedad modificable en escritura, protegida o pública.
     abstract protected string $writeable {
         set;
    }

    // Las clases derivadas deben tener una propiedad simétrica protegida o pública.
     abstract protected string $both {
         get;
         set;
     }
}

class C extends A
{
    // Esto satisface el requisito y también hace que la propiedad sea modificable, lo cual es válido.
    public string $readable;

    // Esto NO satisfaría el requisito, ya que la propiedad no es públicamente accesible en lectura.
    protected string $readable;

    // Esto satisface exactamente el requisito, por lo que es suficiente.
    // La propiedad solo puede ser modificada desde un contexto protegido.
    protected string $writeable {
        set => $value;
    }

    // Esto amplía la visibilidad de protegido a público, lo cual es aceptable.
    public string $both;
}
?>
]]>
   </programlisting>
  </example>
  <simpara>
   Una propiedad abstracta en una clase abstracta puede proporcionar implementaciones para cualquier punto de anclaje,
   pero debe tener <literal>get</literal> o <literal>set</literal> declarados pero no definidos (como en el ejemplo anterior).
  </simpara>
  <example>
   <title>Ejemplo de propiedad abstracta con hooks</title>
   <programlisting role="php" annotations="non-interactive">
<![CDATA[
<?php

abstract class A
{
    // Esto proporciona una implementación por defecto (pero sustituible) para set,
    // y exige que las clases derivadas proporcionen una implementación para get.
    abstract public string $foo {
        get;

        set {
            $this->foo = $value
        };
    }
}

?>
]]>
   </programlisting>
  </example>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
