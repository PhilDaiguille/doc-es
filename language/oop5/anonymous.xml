<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: d6f54016d62904cfd8200604aadd5e3f0d9bad97 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="language.oop5.anonymous" xmlns="http://docbook.org/ns/docbook">
 <title>Clases anónimas</title>

 <para>
  Las clases anónimas son útiles cuando se necesita crear objetos únicos simples.
 </para>

 <informalexample>
  <programlisting role="php">
<![CDATA[
<?php

// Utilizando una clase explícita
class Logger
{
    public function log($msg)
    {
        echo $msg;
    }
}

$util->setLogger(new Logger());

// Utilizando una clase anónima
$util->setLogger(new class {
    public function log($msg)
    {
        echo $msg;
    }
});
]]>
  </programlisting>
 </informalexample>

 <para>
  Se les pueden pasar argumentos a través del constructor, pueden extender otras clases, implementar interfaces o utilizar traits como con una clase normal.
 </para>

 <informalexample>
  <programlisting role="php">
<![CDATA[
<?php

class SomeClass {}
interface SomeInterface {}
trait SomeTrait {}

var_dump(new class(10) extends SomeClass implements SomeInterface {
    private $num;

    public function __construct($num)
    {
        $this->num = $num;
    }

    use SomeTrait;
});
]]>
  </programlisting>
  &example.outputs;
  <screen>
<![CDATA[
object(class@anonymous)#1 (1) {
  ["Command line code0x104c5b612":"class@anonymous":private]=>
  int(10)
}
]]>
  </screen>
 </informalexample>

 <para>
  Anidar una clase anónima dentro de otra clase no da acceso a los métodos o propiedades privadas o protegidas de la clase contenedora. Para utilizar métodos o propiedades protegidas de la clase contenedora, la clase anónima debe extenderla. Para utilizar las propiedades privadas de la clase contenedora en la clase anónima, estas deben ser pasadas a través del constructor.
 </para>

 <informalexample>
  <programlisting role="php">
<![CDATA[
<?php

class Outer
{
    private $prop = 1;
    protected $prop2 = 2;

    protected function func1()
    {
        return 3;
    }

    public function func2()
    {
        return new class($this->prop) extends Outer {
            private $prop3;

            public function __construct($prop)
            {
                $this->prop3 = $prop;
            }

            public function func3()
            {
                return $this->prop2 + $this->prop3 + $this->func1();
            }
        };
    }
}

echo (new Outer)->func2()->func3();
]]>
  </programlisting>
  &example.outputs;
  <screen>
<![CDATA[
6
]]>
  </screen>
 </informalexample>

 <para>
  Todos los objetos creados por la misma declaración de clase anónima son instancias de la misma clase.
 </para>

 <informalexample>
  <programlisting role="php">
<![CDATA[
<?php
function anonymous_class()
{
    return new class {};
}

if (get_class(anonymous_class()) === get_class(anonymous_class())) {
    echo 'same class';
} else {
    echo 'different class';
}]]>
 </programlisting>
 &example.outputs;
 <screen>
<![CDATA[
same class
]]>
  </screen>
 </informalexample>

 <note>
  <para>
   Tenga en cuenta que las clases anónimas son asignadas un nombre por el motor, como se ilustra en el siguiente ejemplo. Este nombre debe considerarse como un detalle de implementación, que no debe ser invocado.
  </para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
echo get_class(new class {});
]]>
  </programlisting>
  &example.outputs.similar;
  <screen>
<![CDATA[
class@anonymous/in/oNi1A0x7f8636ad2021
]]>
   </screen>
  </informalexample>
 </note>
 <sect2 xml:id="language.oop5.anonymous.readonly">
  <title>Clases anónimas de solo lectura</title>
  <simpara>
   A partir de PHP 8.3.0, el modificador <literal>readonly</literal> puede ser aplicado a las clases anónimas.
  </simpara>
  <example xml:id="language.oop5.anonymous.readonly.example">
   <title>Definir una clase anónima de solo lectura</title>
   <programlisting role="php">
    <![CDATA[
<?php
// Utilización de una clase anónima
var_dump(new readonly class('[DEBUG]') {
    public function __construct(private string $prefix)
    {
    }

    public function log($msg)
    {
        echo $this->prefix . ' ' . $msg;
    }
});
]]>
   </programlisting>
  </example>
 </sect2>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
