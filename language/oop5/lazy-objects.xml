<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 617cc59b5902de0cadd32883b72b113bf62cf1b6 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes -->
<sect1 xml:id="language.oop5.lazy-objects" xmlns="http://docbook.org/ns/docbook">
 <title>Objetos perezosos</title>

 <simpara>
  Un objeto perezoso es un objeto cuya inicialización se difiere hasta que su estado sea observado o modificado. Algunos ejemplos de uso incluyen componentes de inyección de dependencias que proporcionan servicios perezosos completamente inicializados solo si es necesario, <acronym>ORM</acronym>s que proporcionan entidades perezosas que se hidratan desde la base de datos solo cuando se accede a ellas, o un analizador JSON que retrasa el análisis hasta que los elementos sean accedidos.
 </simpara>

 <simpara>
  Se admiten dos estrategias de objetos perezosos: los objetos fantasma (Ghost) y los proxys virtuales (Virtual Proxies), a continuación denominados &quot;fantasmas perezosos&quot; y &quot;proxys perezosos&quot;. En ambas estrategias, el objeto perezoso se adjunta a un inicializador o a una fábrica que se llama automáticamente cuando su estado es observado o modificado por primera vez. Desde el punto de vista de la abstracción, los objetos perezosos son indiscernibles de los no perezosos: pueden ser utilizados sin saber que son perezosos, lo que permite pasarlos y utilizarlos por código que no es consciente de la pereza. Los proxys perezosos también son transparentes, pero se debe tener cuidado cuando se utiliza su identidad, ya que el proxy y su instancia real tienen identidades diferentes.
 </simpara>

 <note>
  <title>Información de versión</title>
  <simpara>
   Los objetos perezosos fueron introducidos en PHP 8.4.
  </simpara>
 </note>

 <sect2 xml:id="language.oop5.lazy-objects.creation">
  <title>Creación de objetos perezosos</title>

  <simpara>
   Es posible crear una instancia perezosa de cualquier clase definida por el usuario o de la clase <classname>stdClass</classname> (otras clases internas no son admitidas), o reinicializar una instancia de estas clases para que sea perezosa. Los puntos de entrada para crear un objeto perezoso son los métodos <methodname>ReflectionClass::newLazyGhost</methodname> y <methodname>ReflectionClass::newLazyProxy</methodname>.
  </simpara>

  <simpara>
   Ambos métodos aceptan una función que se llama cuando el objeto necesita inicialización. El comportamiento esperado de la función varía en función de la estrategia utilizada, como se describe en la documentación de referencia de cada método.
  </simpara>

  <example>
   <title>Creación de un fantasma perezoso</title>
   <programlisting role="php">
<![CDATA[
<?php
class Example
{
    public function __construct(public int $prop)
    {
        echo __METHOD__, "\n";
    }
}

$reflector = new ReflectionClass(Example::class);
$lazyObject = $reflector->newLazyGhost(function (Example $object) {
    // Inicializa el objeto en el lugar
    $object->__construct(1);
});

var_dump($lazyObject);
var_dump(get_class($lazyObject));

// Desencadena la inicialización
var_dump($lazyObject->prop);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
lazy ghost object(Example)#3 (0) {
["prop"]=>
uninitialized(int)
}
string(7) "Example"
Example::__construct
int(1)
]]>
   </screen>
  </example>

  <example>
   <title>Creación de un proxy perezoso</title>
   <programlisting role="php">
<![CDATA[
<?php
class Example
{
    public function __construct(public int $prop)
    {
        echo __METHOD__, "\n";
    }
}

$reflector = new ReflectionClass(Example::class);
$lazyObject = $reflector->newLazyProxy(function (Example $object) {
    // Crea y devuelve la instancia real
    return new Example(1);
});

var_dump($lazyObject);
var_dump(get_class($lazyObject));

// Desencadena la inicialización
var_dump($lazyObject->prop);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
lazy proxy object(Example)#3 (0) {
  ["prop"]=>
  uninitialized(int)
}
string(7) "Example"
Example::__construct
int(1)
]]>
   </screen>
  </example>

  <simpara>
   Cualquier acceso a las propiedades de un objeto perezoso desencadena su inicialización (incluyendo a través de <classname>ReflectionProperty</classname>). Sin embargo, algunas propiedades pueden ser conocidas de antemano y no deberían desencadenar la inicialización cuando se accede a ellas:
  </simpara>

  <example>
   <title>Inicialización de propiedades de manera impaciente</title>
   <programlisting role="php">
<![CDATA[
<?php
class BlogPost
{
    public function __construct(
	   public int $id,
	   public string $title,
	   public string $content,
    ) { }
}

$reflector = new ReflectionClass(BlogPost::class);

$post = $reflector->newLazyGhost(function ($post) {
    $data = fetch_from_store($post->id);
    $post->__construct($data['id'], $data['title'], $data['content']);
});

// Sin esta línea, la siguiente llamada a ReflectionProperty::setValue() desencadenaría la inicialización.
$reflector->getProperty('id')->skipLazyInitialization($post);
$reflector->getProperty('id')->setValue($post, 123);

// Asimismo, se puede utilizar esto directamente:
$reflector->getProperty('id')->setRawValueWithoutLazyInitialization($post, 123);

// El identificador puede ser accedido sin desencadenar la inicialización
var_dump($post->id);
?>
]]>
   </programlisting>
  </example>

  <simpara>
   Los métodos <methodname>ReflectionProperty::skipLazyInitialization</methodname> y <methodname>ReflectionProperty::setRawValueWithoutLazyInitialization</methodname> ofrecen formas de eludir la inicialización perezosa al acceder a una propiedad.
  </simpara>
 </sect2>

 <sect2 xml:id="language.oop5.lazy-objects.patterns">
  <title>Acerca de las estrategias de objetos perezosos</title>

  <simpara>
   Los <emphasis>fantasmas perezosos</emphasis> son objetos que se inicializan en el lugar y, una vez inicializados, son indiscernibles de un objeto que nunca fue perezoso. Esta estrategia es adecuada cuando se controla tanto la instanciación como la inicialización del objeto y es inadecuada si alguna de estas operaciones es gestionada por otra parte.
  </simpara>

  <simpara>
   Los <emphasis>proxys perezosos</emphasis>, una vez inicializados, actúan como proxys hacia una instancia real: cualquier operación en un proxy perezoso inicializado es transmitida a la instancia real. La creación de la instancia real puede ser delegada a otra parte, lo que hace que esta estrategia sea útil en los casos en que los fantasmas perezosos son inadecuados. Aunque los proxys perezosos son casi tan transparentes como los fantasmas perezosos, se debe tener cuidado cuando se utiliza su identidad, ya que el proxy y su instancia real tienen identidades distintas.
  </simpara>
 </sect2>

 <sect2 xml:id="language.oop5.lazy-objects.lifecycle">
  <title>Ciclo de vida de los objetos perezosos</title>

  <simpara>
   Los objetos pueden ser hechos perezosos durante la instanciación utilizando <methodname>ReflectionClass::newLazyGhost</methodname> o <methodname>ReflectionClass::newLazyProxy</methodname>, o después de la instanciación utilizando <methodname>ReflectionClass::resetAsLazyGhost</methodname> o <methodname>ReflectionClass::resetAsLazyProxy</methodname>. Luego, un objeto perezoso puede ser inicializado por una de las siguientes operaciones:
  </simpara>

  <simplelist>
   <member>
    Interactuar con el objeto de una manera que desencadene la inicialización automática. Ver <link linkend="language.oop5.lazy-objects.initialization-triggers">desencadenantes de inicialización</link>.
   </member>
   <member>
    Marcar todas sus propiedades como no perezosas utilizando <methodname>ReflectionProperty::skipLazyInitialization</methodname> o <methodname>ReflectionProperty::setRawValueWithoutLazyInitialization</methodname>.
   </member>
   <member>
    Llamar explícitamente a <methodname>ReflectionClass::initializeLazyObject</methodname> o <methodname>ReflectionClass::markLazyObjectAsInitialized</methodname>.
   </member>
  </simplelist>

  <simpara>
   Dado que los objetos perezosos se inicializan cuando todas sus propiedades son marcadas como no perezosas, los métodos anteriores no marcarán un objeto como perezoso si ninguna propiedad puede ser marcada como perezosa.
  </simpara>
 </sect2>

 <sect2 xml:id="language.oop5.lazy-objects.initialization-triggers">
  <title>Desencadenantes de inicialización</title>

  <simpara>
   Los objetos perezosos están diseñados para ser completamente transparentes para sus consumidores, de modo que las operaciones normales que observan o modifican el estado del objeto desencadenarán automáticamente la inicialización antes de que se realice la operación. Esto incluye, pero no se limita a, las siguientes operaciones:
  </simpara>

  <simplelist>
   <member>
    Leer o escribir una propiedad
   </member>
   <member>
    Probar si una propiedad está definida o definirla.
   </member>
   <member>
    Acceder o modificar una propiedad a través de <methodname>ReflectionProperty::getValue</methodname>, <methodname>ReflectionProperty::getRawValue</methodname>, <methodname>ReflectionProperty::setValue</methodname>, o <methodname>ReflectionProperty::setRawValue</methodname>.
   </member>
   <member>
    Listar las propiedades con <methodname>ReflectionObject::getProperties</methodname>, <methodname>ReflectionObject::getProperty</methodname>, <function>get_object_vars</function>.
   </member>
   <member>
    Iterar sobre las propiedades de un objeto que no implementa <interfacename>Iterator</interfacename> o <interfacename>IteratorAggregate</interfacename> utilizando <link linkend="control-structures.foreach">foreach</link>.
   </member>
   <member>
    Serializar el objeto con <function>serialize</function>, <function>json_encode</function>, etc.
   </member>
   <member>
    <link linkend="language.oop5.lazy-objects.cloning">Clonar</link> el objeto.
   </member>
  </simplelist>

  <simpara>
   Las llamadas a métodos que no acceden al estado del objeto no desencadenarán la inicialización. Asimismo, las interacciones con el objeto que invocan métodos mágicos o funciones de gancho no desencadenarán la inicialización si estos métodos o funciones no acceden al estado del objeto.
  </simpara>

  <sect3>
   <title>Operaciones no desencadenantes</title>

   <simpara>
    Las siguientes operaciones o métodos específicos permiten acceder o modificar objetos perezosos sin desencadenar la inicialización:
   </simpara>

   <simplelist>
    <member>
     Marcar las propiedades como no perezosas con <methodname>ReflectionProperty::skipLazyInitialization</methodname> o <methodname>ReflectionProperty::setRawValueWithoutLazyInitialization</methodname>.
    </member>
    <member>
     Recuperar la representación interna de las propiedades utilizando <function>get_mangled_object_vars</function> o <link linkend="language.types.array.casting">convirtiendo el objeto en un array</link>.
    </member>
    <member>
     Utilizando <function>serialize</function> cuando <constant>ReflectionClass::SKIP_INITIALIZATION_ON_SERIALIZE</constant> está definido, a menos que <link linkend="object.serialize">__serialize()</link> o <link linkend="object.sleep">__sleep()</link> desencadene la inicialización.
    </member>
    <member>
     Llamar a <methodname>ReflectionObject::__toString</methodname>.
    </member>
    <member>
     Utilizar <function>var_dump</function> o <function>debug_zval_dump</function>, a menos que <link linkend="object.debuginfo">__debugInfo()</link> desencadene la inicialización
    </member>
   </simplelist>
  </sect3>
 </sect2>

 <sect2 xml:id="language.oop5.lazy-objects.initialization-sequence">
  <title>Secuencia de inicialización</title>

  <simpara>
   Esta sección describe la secuencia de operaciones realizadas cuando se desencadena una inicialización, en función de la estrategia utilizada.
  </simpara>

  <sect3>
   <title>Objetos fantasma</title>
   <simplelist>
    <member>
     El objeto es marcado como no perezoso.
    </member>
    <member>
     Las propiedades no inicializadas con <methodname>ReflectionProperty::skipLazyInitialization</methodname> o <methodname>ReflectionProperty::setRawValueWithoutLazyInitialization</methodname> se establecen en sus valores por defecto, si corresponde. En este punto, el objeto se asemeja a un objeto creado con <methodname>ReflectionClass::newInstanceWithoutConstructor</methodname>, excepto por las propiedades ya inicializadas.
    </member>
    <member>
     La función de inicialización es luego llamada con el objeto como primer parámetro. La función debe, pero no está obligada, inicializar el estado del objeto, y debe devolver &null; o ningún valor. El objeto ya no es perezoso en este punto, por lo que la función puede acceder directamente a sus propiedades.
    </member>
   </simplelist>
   <simpara>
    Después de la inicialización, el objeto es indiscernible de un objeto que nunca fue perezoso.
   </simpara>
  </sect3>

  <sect3>
   <title>Objetos proxy</title>
   <simplelist>
    <member>
     El objeto es marcado como no perezoso.
    </member>
    <member>
     A diferencia de los objetos fantasma, las propiedades del objeto no se modifican en esta etapa.
    </member>
    <member>
     La función fábrica es llamada con el objeto como primer parámetro y debe devolver una instancia no perezosa de una clase compatible (ver <methodname>ReflectionClass::newLazyProxy</methodname>).
    </member>
    <member>
     La instancia devuelta es llamada <emphasis>instancia real</emphasis> y está adjunta al proxy.
    </member>
    <member>
     Los valores de las propiedades del proxy son descartados como si <function>unset</function> es llamado.
    </member>
   </simplelist>
   <simpara>
    Después de la inicialización, el acceso a cualquier propiedad en el proxy dará el mismo resultado que el acceso a la propiedad correspondiente en la instancia real; todos los accesos a las propiedades en el proxy son transmitidos a la instancia real, incluyendo las propiedades declaradas, dinámicas, inexistentes, o las propiedades marcadas con <methodname>ReflectionProperty::skipLazyInitialization</methodname> o <methodname>ReflectionProperty::setRawValueWithoutLazyInitialization</methodname>.
   </simpara>
   <simpara>
    El objeto proxy en sí mismo <emphasis>no</emphasis> es reemplazado ni sustituido por la instancia real.
   </simpara>
   <simpara>
    Aunque la fábrica recibe el proxy como primer parámetro, no se espera que lo modifique (las modificaciones están permitidas pero serán perdidas en la etapa final de inicialización). Sin embargo, el proxy puede ser utilizado para tomar decisiones basadas en los valores de las propiedades inicializadas, la clase, el objeto en sí mismo, o su identidad. Por ejemplo, el inicializador podría utilizar el valor de una propiedad inicializada durante la creación de la instancia real.
   </simpara>
  </sect3>

  <sect3>
   <title>Comportamiento común</title>

   <simpara>
    El alcance y el contexto <varname>$this</varname> de la función de inicialización o de la fábrica permanecen sin cambios, y se aplican las restricciones de visibilidad habituales.
   </simpara>

   <simpara>
    Después de una inicialización exitosa, la función de inicialización o la fábrica ya no es referenciada por el objeto y puede ser liberada si no tiene otras referencias.
   </simpara>

   <simpara>
    Si la inicialización lanza una excepción, el estado del objeto se restaura a su estado pre-inicialización y el objeto es marcado nuevamente como perezoso. En otras palabras, todos los efectos sobre el objeto en sí mismo son anulados. Los otros efectos secundarios, como los efectos sobre otros objetos, no son anulados. Esto evita la exposición de una instancia parcialmente inicializada en caso de fallo.
   </simpara>
  </sect3>
 </sect2>

 <sect2 xml:id="language.oop5.lazy-objects.cloning">
  <title>Clonación</title>

  <simpara>
   <link linkend="language.oop5.cloning">Clonar</link> un objeto perezoso desencadena su inicialización antes de que el clon sea creado, resultando en un objeto inicializado.
  </simpara>

  <simpara>
   Para los objetos proxy, el proxy y su instancia real son clonados, y el clon del proxy es devuelto. La método <link linkend="object.clone"><literal>__clone</literal></link> es llamada en la instancia real, no en el proxy. El proxy clonado y la instancia real clonada están enlazados como lo están durante la inicialización, por lo que los accesos al clon del proxy son transmitidos al clon de la instancia real.
  </simpara>

  <simpara>
   Este comportamiento garantiza que el clon y el objeto original mantengan estados separados. Las modificaciones realizadas en el objeto original o en el estado de su inicializador después de la clonación no afectan al clon. Clonar tanto el proxy como su instancia real, en lugar de devolver un clon de la instancia real solamente, garantiza que la operación de clonación devuelva sistemáticamente un objeto de la misma clase.
  </simpara>
 </sect2>

 <sect2 xml:id="language.oop5.lazy-objects.destructors">
  <title>Destructores</title>

  <simpara>
   Para los objetos perezosos, el destructor solo es llamado si el objeto ha sido inicializado. Para los proxys, el destructor solo es llamado en la instancia real, si existe.
  </simpara>

  <simpara>
   Los métodos <methodname>ReflectionClass::resetAsLazyGhost</methodname> y <methodname>ReflectionClass::resetAsLazyProxy</methodname> pueden invocar el destructor del objeto reinicializado.
  </simpara>
 </sect2>
</sect1>
