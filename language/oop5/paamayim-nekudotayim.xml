<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: d6f54016d62904cfd8200604aadd5e3f0d9bad97 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="language.oop5.paamayim-nekudotayim" xmlns="http://docbook.org/ns/docbook">
 <title>El operador de resolución de ámbito (::)</title>

 <para>
  El operador de resolución de ámbito (también llamado Paamayim Nekudotayim) o,
  en términos más simples, el símbolo &quot;doble dos puntos&quot; (::),
  proporciona un medio para acceder a los miembros
  una <link linkend="language.oop5.constants">constante</link>,
  una propiedad <link linkend="language.oop5.static">estática</link>,
  o un método <link linkend="language.oop5.static">estático</link>
  de una clase o de una de sus clases padre.
  Además, las propiedades o métodos estáticos pueden ser sobrecargados vía
  la <link linkend="language.oop5.late-static-bindings">ligadura estática tardía</link>.

 </para>

 <para>
  Cuando se hace referencia a estos elementos fuera de la definición de
  la clase, se utiliza el nombre de la clase.
 </para>

 <para>
  Es posible referenciar una clase utilizando
  una variable. El valor de la variable no puede ser una palabra clave (e.g. <literal>self</literal>,
  <literal>parent</literal> y <literal>static</literal>).
 </para>

 <para>
  Paamayim Nekudotayim podría parecer al principio una elección extraña
  para nombrar un doble dos puntos.
  Sin embargo, en el momento de la escritura del <literal>Zend Engine 0.5</literal>
  (que hacía funcionar PHP 3), fue el nombre elegido por el equipo Zend.
  De hecho, esto significa un doble dos puntos... ¡en hebreo!
 </para>

 <example>
  <title>:: fuera de la definición de la clase</title>
  <programlisting role="php">
<![CDATA[
<?php
class MyClass {
    const CONST_VALUE = 'Un valor constante';
}

$classname = 'MyClass';
echo $classname::CONST_VALUE;

echo MyClass::CONST_VALUE;
?>
]]>
  </programlisting>
 </example>

 <para>
  Tres palabras clave especiales, <varname>self</varname>, <varname>parent</varname>,
  y <varname>static</varname> son utilizadas para acceder a las propiedades o a
  los métodos desde la definición de la clase.
 </para>

 <example>
  <title>:: desde la definición de la clase</title>
  <programlisting role="php">
<![CDATA[
<?php
class MyClass {
    const CONST_VALUE = 'Un valor constante';
}

class OtherClass extends MyClass
{
    public static $my_static = 'variable estática';

    public static function doubleColon() {
        echo parent::CONST_VALUE . "\n";
        echo self::$my_static . "\n";
    }
}

$classname = 'OtherClass';
$classname::doubleColon();

OtherClass::doubleColon();
?>
]]>
  </programlisting>
 </example>

 <para>
  Cuando una clase que hereda de otra redefine un método de su clase padre,
  PHP no llamará al método de la clase padre. Es responsabilidad del método derivado
  llamar al método original en caso de necesidad. Esto también es válido
  para las definiciones de los <link
  linkend="language.oop5.decon">constructores y destructores</link>,
  la <link linkend="language.oop5.overloading">sobrecarga</link>, y las
  definiciones de <link linkend="language.oop5.magic">métodos mágicos</link>.
 </para>

 <example>
  <title>Llamada a un método padre</title>
  <programlisting role="php">
<![CDATA[
<?php
class MyClass
{
    protected function myFunc() {
        echo "MyClass::myFunc()\n";
  }
}

class OtherClass extends MyClass
{
    // Sobrecarga de la definición padre
    public function myFunc() {

      // Pero llamada al método padre
      parent::myFunc();
      echo "OtherClass::myFunc()\n";
  }
}

$class = new OtherClass();
$class->myFunc();
?>
]]>
  </programlisting>
 </example>
  <para>
   Ver también <link linkend="language.oop5.basic.class.this">algunos
   ejemplos de llamadas estáticas</link>.
  </para>

</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
