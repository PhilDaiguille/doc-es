<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 18d46a26fdbfd076f4b8e0b0149fe68702e80d9c Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes -->
<sect1 xml:id="language.oop5.property-hooks" xmlns="http://docbook.org/ns/docbook">
 <title>Hooks de propiedad</title>

 <simpara>
  Los hooks de propiedad, también conocidos como "métodos de acceso de propiedad" en otros lenguajes,
  son una forma de interceptar y reemplazar el comportamiento de lectura y escritura de una propiedad.
  Esta funcionalidad sirve a dos fines:
 </simpara>
 <orderedlist>
  <listitem>
   <simpara>
    Permite utilizar propiedades directamente, sin necesidad de métodos get y set,
    dejando la posibilidad de añadir un comportamiento adicional en el futuro.
    Esto hace que la mayoría de los métodos get/set sean innecesarios,
    incluso sin usar hooks.
   </simpara>
  </listitem>
  <listitem>
   <simpara>
    Permite definir propiedades que describen un objeto sin almacenar
    directamente un valor.
   </simpara>
  </listitem>
 </orderedlist>
 <simpara>
  Existen dos hooks disponibles en las propiedades no estáticas: <literal>get</literal> y <literal>set</literal>.
  Permiten reemplazar el comportamiento de lectura y escritura de una propiedad, respectivamente.
  Los hooks están disponibles para propiedades tipadas y no tipadas.
 </simpara>
 <simpara>
  Un objeto puede ser "backed" o "virtual".
  Una propiedad "backed" es una propiedad que almacena efectivamente un valor.
  Cualquier propiedad que no tenga hooks es "backed".
  Una propiedad virtual es una propiedad que tiene hooks y estos hooks no interactúan con la propiedad misma.
  En este caso, los hooks son efectivamente los mismos que los métodos,
  y el objeto no utiliza espacio para almacenar un valor para esta propiedad.
 </simpara>
 <simpara>
  Los hooks de propiedad son incompatibles con las propiedades <literal>readonly</literal>.
  Si es necesario restringir el acceso a una operación <literal>get</literal> o <literal>set</literal>
  además de modificar su comportamiento, utilice
  <link linkend="language.oop5.visibility-members-aviz">la visibilidad asimétrica de propiedad</link>.
 </simpara>

 <note>
  <title>Información de versión</title>
  <simpara>
   Los hooks de propiedad fueron introducidos en PHP 8.4.
  </simpara>
 </note>

 <sect2>
  <title>Sintaxis básica de los hooks</title>
  <simpara>
   La sintaxis general para declarar un hook es la siguiente.
  </simpara>
  <example>
   <title>Hooks de propiedad (versión completa)</title>
   <programlisting role="php">
<![CDATA[
<?php
class Example
{
    private bool $modified = false;

    public string $foo = 'valor por omisión' {
        get {
            if ($this->modified) {
                return $this->foo . ' (modificado)';
            }
            return $this->foo;
        }
        set(string $value) {
            $this->foo = strtolower($value);
            $this->modified = true;
        }
    }
}

$example = new Example();
$example->foo = 'cambiado';
print $example->foo;
?>
]]>
   </programlisting>
  </example>
  <simpara>
   La propiedad <varname>$foo</varname> termina con <literal>{}</literal>, en lugar de un punto y coma.
   Esto indica la presencia de hooks.
   Se definen un hook <literal>get</literal> y un hook <literal>set</literal>,
   aunque es posible definir solo uno.
   Ambos hooks tienen un cuerpo, indicado por <literal>{}</literal>, que puede contener código arbitrario.
  </simpara>
  <simpara>
   El hook <literal>set</literal> también permite especificar el tipo y el nombre de un valor entrante,
   utilizando la misma sintaxis que una método.
   El tipo debe ser el mismo que el tipo de la propiedad,
   o <link linkend="language.oop5.variance.contravariance">contravariante</link> (más amplio) que este.
   Por ejemplo, una propiedad de tipo <type>string</type> podría tener
   un hook <literal>set</literal> que acepte un <type class="union"><type>string</type><type>Stringable</type></type>,
   pero no uno que acepte solo <type>array</type>.
  </simpara>
  <simpara>
   Al menos uno de los hooks hace referencia a <code>$this->foo</code>, la propiedad misma.
   Esto significa que la propiedad será "backed".
   Cuando se llama a <code>$example->foo = 'cambiado'</code>,
   la cadena proporcionada se convertirá primero en minúsculas y luego se guardará en el valor de respaldo.
   Al leer la propiedad, el valor previamente guardado puede ser condicionalmente complementado
   con texto adicional.
  </simpara>
  <simpara>
   Hay varias variantes de sintaxis abreviada para manejar los casos comunes.
  </simpara>
  <simpara>
   Si el hook <literal>get</literal> es una simple expresión,
   entonces los <literal>{}</literal> pueden ser omitidos y reemplazados por una expresión flecha.
  </simpara>
  <example>
   <title>Expresión de propiedad get</title>
   <simpara>
    Este ejemplo es equivalente al ejemplo anterior.
   </simpara>
   <programlisting role="php">
<![CDATA[
<?php
class Example
{
    private bool $modified = false;

    public string $foo = 'valor por omisión' {
        get => $this->foo . ($this->modified ? ' (modificado)' : '');

        set(string $value) {
            $this->foo = strtolower($value);
            $this->modified = true;
        }
    }
}
?>
]]>
   </programlisting>
  </example>
  <simpara>
   Si el tipo del parámetro del hook <literal>set</literal> es el mismo que el tipo de la propiedad (lo cual es típico),
   puede ser omitido. En este caso, el valor a definir se nombra automáticamente <varname>$value</varname>.
  </simpara>
  <example>
   <title>Parámetros por omisión de propiedad</title>
   <simpara>
    Este ejemplo es equivalente al ejemplo anterior.
   </simpara>
   <programlisting role="php">
<![CDATA[
<?php
class Example
{
    private bool $modified = false;

    public string $foo = 'valor por omisión' {
        get => $this->foo . ($this->modified ? ' (modificado)' : '');

        set {
            $this->foo = strtolower($value);
            $this->modified = true;
        }
    }
}
?>
]]>
   </programlisting>
  </example>
  <simpara>
   Si el hook <literal>set</literal> solo define una versión modificada del valor pasado,
   también puede simplificarse en una expresión flecha.
   El valor al que se evalúa la expresión se definirá en el valor de respaldo.
  </simpara>
  <example>
   <title>Expresión de propiedad set</title>
   <programlisting role="php">
<![CDATA[
<?php
class Example
{
    public string $foo = 'valor por omisión' {
        get => $this->foo . ($this->modified ? ' (modificado)' : '');
        set => strtolower($value);
    }
}
?>
]]>
   </programlisting>
  </example>
  <simpara>
   Este ejemplo no es completamente equivalente al anterior,
   ya que tampoco modifica <code>$this->modified</code>.
   Si se necesitan múltiples instrucciones en el cuerpo del hook, utilice la versión con llaves.
  </simpara>
  <simpara>
   Una propiedad puede implementar cero, uno o ambos hooks según la situación.
   Todas las versiones abreviadas son mutuamente independientes.
   Es decir, utilizar un atajo para obtener una definición larga,
   o un atajo para definir un tipo explícito, etc., es válido.
  </simpara>
  <simpara>
   En una propiedad "backed", omitir un hook <literal>get</literal> o <literal>set</literal>
   significa que se utilizará el comportamiento de lectura o escritura por omisión.
  </simpara>
  <note>
   <simpara>
    Los hooks pueden ser definidos al utilizar la
    <link linkend="language.oop5.decon.constructor.promotion">promoción de propiedades en el constructor</link>.
    Sin embargo, en este caso, los valores proporcionados
    al constructor deben coincidir con el tipo asociado a la propiedad,
    independientemente de lo que el hook <literal>set</literal> podría permitir.
   </simpara>
   <simpara>
    Considere el siguiente ejemplo:
   </simpara>
   <programlisting role="php">
<![CDATA[
<?php
class Example
{
    public function __construct(
        public private(set) DateTimeInterface $created {
            set (string|DateTimeInterface $value) {
                if (is_string($value)) {
                    $value = new DateTimeImmutable($value);
                }
                $this->created = $value;
            }
        },
    ) {
    }
}
]]>
   </programlisting>
   <simpara>
    Internamente, el motor descompone esto de la siguiente manera:
   </simpara>
   <programlisting role="php">
<![CDATA[
<?php
class Example
{
    public private(set) DateTimeInterface $created {
        set (string|DateTimeInterface $value) {
            if (is_string($value)) {
                $value = new DateTimeImmutable($value);
            }
            $this->created = $value;
        }
    }

    public function __construct(
        DateTimeInterface $created,
    ) {
        $this->created = $created;
    }
}
]]>
   </programlisting>
   <simpara>
    Cualquier intento de definir la propiedad fuera del constructor
    permitirá un <type>string</type> o un valor de tipo <interfacename>DateTimeInterface</interfacename>,
    pero el constructor solo permitirá <interfacename>DateTimeInterface</interfacename>.
    Esto se debe a que el tipo definido para la propiedad (<interfacename>DateTimeInterface</interfacename>)
    se utiliza como tipo de parámetro en la firma del constructor, independientemente de lo que
    el hook <literal>set</literal> permita.
   </simpara>
   <simpara>
    Si este tipo de comportamiento es necesario desde el constructor, la promoción
    de propiedades en el constructor no puede ser utilizada.
   </simpara>
</note>
 </sect2>
 <sect2 xml:id="language.oop5.property-hooks.virtual">
  <title>Propiedades virtuales</title>
  <simpara>
   Las propiedades virtuales son propiedades que no tienen un valor de respaldo.
   Una propiedad es virtual si ni su hook <literal>get</literal> ni su hook <literal>set</literal>
   hace referencia a la propiedad misma utilizando una sintaxis exacta.
   Es decir, una propiedad nombrada <code>$foo</code> cuyo hook contiene <code>$this->foo</code> será respaldada.
   Pero la siguiente propiedad no es una propiedad respaldada, y generará un error:
  </simpara>
  <example>
   <title>Propiedad virtual inválida</title>
   <programlisting role="php">
<![CDATA[
<?php
class Example
{
    public string $foo {
        get {
            $temp = __PROPERTY__;
            return $this->$temp; // No se refiere a $this->foo, por lo que no cuenta.
        }
    }
}
?>
]]>
   </programlisting>
  </example>
  <simpara>
   Para las propiedades virtuales, si se omite un hook, entonces esa operación
   no existe y tratar de utilizarla producirá un error.
   Las propiedades virtuales no ocupan espacio de memoria en un objeto.
   Las propiedades virtuales son adecuadas para las propiedades "derivadas",
   tales como las que son la combinación de dos otras propiedades.
  </simpara>
  <example>
   <title>Propiedad virtual</title>
   <programlisting role="php">
<![CDATA[
<?php
class Rectangle
{
    // Una propiedad virtual.
    public int $area {
        get => $this->h * $this->w;
    }

    public function __construct(public int $h, public int $w) {}
}

$s = new Rectangle(4, 5);
print $s->area; // muestra 20
$s->area = 30; // Error, ya que no hay operación de definición.
?>
]]>
   </programlisting>
  </example>
  <simpara>
   Definir tanto un hook <literal>get</literal> como un hook <literal>set</literal> en una propiedad virtual también está permitido.
  </simpara>
 </sect2>
 <sect2>
  <title>Alcance</title>
  <simpara>
   Todos los hooks funcionan en el alcance del objeto modificado.
   Esto significa que tienen acceso a todos los métodos públicos, privados o protegidos del objeto,
   así como a todas las propiedades públicas, privadas o protegidas,
   incluyendo las propiedades que pueden tener sus propios hooks de propiedad.
   Acceder a otra propiedad desde un hook no elude los hooks definidos en esa propiedad.
  </simpara>
  <simpara>
   La consecuencia más notable de esto es que los hooks no triviales pueden
   llamar a un método arbitrariamente complejo si lo desean.
  </simpara>
  <example>
   <title>Llamada a un método desde un hook</title>
   <programlisting role="php">
<![CDATA[
<?php
class Person {
    public string $phone {
        set => $this->sanitizePhone($value);
    }

    private function sanitizePhone(string $value): string {
        $value = ltrim($value, '+');
        $value = ltrim($value, '1');

        if (!preg_match('/\d\d\d\-\d\d\d\-\d\d\d\d/', $value)) {
            throw new \InvalidArgumentException();
        }
        return $value;
    }
}
?>
]]>
   </programlisting>
  </example>
 </sect2>
 <sect2>
  <title>Referencias</title>
  <simpara>
   Debido a que la presencia de hooks intercepta el proceso de lectura y escritura de las propiedades,
   plantean problemas al adquirir una referencia a una propiedad o con una modificación indirecta,
   tal como <code>$this->arrayProp['key'] = 'value';</code>.
   Esto se debe a que cualquier intento de modificar el valor por referencia eludiría un hook de definición
   si existiera uno.
  </simpara>
  <simpara>
   En el caso raro en que sea necesario obtener una referencia a una propiedad para la cual se definen hooks,
   el hook <literal>get</literal> puede ser prefijado por <literal>&amp;</literal>
   para que devuelva por referencia.
   Definir tanto <literal>get</literal> como <literal>&amp;get</literal> en la
   misma propiedad es un error de sintaxis.
  </simpara>
  <simpara>
   Definir tanto los hooks <literal>&amp;get</literal> como <literal>set</literal> en una propiedad "backed" no está permitido.
   Como se indicó anteriormente, escribir en el valor devuelto por referencia eludiría el hook <literal>set</literal>.
   En las propiedades virtuales, no hay un valor común necesario compartido entre los dos hooks, por lo que definir ambos está permitido.
  </simpara>
  <simpara>
   Escribir en un índice de una propiedad de array implica también una referencia implícita.
   Por esta razón, escribir en una propiedad de array "backed" con hooks definidos está permitido si y solo si
   define solo un hook <literal>&amp;get</literal>.
   En una propiedad virtual, escribir en el array devuelto por
   <literal>get</literal> o <literal>&amp;get</literal> es legal,
   pero si esto tiene un impacto en el objeto depende de la implementación del hook.
  </simpara>
  <simpara>
   Sobrecargar la propiedad de array completa está permitido, y se comporta de la misma manera que cualquier otra propiedad.
   Trabajar solo con elementos del array requiere atención especial.
  </simpara>
 </sect2>
 <sect2>
  <title>Herencia</title>
  <sect3>
   <title>Hooks finales</title>
   <simpara>
    Los hooks también pueden ser declarados <link linkend="language.oop5.final">final</link>,
    en cuyo caso no pueden ser reemplazados.
   </simpara>
   <example>
   <title>Hooks finales</title>
    <programlisting role="php">
<![CDATA[
<?php
class Utiliser
{
    public string $Utilisername {
        final set => strtolower($value);
    }
}

class Manager extends Utiliser
{
    public string $Utilisername {
        // Esto está permitido
        get => strtoupper($this->Utilisername);

        // Esto NO está permitido, ya que set es final en el padre.
        set => strtoupper($value);
    }
}
?>
]]>
    </programlisting>
   </example>
   <simpara>
    Una propiedad también puede ser declarada <link linkend="language.oop5.final">final</link>.
    Una propiedad final no puede ser redeclarada por una clase hija de ninguna manera,
    lo que excluye la modificación de los hooks o la ampliación de su acceso.
   </simpara>
   <simpara>
    Declarar hooks finales en una propiedad que es declarada final es redundante,
    y será silenciosamente ignorado.
    Es el mismo comportamiento que para los métodos finales.
   </simpara>
   <simpara>
    Una clase hija puede declarar o cambiar hooks individuales en una propiedad
    redefiniendo la propiedad y solo los hooks que desea reemplazar.
    Una clase hija también puede añadir hooks a una propiedad que no los tenía.
    Esto es esencialmente lo mismo que si los hooks fueran métodos.
   </simpara>
   <example>
    <title>Herencia de hook</title>
    <programlisting role="php">
<![CDATA[
<?php
class Point
{
    public int $x;
    public int $y;
}

class PositivePoint extends Point
{
    public int $x {
        set {
            if ($value < 0) {
                throw new \InvalidArgumentException('Too small');
            }
            $this->x = $value;
        }
    }
}
?>
]]>
    </programlisting>
   </example>
   <simpara>
    Cada hook reemplaza las implementaciones parentales de manera independiente.
    Si una clase hija añade hooks, cualquier valor por omisión definido en la propiedad es eliminado, y debe ser redeclarado.
    Es la misma coherencia con el funcionamiento de la herencia en las propiedades sin hooks.
   </simpara>
  </sect3>
  <sect3>
   <title>Acceso a los hooks parentales</title>
   <simpara>
    Un hook en una clase hija puede acceder a la propiedad de la clase padre utilizando la palabra clave
    <code>parent::$prop</code>, seguida del hook deseado.
    Por ejemplo, <code>parent::$propName::get()</code>.
    Esto puede ser leído como "acceder a la <varname>prop</varname> definida en la clase padre,
    luego ejecutar su operación get" (o set, según el caso).
   </simpara>
   <simpara>
    Si no se accede de esta manera, el hook de la clase padre es ignorado.
    Este comportamiento es coherente con el funcionamiento de todos los métodos.
    Esto también proporciona una manera de acceder al almacenamiento de la clase padre, si es necesario.
    Si no hay un hook en la propiedad padre,
    su comportamiento por omisión get/set será utilizado.
    Los hooks no pueden acceder a otro hook que no sea su propio padre en su propia propiedad.
   </simpara>
   <simpara>
    El ejemplo anterior podría ser reescrito de la siguiente manera, lo que permitiría a la
    clase <literal>Point</literal> añadir su propio hook <literal>set</literal>
    en el futuro sin problemas (en el ejemplo anterior, un hook añadido a la
    clase padre sería ignorado en la clase hija).
   </simpara>
   <example>
    <title>Acceso a los hooks parentales (set)</title>
    <programlisting role="php">
<![CDATA[
<?php
class Point
{
    public int $x;
    public int $y;
}

class PositivePoint extends Point
{
    public int $x {
        set {
            if ($value < 0) {
                throw new \InvalidArgumentException('Too small');
            }
            parent::$x::set($value);
        }
    }
}
?>
]]>
    </programlisting>
   </example>
   <simpara>
    Un ejemplo de reemplazo de solo un hook get podría ser:
   </simpara>
   <example>
    <title>Acceso a los hooks parentales (get)</title>
    <programlisting role="php">
<![CDATA[
<?php
class Strings
{
    public string $val;
}

class CaseFoldingStrings extends Strings
{
    public bool $uppercase = true;

    public string $val {
        get => $this->uppercase
            ? strtoupper(parent::$val::get())
            : strtolower(parent::$val::get());
    }
}
?>
]]>
    </programlisting>
   </example>
  </sect3>
 </sect2>
 <sect2>
  <title>Serialización</title>
  <simpara>
   PHP tiene varias formas diferentes de serializar un objeto,
   ya sea para consumo público o para fines de depuración.
   El comportamiento de los hooks varía según el uso.
   En algunos casos, el valor bruto de respaldo de una propiedad será utilizado,
   eludiendo cualquier hook.
   En otros, la propiedad será leída o escrita "a través" del hook,
   como cualquier otra acción de lectura/escritura normal.
  </simpara>
  <simplelist>
   <member><function>var_dump</function>: Utiliza el valor bruto</member>
   <member><function>serialize</function>: Utiliza el valor bruto</member>
   <member><function>unserialize</function>: Utiliza el valor bruto</member>
   <member><link linkend="object.serialize">__serialize()</link>/<link linkend="object.unserialize">__unserialize()</link>: Lógica propia, utiliza los hooks de recuperación/definición</member>
   <member>Array casting: Utiliza el valor bruto</member>
   <member><function>var_export</function>: Utiliza el hook de recuperación</member>
   <member><function>json_encode</function>: Utiliza el hook de recuperación</member>
   <member><interfacename>JsonSerializable</interfacename>: Lógica propia, utiliza el hook de recuperación</member>
   <member><function>get_object_vars</function>: Utiliza el hook de recuperación</member>
   <member><function>get_mangled_object_vars</function>: Utiliza el valor bruto</member>
  </simplelist>
 </sect2>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
