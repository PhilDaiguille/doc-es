<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 6a3ce2f9a191ad00fdd709c249e6dea16df316e3 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="language.oop5.changelog" xmlns="http://docbook.org/ns/docbook">
 <title>Modificaciones en POO (Programación orientada a objetos)</title>
 <para>
  Los cambios del modelo de objetos de PHP se recogen aquí. Más información
  y otras notas pueden encontrarse en la documentación sobre POO en PHP.
 </para>
 <para>
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.4.0</entry>
      <entry>
       Adición: Soporte para los <link linkend="language.oop5.property-hooks">hooks de propiedad</link>.
      </entry>
     </row>
     <row>
      <entry>8.4.0</entry>
      <entry>
       Adición: Soporte de los <link linkend="language.oop5.lazy-objects">objetos perezosos</link>.
      </entry>
     </row>
     <row>
      <entry>8.1.0</entry>
      <entry>
       Adición: Soporte para el modificador <modifier>final</modifier> para las constantes de clase.
       Además, las constantes de interfaces pueden ser redefinidas por omisión.
      </entry>
     </row>
     <row>
      <entry>8.0.0</entry>
      <entry>
       Adición: Soporte del operador <link linkend="language.oop5.basic.nullsafe">nullsafe</link> <emphasis>?-&gt;</emphasis>
       para acceder a las propiedades y métodos sobre objetos que pueden ser null.
      </entry>
     </row>
     <row>
      <entry>7.4.0</entry>
      <entry>
       Cambio: Es ahora posible lanzar excepciones dentro de <function>__toString</function>.
      </entry>
     </row>
     <row>
      <entry>7.4.0</entry>
      <entry>
       Adición: Soporte limitado para la covarianza del tipo de retorno y
       contravarianza para el tipo de argumento. Soporte completo de varianza está
       únicamente disponible si el autocargado es utilizado. Dentro
       de un fichero único solo las referencias no-cíclicas de tipo son
       posibles.
      </entry>
     </row>
     <row>
      <entry>7.4.0</entry>
      <entry>
       Adición: Es ahora posible tipar las propiedades de clase.
      </entry>
     </row>
     <row>
      <entry>7.3.0</entry>
      <entry>
       Incompatibilidad: El desempaquetado de argumento de
       <classname>Traversable</classname>s con claves no-&integer;es ya no es soportado. Este comportamiento no estaba previsto y por consiguiente
       fue eliminado.
      </entry>
     </row>
     <row>
      <entry>7.3.0</entry>
      <entry>
       Incompatibilidad: En versiones anteriores era posible separar las propiedades estáticas asignando una referencia.
       Esto ha sido eliminado.
      </entry>
     </row>
     <row>
      <entry>7.3.0</entry>
      <entry>
       Cambio: El operador <link linkend="language.operators.type">
       instanceof</link> permite ahora literales como primer
       operando, en este caso el resultado es siempre &false;.
      </entry>
     </row>
     <row>
      <entry>7.2.0</entry>
      <entry>
       Obsoleto: El método <function>__autoload</function> ha sido declarado
       obsoleto en favor de <function>spl_autoload_register</function>.
      </entry>
     </row>
     <row>
      <entry>7.2.0</entry>
      <entry>
       Cambio: El siguiente nombre no puede ser utilizado para nombrar
       clases, interfaces o traits: <literal>object</literal>.
      </entry>
     </row>
     <row>
      <entry>7.2.0</entry>
      <entry>
       Cambio: Una coma colgante puede ahora ser añadida a la
       sintaxis use agrupada para los espacios de nombres.
      </entry>
     </row>
     <row>
      <entry>7.2.0</entry>
      <entry>
       Cambio: Ampliación del tipo de los parámetros. El tipo de los
       parámetros de los métodos reescritos y de implementación de interfaz
       puede ahora ser omitido.
      </entry>
     </row>
     <row>
      <entry>7.2.0</entry>
      <entry>
       Cambio: Los métodos abstractos pueden ahora ser reescritos cuando una clase abstracta extiende otra clase abstracta.
      </entry>
     </row>
     <row>
      <entry>7.1.0</entry>
      <entry>
       Cambio: Los siguientes nombres no pueden ser utilizados para nombrar
       clases, interfaces o traits: <literal>void</literal>
       y <literal>iterable</literal>.
      </entry>
     </row>
     <row>
      <entry>7.1.0</entry>
      <entry>
       Adición: Es ahora posible definir la
       <link linkend="language.oop5.visiblity-constants">visibilidad de las
        constantes de clase</link>.
      </entry>
     </row>
     <row>
      <entry>7.0.0</entry>
      <entry>
       Obsoleto: Llamada <link linkend="language.oop5.static">estática</link>
       a métodos que no están declarados como estáticos.
      </entry>
     </row>
     <row>
      <entry>7.0.0</entry>
      <entry>
       Obsoleto: <link linkend="language.oop5.decon">Constructor</link>
       estilo PHP 4. Es decir, los métodos que tienen el mismo nombre que la clase
       en la que están definidos.
      </entry>
     </row>
     <row>
      <entry>7.0.0</entry>
      <entry>
       Adición: Declaración <emphasis>use</emphasis> agrupada: las clases,
       funciones y constantes que son importadas desde un mismo espacio de nombres
       pueden ahora ser agrupadas juntas en una sola declaración use.
      </entry>
     </row>
     <row>
      <entry>7.0.0</entry>
      <entry>
       Adición: Soporte para las
       <link linkend="language.oop5.anonymous">clases anónimas</link>
       ha sido añadido gracias a <literal>new class</literal>.
      </entry>
     </row>
     <row>
      <entry>7.0.0</entry>
      <entry>
       Incompatibilidad: Iterar sobre un &object; no-
       <classname>Traversable</classname> tendrá ahora el mismo comportamiento
       que iterar sobre los &array;s por referencia.
      </entry>
     </row>
     <row>
      <entry>7.0.0</entry>
      <entry>
       Cambio: La definición de propiedades (compatibles) en dos
       <link linkend="language.oop5.traits">traits</link>
       utilizados ya no provoca un error.
      </entry>
     </row>
     <row>
      <entry>5.6.0</entry>
      <entry>
       Adición: El método <link linkend="object.debuginfo">__debugInfo()</link>.
      </entry>
     </row>
     <row>
      <entry>5.5.0</entry>
      <entry>
       Adición: La constante mágica <link linkend="language.oop5.basic.class.class">::class</link>.
      </entry>
     </row>
     <row>
      <entry>5.5.0</entry>
      <entry>
       Adición: <link linkend="language.exceptions">finally</link> para manejar
       las excepciones.
      </entry>
     </row>
     <row>
      <entry>5.4.0</entry>
      <entry>
       Adición: <link linkend="language.oop5.traits">traits</link>.
      </entry>
     </row>
     <row>
      <entry>5.4.0</entry>
      <entry>
       Cambio: Si una clase
       <link linkend="language.oop5.abstract">abstracta</link> define
       una firma para el <link linkend="language.oop5.decon">constructor
       </link>, esta será ahora aplicada.
      </entry>
     </row>
     <row>
      <entry>5.3.3</entry>
      <entry>
       Cambio: Los métodos con el mismo nombre que el último elemento en un
       <link linkend="language.namespaces">espacio de nombres</link>
       ya no son considerados como un <link
       linkend="language.oop5.decon">constructor</link>. Este cambio
       no afecta a las clases sin espacio de nombres.
      </entry>
     </row>
      <row>
      <entry>5.3.0</entry>
      <entry>
       Cambio: Las clases que implementan una interfaz con métodos que tienen valores por omisión definidos en sus prototipos ya no están obligadas a respetar los valores por omisión definidos en la interfaz.
      </entry>
     </row>
     <row>
      <entry>5.3.0</entry>
      <entry>
       Cambio: Es ahora posible referenciar una clase utilizando una variable (e.g. :
       <literal>echo $classname::constant;</literal>).
       El valor de la variable no puede ser una palabra clave (e.g. :
       <literal>self</literal>,
       <literal>parent</literal> o <literal>static</literal>).
      </entry>
     </row>
     <row>
      <entry>5.3.0</entry>
      <entry>
       Cambio: Un error de nivel <constant>E_WARNING</constant> es emitido si los métodos mágicos de
       <link linkend="language.oop5.overloading">sobrecarga</link> son
       declarados como <link linkend="language.oop5.static">estáticos</link>.
       La visibilidad pública también es requerida.
      </entry>
     </row>
     <row>
      <entry>5.3.0</entry>
      <entry>
       Cambio: Anteriormente a 5.3.0, las excepciones lanzadas en la función
       <function>__autoload</function> no podían ser tratadas en un bloque
       <link linkend="language.exceptions">catch</link> y resultaban en un error fatal. Ahora, las excepciones lanzadas en la función
       __autoload pueden ser capturadas en un bloque
       <link linkend="language.exceptions">catch</link> y tratadas.
       Si una excepción personalizada es lanzada, entonces su clase debe estar disponible. La función __autoload puede ser utilizada recursivamente para
       autocargar la clase de excepción personalizada.
      </entry>
     </row>
     <row>
      <entry>5.3.0</entry>
      <entry>
       Adición: El método <link linkend="language.oop5.overloading">__callStatic</link>.
      </entry>
     </row>
     <row>
      <entry>5.3.0</entry>
      <entry>
       Adición: <link linkend="language.types.string.syntax.heredoc">heredoc</link>
       y <link linkend="language.types.string.syntax.nowdoc">nowdoc</link>
       son soportadas para definir las <emphasis>constantes</emphasis> de
       clases y las propiedades.
       Nota: Los valores heredoc deben seguir las mismas reglas que los
       &string; rodeados de comillas dobles (e.g. sin variables dentro).
      </entry>
     </row>
     <row>
      <entry>5.3.0</entry>
      <entry>
       Adición: <link linkend="language.oop5.late-static-bindings">Resolución
       Estática Tardía</link>.
      </entry>
     </row>
     <row>
      <entry>5.3.0</entry>
      <entry>
       Adición: El método <link linkend="object.invoke">__invoke()</link>.
      </entry>
     </row>
     <row>
      <entry>5.2.0</entry>
      <entry>
       Cambio: El método <link linkend="object.tostring">__toString()</link>
       solo era llamado en llamadas a <function>echo</function> o
       <function>print</function>.
       Ahora, es llamado en cualquier contexto de &string;
       (e.g. en <function>printf</function> con el modificador
       <literal>%s</literal>) pero no en otros contextos (e.g. con
       el modificador <literal>%d</literal>).
       A partir de PHP 5.2.0, convertir un &object; sin método
       <link linkend="object.tostring">__toString</link> en &string;
       emite un error <constant>E_RECOVERABLE_ERROR</constant>.
      </entry>
     </row>
     <row>
      <entry>5.1.3</entry>
      <entry>
       Cambio: En versiones anteriores de PHP 5, el uso de
       <literal>var</literal> era considerado obsoleto y emitía un error <constant>E_STRICT</constant>. Ya no es el caso.
      </entry>
     </row>
     <row>
      <entry>5.1.0</entry>
      <entry>
       Cambio: El método estático
       <link linkend="object.set-state">__set_state()</link> es ahora
       llamado para las clases exportadas vía <function>var_export</function>.
      </entry>
     </row>
     <row>
      <entry>5.1.0</entry>
      <entry>
       Adición: Métodos <link linkend="object.isset">__isset()</link>
       y <link linkend="object.unset">__unset()</link>.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </para>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
