<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: c1f37a6c270aadbbb3da56a3973ffd62197adf2b Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="language.oop5.properties" xmlns="http://docbook.org/ns/docbook">
 <title>Propiedades</title>

 <para>
  Las variables dentro de una clase se denominan <emphasis>propiedades</emphasis>.
  También pueden encontrarse bajo otros nombres como
  <emphasis>campos</emphasis>, pero en esta documentación se utilizará
  <emphasis>propiedad</emphasis>. Se definen utilizando al menos un modificador (como
  <xref linkend="language.oop5.visibility"/>,
  <xref linkend="language.oop5.static"/>, o, a partir de PHP 8.1.0,
  <link linkend="language.oop5.properties.readonly-properties">readonly</link>),
  seguido opcionalmente (excepto para las propiedades <code>readonly</code>),
  a partir de PHP 7.4, de una declaración de tipo,
  seguido de una declaración clásica de variable.
  Esta declaración puede incluir una inicialización, pero esta debe
  ser un valor <link linkend="language.constants">constante</link>
 </para>
 <note>
  <para>
   Una forma obsoleta de declarar una propiedad de clase es utilizar
   la palabra clave <literal>var</literal> en lugar de un modificador.
  </para>
 </note>
 <note>
  <simpara>
   Una propiedad declarada sin modificador de <xref linkend="language.oop5.visibility"/>
   será declarada como <literal>public</literal>.
  </simpara>
 </note>
 <para>
  Dentro de los métodos de clase, las propiedades no estáticas pueden ser
  llamadas utilizando la sintaxis <literal>-&gt;</literal> (operador de objeto) :
  <varname>$this-&gt;property</varname> (donde <literal>property</literal> es el
  nombre de la propiedad). Las propiedades estáticas pueden ser llamadas utilizando la sintaxis <literal>::</literal> (dos puntos) :
  <varname>self::$property</varname>. Consulte la documentación sobre
  <xref linkend="language.oop5.static" /> para más información
  sobre la diferencia entre las propiedades estáticas y no estáticas.
 </para>
 <para>
  La pseudo-variable <varname>$this</varname> está disponible dentro de cualquier
  método, cuando este método es llamado dentro de un objeto.
  <varname>$this</varname> es el valor del objeto que llama.
 </para>

 <para>
  <example>
   <title>Declaraciones de propiedades</title>
   <programlisting role="php" annotations="non-interactive">
<![CDATA[
<?php
class SimpleClass
{
   public $var1 = 'hello ' . 'world';
   public $var2 = <<<EOD
hello world
EOD;
   public $var3 = 1+2;
   // declaración de propiedad inválida :
   public $var4 = self::myStaticMethod();
   public $var5 = $myVar;

   // Declaraciones válidas de propiedades :
   public $var6 = myConstant;
   public $var7 = [true, false];
   public $var8 = <<<'EOD'
hello world
EOD;

   // Sin modificador de visibilidad :
   static $var9;
   readonly int $var10;
}
?>
]]>
   </programlisting>
  </example>
 </para>

 <note>
  <para>
   Existen diversas funciones que permiten gestionar clases y objetos.
   Ver la referencia sobre las <link linkend="ref.classobj">Funciones Clases/Objetos</link>.
  </para>
 </note>

  <sect2 xml:id="language.oop5.properties.typed-properties">
   <title>Declaraciones de tipos</title>

  <para>
   A partir de PHP 7.4.0, las definiciones de propiedades pueden incluir una
   <xref linkend="language.types.declarations" />,
   con la excepción del tipo <literal>callable</literal>.
   <example>
    <title>Ejemplo de propiedades tipadas</title>
    <programlisting role="php" annotations="non-interactive">
<![CDATA[
<?php

class User
{
    public int $id;
    public ?string $name;

    public function __construct(int $id, ?string $name)
    {
        $this->id = $id;
        $this->name = $name;
    }
}

$user = new User(1234, null);

var_dump($user->id);
var_dump($user->name);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
int(1234)
NULL
]]>
    </screen>
   </example>
  </para>
   <para>
    Las propiedades tipadas deben ser inicializadas antes de acceder a ellas, de lo contrario,
    se emitirá un <classname>Error</classname>.
    <example>
     <title>Acceso a las propiedades</title>
     <programlisting role="php">
<![CDATA[
<?php

class Shape
{
    public int $numberOfSides;
    public string $name;

    public function setNumberOfSides(int $numberOfSides): void
    {
        $this->numberOfSides = $numberOfSides;
    }

    public function setName(string $name): void
    {
        $this->name = $name;
    }

    public function getNumberOfSides(): int
    {
        return $this->numberOfSides;
    }

    public function getName(): string
    {
        return $this->name;
    }
}

$triangle = new Shape();
$triangle->setName("triangle");
$triangle->setNumberofSides(3);
var_dump($triangle->getName());
var_dump($triangle->getNumberOfSides());

$circle = new Shape();
$circle->setName("circle");
var_dump($circle->getName());
var_dump($circle->getNumberOfSides());
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
string(8) "triangle"
int(3)
string(6) "circle"

Fatal error: Uncaught Error: Typed property Shape::$numberOfSides must not be accessed before initialization
]]>
     </screen>
    </example>
   </para>
  </sect2>

 <sect2 xml:id="language.oop5.properties.readonly-properties">
  <title>Propiedades de solo lectura (readonly)</title>
  <para>
   A partir de PHP 8.1.0, una propiedad puede ser declarada con el modificador <literal>readonly</literal>,
   que impide la modificación de la propiedad después de la inicialización.   Antes de PHP 8.4.0
    una propiedad <literal>readonly</literal> es implícitamente privada-modificable, y solo puede ser escrita
    desde la misma clase. A partir de PHP 8.4.0, las propiedades <literal>readonly</literal> son implícitamente
    <link linkend="language.oop5.visibility-members-aviz"><literal>protected(set)</literal></link>,
    por lo que pueden ser definidas desde clases hijas. Esto puede ser reemplazado
    explícitamente si se desea.
   <example>
    <title>Ejemplo de propiedades de solo lectura</title>
    <programlisting role="php">
<![CDATA[
<?php

class Test {
   public readonly string $prop;

   public function __construct(string $prop) {
       // Inicialización legal.
       $this->prop = $prop;
   }
}

$test = new Test("foobar");
// Lectura legal.
var_dump($test->prop); // string(6) "foobar"

// Reasignación ilegal. No importa que el valor asignado sea idéntico.
$test->prop = "foobar";
// Error: Cannot modify readonly property Test::$prop
?>
]]>
    </programlisting>
   </example>
   <note>
    <para>
     El modificador de solo lectura solo puede ser aplicado a
     <link linkend="language.oop5.properties.typed-properties">propiedades tipadas</link>.
     Una propiedad de solo lectura sin restricción de tipo puede ser creada utilizando el tipo <xref linkend="language.types.mixed" />.
    </para>
   </note>
   <note>
    <para>
     Las propiedades estáticas de solo lectura no son soportadas.
    </para>
   </note>
  </para>
  <para>
   Una propiedad de solo lectura solo puede ser inicializada una vez,
   y solo desde el ámbito en el que fue declarada. Cualquier otra asignación o modificación de la propiedad resultará en una
   excepción <classname>Error</classname>.
   <example>
    <title>Inicialización ilegal de propiedades de solo lectura</title>
    <programlisting role="php" annotations="non-interactive">
<![CDATA[
<?php
class Test1 {
    public readonly string $prop;
}

$test1 = new Test1;
// Inicialización ilegal fuera del ámbito privado.
$test1->prop = "foobar";
// Error: Cannot initialize readonly property Test1::$prop from global scope
?>
]]>
    </programlisting>
   </example>
  </para>
  <note>
   <para>
    Especificar un valor por defecto explícito a una propiedad de solo lectura
    no está permitido, ya que una propiedad de solo lectura con un valor por defecto es esencialmente idéntica a una constante, y por lo tanto no particularmente útil.
    <informalexample>
     <programlisting role="php" annotations="non-interactive">
<![CDATA[
<?php

class Test {
    // Fatal error: Readonly property Test::$prop cannot have default value
    public readonly int $prop = 42;
}
?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </note>
  <note>
   <para>
    Las propiedades de solo lectura no pueden ser
    <function>unset</function> una vez que han sido inicializadas.
    Sin embargo, es posible unset una propiedad de solo lectura antes
    de su inicialización, desde el ámbito donde la propiedad fue declarada.
   </para>
  </note>
  <para>
   Las modificaciones no son necesariamente asignaciones simples,
   todos los ejemplos siguientes resultarán en una excepción <classname>Error</classname> :
   <informalexample>
    <programlisting role="php" annotations="non-interactive">
<![CDATA[
<?php

class Test {
    public function __construct(
        public readonly int $i = 0,
        public readonly array $ary = [],
    ) {}
}

$test = new Test;
$test->i += 1;
$test->i++;
++$test->i;
$test->ary[] = 1;
$test->ary[0][] = 1;
$ref =& $test->i;
$test->i =& $ref;
byRef($test->i);
foreach ($test as &$prop);
?>
]]>
    </programlisting>
   </informalexample>
  </para>
  <para>
   Sin embargo, las propiedades de solo lectura no excluyen la mutabilidad interna.
   Los objetos (o recursos) almacenados en las propiedades de solo lectura
   pueden seguir siendo modificados internamente :
   <informalexample>
    <programlisting role="php" annotations="non-interactive">
<![CDATA[
<?php

class Test {
    public function __construct(public readonly object $obj) {}
}

$test = new Test(new stdClass);
// Mutación interna legal.
$test->obj->foo = 1;
// Reasignación ilegal.
$test->obj = new stdClass;
?>
]]>
    </programlisting>
   </informalexample>
  </para>
  <para>
   A partir de PHP 8.3.0, las propiedades de solo lectura pueden ser reinicializadas al clonar un objeto
   utilizando el método <link linkend="object.clone">__clone()</link>.
   <example>
    <title>Propiedades de solo lectura y clonación</title>
    <programlisting role="php">
<![CDATA[
<?php
class Test1 {
    public readonly ?string $prop;

    public function __clone() {
        $this->prop = null;
    }

    public function setProp(string $prop): void {
        $this->prop = $prop;
    }
}

$test1 = new Test1;
$test1->setProp('foobar');

$test2 = clone $test1;
var_dump($test2->prop); // NULL
?>
]]>
    </programlisting>
   </example>
  </para>
 </sect2>

 <sect2 xml:id="language.oop5.properties.dynamic-properties">
  <title>Propiedades Dinámicas</title>
  <para>
   Al intentar asignar a una propiedad no existente en un
   &object;, PHP creará automáticamente una propiedad correspondiente.
   Esta propiedad creada dinámicamente estará <emphasis>únicamente</emphasis>
   disponible en esta instancia de clase.
  </para>

  <warning>
   <simpara>
    Las propiedades dinámicas están obsoletas a partir de PHP 8.2.0.
    Se recomienda declarar la propiedad en su lugar.
    Para manejar nombres de propiedades arbitrarios, la clase debería implementar
    los métodos mágicos <link linkend="object.get">__get()</link> y
    <link linkend="object.set">__set()</link>.
    Como último recurso, la clase puede ser marcada con el atributo
    <code>#[\AllowDynamicProperties]</code>.
   </simpara>
  </warning>
 </sect2>

</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
