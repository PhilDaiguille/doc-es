<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: c1f37a6c270aadbbb3da56a3973ffd62197adf2b Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no Maintainer: itanea -->
<sect1 xml:id="language.oop5.traits" xmlns="http://docbook.org/ns/docbook">
 <title>Traits</title>
 <para>
  PHP implementa una manera de reutilizar código llamada Traits.
 </para>
 <para>
  Los traits son un mecanismo de reutilización de código en un lenguaje de herencia simple
  como PHP. Un trait intenta reducir ciertas limitaciones de la herencia simple, permitiendo
  al desarrollador reutilizar un cierto número de métodos en clases independientes. La sémantica entre las clases y los traits reduce la complejidad y evita los problemas
  típicos de la herencia múltiple y los Mixins.
 </para>
 <para>
  Un trait es similar a una clase, pero solo sirve para agrupar funcionalidades de una
  manera interesante. No es posible instanciar un Trait en sí mismo. Es un
  añadido a la herencia tradicional, que permite la composición horizontal de comportamientos,
  es decir, el uso de métodos de clase sin necesidad de herencia.
 </para>

 <example xml:id="language.oop5.traits.basicexample">
  <title>Ejemplo de uso de Trait</title>
  <programlisting role="php">
<![CDATA[
<?php

trait TraitA {
    public function sayHello() {
        echo 'Hello';
    }
}

trait TraitB {
    public function sayWorld() {
        echo 'World';
    }
}

class MyHelloWorld
{
    use TraitA, TraitB; // Una clase puede usar múltiples traits

    public function sayHelloWorld() {
        $this->sayHello();
        echo ' ';
        $this->sayWorld();
        echo "!\n";
    }
}

$myHelloWorld = new MyHelloWorld();
$myHelloWorld->sayHelloWorld();

?>
]]>
  </programlisting>
  &example.outputs;
  <screen>
<![CDATA[
Hello World!
]]>
  </screen>
 </example>

 <sect2 xml:id="language.oop5.traits.precedence">
  <title>Precedencia</title>
  <para>
   Un método heredado desde una clase madre es sobrescrito por un método proveniente de un Trait.
   El orden de precedencia hace que los métodos de la clase actual
   sobrescriban los métodos provenientes de un Trait, ellos mismos sobrecargando los métodos heredados.
  </para>
  <example xml:id="language.oop5.traits.precedence.examples.ex1">
   <title>Ejemplo con el orden de precedencia</title>
   <para>
    Un método heredado desde la clase base es sobrescrito por el que proviene
    del Trait. No es el caso de los métodos reales, escritos en la clase base.
   </para>
   <programlisting role="php">
<![CDATA[
<?php
class Base {
    public function sayHello() {
        echo 'Hello ';
    }
}

trait SayWorld {
    public function sayHello() {
        parent::sayHello();
        echo 'World!';
    }
}

class MyHelloWorld extends Base {
    use SayWorld;
}

$o = new MyHelloWorld();
$o->sayHello();
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Hello World!
]]>
   </screen>
  </example>
  <example xml:id="language.oop5.traits.precedence.examples.ex2">
   <title>Otro ejemplo de orden de precedencia</title>
   <programlisting role="php">
<![CDATA[
<?php
trait HelloWorld {
    public function sayHello() {
        echo 'Hello World!';
    }
}

class TheWorldIsNotEnough {
    use HelloWorld;
    public function sayHello() {
        echo 'Hello Universe!';
    }
}

$o = new TheWorldIsNotEnough();
$o->sayHello();
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Hello Universe!
]]>
   </screen>
  </example>
 </sect2>

 <sect2 xml:id="language.oop5.traits.multiple">
  <title>Múltiples Traits</title>
  <para>
   Una clase puede usar múltiples Traits declarándolos con la
   palabra clave <literal>use</literal>, separados por comas.
  </para>
  <example xml:id="language.oop5.traits.multiple.ex1">
   <title>Uso de varios Traits</title>
   <programlisting role="php">
<![CDATA[
<?php
trait Hello {
    public function sayHello() {
        echo 'Hello ';
    }
}

trait World {
    public function sayWorld() {
        echo 'World';
    }
}

class MyHelloWorld {
    use Hello, World;
    public function sayExclamationMark() {
        echo '!';
    }
}

$o = new MyHelloWorld();
$o->sayHello();
$o->sayWorld();
$o->sayExclamationMark();
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Hello World!
]]>
   </screen>
  </example>
 </sect2>

 <sect2 xml:id="language.oop5.traits.conflict">
  <title>Resolución de conflictos</title>
  <para>
   Si dos Traits insertan un método con el mismo nombre, se produce un error fatal si el conflicto no es
   explícitamente resuelto.
  </para>
  <para>
   Para resolver un conflicto de nombres entre Traits usados en la misma clase, se debe usar el operador
   <literal>insteadof</literal> para elegir uno de los métodos en conflicto.
  </para>
  <para>
   Dado que este principio solo permite excluir métodos,
   el operador <literal>as</literal> puede ser usado para permitir
   la inclusión de uno de los métodos conflictivos bajo otro nombre. Se debe tener en cuenta que
   el operador <literal>as</literal> no renombra el método y no afecta
   a otros métodos tampoco.
  </para>
  <example xml:id="language.oop5.traits.conflict.ex1">
   <title>Resolución de conflictos</title>
   <para>
    En este ejemplo, la clase Talker usa los traits A y B.
    Como A y B tienen métodos conflictivos, se indica que se desea usar
    la variante de smallTalk desde el trait B, y la variante de bigTalk desde el
    trait A.
   </para>
   <para>
    La clase Aliased_Talker usa el operador <literal>as</literal>
    para poder usar la implementación bigTalk de B bajo un alias
    adicional <literal>talk</literal>.
   </para>
   <programlisting role="php" annotations="non-interactive">
<![CDATA[
<?php
trait A {
    public function smallTalk() {
        echo 'a';
    }
    public function bigTalk() {
        echo 'A';
    }
}

trait B {
    public function smallTalk() {
        echo 'b';
    }
    public function bigTalk() {
        echo 'B';
    }
}

class Talker {
    use A, B {
        B::smallTalk insteadof A;
        A::bigTalk insteadof B;
    }
}

class Aliased_Talker {
    use A, B {
        B::smallTalk insteadof A;
        A::bigTalk insteadof B;
        B::bigTalk as talk;
    }
}
?>
]]>
   </programlisting>
  </example>
 </sect2>

 <sect2 xml:id="language.oop5.traits.visibility">
  <title>Cambiar la visibilidad de los métodos</title>
  <para>
   Usando la sintaxis <literal>as</literal>, también se puede ajustar
   la visibilidad del método en la clase que lo usa.
  </para>
  <example xml:id="language.oop5.traits.visibility.ex1">
   <title>Cambiar la visibilidad de los métodos</title>
   <programlisting role="php" annotations="non-interactive">
<![CDATA[
<?php
trait HelloWorld {
    public function sayHello() {
        echo 'Hello World!';
    }
}

// Modificación de la visibilidad del método sayHello
class MyClass1 {
    use HelloWorld { sayHello as protected; }
}

// Uso de un alias al modificar la visibilidad
// La visibilidad del método sayHello no es modificada
class MyClass2 {
    use HelloWorld { sayHello as private myPrivateHello; }
}
?>
]]>
   </programlisting>
  </example>
 </sect2>

 <sect2 xml:id="language.oop5.traits.composition">
  <title>Traits Compuestos desde otros Traits</title>
  <para>
   Al igual que las clases pueden usar traits, otros traits también pueden hacerlo. Un trait puede, por lo tanto, usar otros traits y heredar
   todo o parte de ellos.
  </para>
  <example xml:id="language.oop5.traits.composition.ex1">
   <title>Traits Compuestos desde otros Traits</title>
   <programlisting role="php">
<![CDATA[
<?php
trait Hello {
    public function sayHello() {
        echo 'Hello ';
    }
}

trait World {
    public function sayWorld() {
        echo 'World!';
    }
}

trait HelloWorld {
    use Hello, World;
}

class MyHelloWorld {
    use HelloWorld;
}

$o = new MyHelloWorld();
$o->sayHello();
$o->sayWorld();
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Hello World!
]]>
   </screen>
  </example>
 </sect2>

 <sect2 xml:id="language.oop5.traits.abstract">
  <title>Métodos abstractos en los Traits</title>
  <para>
   Los traits soportan el uso de métodos abstractos para imponer
   restricciones a las clases subyacentes. Se soportan los métodos públicos, protegidos,
   y privados.
   Anterior a PHP 8.0.0, solo se soportaban los métodos públicos y protegidos abstractos.
  </para>
  <caution>
    <simpara>
     A partir de PHP 8.0.0, la firma de un método concreto debe seguir las
     <link linkend="language.oop.lsp">reglas de compatibilidad de firmas</link>.
     Anteriormente, su firma podía ser diferente.
    </simpara>
   </caution>
  <example xml:id="language.oop5.traits.abstract.ex1">
   <title>Obligaciones requeridas por los métodos abstractos</title>
   <programlisting role="php">
<![CDATA[
<?php
trait Hello {
    public function sayHelloWorld() {
        echo 'Hello'.$this->getWorld();
    }
    abstract public function getWorld();
}

class MyHelloWorld {
    private $world;
    use Hello;
    public function getWorld() {
        return $this->world;
    }
    public function setWorld($val) {
        $this->world = $val;
    }
}
?>
]]>
   </programlisting>
  </example>
 </sect2>

 <sect2 xml:id="language.oop5.traits.static">
  <title>Atributos estáticos en los Traits</title>
  <para>
   Los traits pueden definir variables estáticas, métodos estáticos
   y propiedades estáticas.
  </para>
  <note>
   <para>
    A partir de PHP 8.1.0, llamar a un método estático o acceder a una
    propiedad estática directamente en un trait es obsoleto.
    Los métodos y propiedades estáticas deberían ser accedidos solo en una clase que use el trait.
   </para>
  </note>
  <example xml:id="language.oop5.traits.static.ex1">
   <title>Variables estáticas</title>
   <programlisting role="php">
<![CDATA[
<?php

trait Counter
{
    public function inc()
    {
        static $c = 0;
        $c = $c + 1;
        echo "$c\n";
    }
}

class C1
{
    use Counter;
}

class C2
{
    use Counter;
}

$o = new C1();
$o->inc();
$p = new C2();
$p->inc();

?>
]]>
   </programlisting>
   &example.outputs;
    <screen>
<![CDATA[
1
1
]]>
    </screen>
  </example>
  <example xml:id="language.oop5.traits.static.ex2">
   <title>Métodos estáticos</title>
   <programlisting role="php">
<![CDATA[
<?php

trait StaticExample
{
    public static function doSomething()
    {
        return 'Doing something';
    }
}

class Example
{
    use StaticExample;
}

echo Example::doSomething();

?>
]]>
   </programlisting>
   &example.outputs;
    <screen>
<![CDATA[
Doing something
]]>
    </screen>
  </example>
  <example xml:id="language.oop5.traits.static.ex3">
   <title>Propiedades estáticas</title>
   <caution>
     <simpara>
      Antes de PHP 8.3.0, las propiedades estáticas definidas en un trait eran compartidas
      entre todas las clases de la misma jerarquía de herencia que usaban ese trait.
      A partir de PHP 8.3.0, si una clase hija usa un trait con una propiedad estática,
      esta será considerada como distinta de la definida en la clase padre.
     </simpara>
    </caution>
   <programlisting role="php">
<![CDATA[
<?php

trait StaticExample
{
    public static $counter = 1;
}

class A
{
    use T;

    public static function incrementCounter()
    {
        static::$counter++;
    }
}

class B extends A
{
    use T;
}

A::incrementCounter();

echo A::$counter, "\n";
echo B::$counter, "\n";

?>
]]>
   </programlisting>
   &example.outputs.83;
    <screen>
<![CDATA[
2
1
]]>
    </screen>
  </example>
 </sect2>
 <sect2 xml:id="language.oop5.traits.properties">
   <title>Propiedades</title>
   <para>
    Los traits también pueden definir propiedades.
   </para>
   <example xml:id="language.oop5.traits.properties.example">
    <title>Definir propiedades</title>
    <programlisting role="php">
<![CDATA[
<?php

trait PropertiesTrait
{
    public $x = 1;
}

class PropertiesExample
{
    use PropertiesTrait;
}

$example = new PropertiesExample();
$example->x;

?>
]]>
    </programlisting>
   </example>
    <para>
     Si un trait define una propiedad, entonces la clase no puede definir una
     propiedad con el mismo nombre a menos que sea compatible (misma visibilidad, tipo,
     modificador readonly, valor inicial), de lo contrario se produce un error fatal.
    </para>
   <example xml:id="language.oop5.traits.properties.conflicts">
    <title>Resolución de conflictos</title>
    <programlisting role="php">
<![CDATA[
<?php
trait PropertiesTrait {
    public $same = true;
    public $different1 = false;
    public bool $different2;
    public bool $different3;
}

class PropertiesExample {
    use PropertiesTrait;
    public $same = true;
    public $different1 = true; // Fatal error
    public string $different2; // Fatal error
    readonly protected bool $different3; // Fatal error
}
?>
]]>
    </programlisting>
   </example>
  </sect2>

 <sect2 xml:id="language.oop5.traits.constants">
  <title>&Constants;</title>
  <para>
   Los traits pueden, a partir de PHP 8.2.0, también definir constantes.
  </para>
  <example xml:id="language.oop5.traits.constants.example">
   <title>Trait definiendo una constante</title>
   <programlisting role="php">
<![CDATA[
<?php
trait ConstantsTrait {
    public const FLAG_MUTABLE = 1;
    final public const FLAG_IMMUTABLE = 5;
}

class ConstantsExample {
    use ConstantsTrait;
}

$example = new ConstantsExample;
echo $example::FLAG_MUTABLE;
?>
]]>
   </programlisting>
   &example.outputs;
    <screen>
<![CDATA[
1
]]>
    </screen>
  </example>
  <para>
   Si un trait define una constante, entonces una clase no puede definir una
   constante con el mismo nombre, a menos que sea compatible (misma
   visibilidad, mismo valor, etc.), de lo contrario se produce un error fatal.
  </para>
  <example xml:id="language.oop5.traits.constants.conflicts">
   <title>Resolución de conflicto</title>
   <programlisting role="php">
<![CDATA[
<?php
trait ConstantsTrait {
    public const FLAG_MUTABLE = 1;
    final public const FLAG_IMMUTABLE = 5;
}

class ConstantsExample {
    use ConstantsTrait;
    public const FLAG_IMMUTABLE = 5; // Fatal error
}
?>
]]>
    </programlisting>
   </example>
  </sect2>
  <sect2 xml:id="language.oop5.traits.final-methods">
   <title>Métodos finales</title>
   <simpara>
    A partir de PHP 8.3.0, el modificador <link linkend="language.oop5.final">final</link>
    puede ser aplicado usando el operador <literal>as</literal>
    a los métodos importados desde los traits. Esto puede ser usado para impedir
    que las clases hijas sobrecarguen el método. Sin embargo, la clase que usa
    el trait puede seguir sobrecargando el método.
   </simpara>
   <example xml:id="language.oop5.traits.final-methods.example">
    <title>Definir un método proveniente de un trait como <literal>final</literal></title>
    <programlisting role="php">
    <![CDATA[
<?php

trait CommonTrait
{
    public function method()
    {
        echo 'Hello';
    }
}

class FinalExampleA
{
    use CommonTrait {
        CommonTrait::method as final; // El 'final' impide que las clases hijas sobrecarguen el método
    }
}

class FinalExampleB extends FinalExampleA
{
    public function method() {}
}

?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Fatal error: Cannot override final method FinalExampleA::method() in ...
]]>
    </screen>
   </example>
  </sect2>

</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
