<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 2e7c00fd314a708ecbd495ef7cc9ae8c8462c33c Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes -->
<sect1 xml:id="language.oop5.variance" xmlns="http://docbook.org/ns/docbook">
 <title>Covarianza y Contravarianza</title>

 <para>
  A partir de PHP 7.2.0, se introdujo la contravarianza parcial eliminando las restricciones de tipo
  en los parámetros de un método hijo. A partir de PHP 7.4.0, se añadieron la covarianza y la contravarianza completas.
 </para>
 <para>
  La covarianza permite a un método hijo devolver un tipo más específico que el tipo de retorno
  de su método padre. La contravarianza permite que un tipo de parámetro sea menos específico
  en un método hijo que en el de la clase padre.
 </para>
 <para>
  Una declaración de tipo se considera más específica en el siguiente caso:
  <itemizedlist>
   <listitem>
    <simpara>
     Un tipo es retirado de un
    <link linkend="language.types.type-system.composite.union">tipo union</link>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Un tipo es añadido a un
    <link linkend="language.types.type-system.composite.intersection">tipo de intersección</link>
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Un tipo de clase es transformado en un tipo de clase hijo
    </simpara>
   </listitem>
   <listitem>
    <simpara>
    <type>iterable</type> es reemplazado por <type>array</type> o <classname>Traversable</classname>
    </simpara>
   </listitem>
  </itemizedlist>

  Un tipo de clase se considera menos específico si lo contrario es cierto.
 </para>

 <sect2 xml:id="language.oop5.variance.covariance">
  <title>Covarianza</title>

  <para>
   Para ilustrar el funcionamiento de la covarianza, se crea una simple clase padre abstracta, <varname>Animal</varname>
   que será extendida por clases hijas,
  <varname>Cat</varname> y <varname>Dog</varname>.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

abstract class Animal
{
    protected string $name;

    public function __construct(string $name)
    {
        $this->name = $name;
    }

    abstract public function speak();
}

class Dog extends Animal
{
    public function speak()
    {
        echo $this->name . " barks";
    }
}

class Cat extends Animal
{
    public function speak()
    {
        echo $this->name . " meows";
    }
}
]]>
   </programlisting>
  </informalexample>

  <para>
   Téngase en cuenta que no hay métodos que devuelvan valores en este ejemplo. Se añadirán algunas fábricas
   y devolverán un nuevo objeto de clase de tipo <varname>Animal</varname>,
  <varname>Cat</varname>, o <varname>Dog</varname>.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

interface AnimalShelter
{
    public function adopt(string $name): Animal;
}

class CatShelter implements AnimalShelter
{
    public function adopt(string $name): Cat // en lugar de devolver el tipo de clase Animal, puede devolver el tipo de clase Cat
    {
        return new Cat($name);
    }
}

class DogShelter implements AnimalShelter
{
    public function adopt(string $name): Dog // en lugar de devolver el tipo de clase Animal, puede devolver el tipo de clase Dog
    {
        return new Dog($name);
    }
}

$kitty = (new CatShelter)->adopt("Ricky");
$kitty->speak();
echo "\n";

$doggy = (new DogShelter)->adopt("Mavrick");
$doggy->speak();
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Ricky meows
Mavrick barks
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="language.oop5.variance.contravariance">
  <title>Contravarianza</title>

  <para>
   Retomando el ejemplo anterior con las clases <varname>Animal</varname>,
   <varname>Cat</varname> y <varname>Dog</varname>, se incluyen dos clases llamadas
   <varname>Food</varname> y <varname>AnimalFood</varname>, y
   se añade un método <varname>eat(AnimalFood $food)</varname> a la clase abstracta
   <varname>Animal</varname>.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

class Food {}

class AnimalFood extends Food {}

abstract class Animal
{
    protected string $name;

    public function __construct(string $name)
    {
        $this->name = $name;
    }

    public function eat(AnimalFood $food)
    {
        echo $this->name . " eats " . get_class($food);
    }
}
]]>
   </programlisting>
  </informalexample>

  <para>
   Para ver el comportamiento de la contravarianza, el método
   método <varname>eat</varname> es sobrecargado en la clase <varname>Dog</varname> para permitir
   cualquier objeto de tipo <varname>Food</varname>. La clase <varname>Cat</varname> permanece sin cambios.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

class Dog extends Animal
{
    public function eat(Food $food) {
        echo $this->name . " eats " . get_class($food);
    }
}
]]>
   </programlisting>
  </informalexample>

  <para>
   El siguiente ejemplo muestra el comportamiento de la contravarianza.
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

$kitty = (new CatShelter)->adopt("Ricky");
$catFood = new AnimalFood();
$kitty->eat($catFood);
echo "\n";

$doggy = (new DogShelter)->adopt("Mavrick");
$banana = new Food();
$doggy->eat($banana);
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Ricky eats AnimalFood
Mavrick eats Food
]]>
   </screen>

  <para>
   Pero, ¿qué sucede si <varname>$kitty</varname> intenta comer (<methodname>eat</methodname>) la
   banana (<varname>$banana</varname>) ?
  </para>

   <programlisting role="php">
<![CDATA[
$kitty->eat($banana);
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Fatal error: Uncaught TypeError: Argument 1 passed to Animal::eat() must be an instance of AnimalFood, instance of Food given
]]>
   </screen>
  </informalexample>
 </sect2>
 <sect2>
  <title>Variación de tipo de las propiedades</title>
  <simpara>
   Por defecto, las propiedades no son ni covariantes ni contravariantes, por lo tanto, son invariantes.
   En otras palabras, su tipo no puede cambiar en absoluto en una clase hija.
   La razón es que las operaciones "get" deben ser covariantes,
   y las operaciones "set" deben ser contravariantes.
   La única manera para que una propiedad cumpla con estos dos requisitos es ser invariante.
  </simpara>
  <simpara>
   A partir de PHP 8.4.0, con la adición de las propiedades abstractas (en una interfaz o una clase abstracta) y
   <link linkend="language.oop5.property-hooks.virtual">propiedades virtuales</link>,
   es posible declarar una propiedad que solo tenga una operación "get" o "set".
   En consecuencia, las propiedades abstractas o las propiedades virtuales que solo requieren la operación "get" pueden ser covariantes.
   De manera similar, una propiedad abstracta o una propiedad virtual que solo requiere la operación "set" puede ser contravariante.
  </simpara>
  <simpara>
   Sin embargo, una vez que una propiedad tiene tanto una operación "get" como "set",
   ya no es covariante ni contravariante para una extensión futura.
   En otras palabras, se vuelve invariante.
  </simpara>
  <example>
   <title>Variación del tipo de las propiedades</title>
   <programlisting role="php">
<![CDATA[
<?php
class Animal {}
class Dog extends Animal {}
class Poodle extends Dog {}

interface PetOwner
{
    // Solo se requiere la operación "get", por lo tanto, puede ser covariante.
    public Animal $pet { get; }
}

class DogOwner implements PetOwner
{
    // Puede ser un tipo más restrictivo, ya que el lado "get"
    // siempre devuelve un Animal. Sin embargo, como propiedad nativa,
    // los hijos de esta clase ya no pueden cambiar el tipo.
    public Dog $pet;
}

class PoodleOwner extends DogOwner
{
    // ESTO NO ESTÁ PERMITIDO, ya que DogOwner::$pet tiene tanto
    // las operaciones "get" como "set" definidas y requeridas.
    public Poodle $pet;
}
?>
]]>
   </programlisting>
  </example>
 </sect2>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
