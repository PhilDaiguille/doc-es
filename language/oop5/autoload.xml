<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: c1f37a6c270aadbbb3da56a3973ffd62197adf2b Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="language.oop5.autoload" xmlns="http://docbook.org/ns/docbook">
 <title>Autocarga de clases</title>
 <para>
  Muchos desarrolladores que escriben aplicaciones orientadas a objetos
  crean un fichero fuente por definición de clase. Uno de los mayores inconvenientes
  de este método es tener que escribir una larga lista de inclusiones de
  ficheros de clases al inicio de cada script: una inclusión por clase.
 </para>
 <para>
  La función <function>spl_autoload_register</function> registra un número cualquiera de
  cargadores automáticos, lo que permite a las clases y a las interfaces ser
  automáticamente cargadas si no están definidas actualmente.
  Al registrar autocargadores, PHP da una última oportunidad de incluir una
  definición de clase o interfaz, antes de que PHP falle con un error.
 </para>
 <para>
  Cualquier construcción similar a las clases puede ser autocargada de la
  misma manera. Esto incluye las clases, interfaces, traits y enumeraciones.
 </para>
 <caution>
  <para>
   Anterior a PHP 8.0.0, era posible utilizar <function>__autoload</function>
   para autocargar las clases y las interfaces. Sin embargo, es una alternativa
   menos flexible a <function>spl_autoload_register</function> y
   <function>__autoload</function> está obsoleto a partir de PHP 7.2.0,
   y eliminado a partir de PHP 8.0.0.
  </para>
 </caution>
 <note>
  <para>
   <function>spl_autoload_register</function> puede ser llamada varias veces
   para registrar varios autocargadores. Lanzar una excepción desde una
   función de autocarga, interrumpirá este proceso y no permitirá que las
   funciones de autocarga siguientes sean ejecutadas. Por esta razón,
   lanzar excepciones desde una función de autocarga es fuertemente
   desaconsejado.
  </para>
 </note>
 <para>
  <example>
   <title>Ejemplo de autocarga</title>
   <para>
    Este ejemplo intenta cargar las clases <literal>MiClase1</literal>
    y <literal>MiClase2</literal>, respectivamente desde los ficheros
    <filename>MiClase1.php</filename> y
    <filename>MiClase2.php</filename>.
   </para>
   <programlisting role="php" annotations="interactive">
<![CDATA[
<?php
spl_autoload_register(function ($class_name) {
    include $class_name . '.php';
});

$obj  = new MiClase1();
$obj2 = new MiClase2();
?>
]]>
   </programlisting>
  </example>
  <example>
   <title>Otro ejemplo de autocarga</title>
   <para>
    Este ejemplo intenta cargar la interfaz <literal>ITest</literal>.
   </para>
   <programlisting role="php">
<![CDATA[
<?php

spl_autoload_register(function ($name) {
    var_dump($name);
});

class Foo implements ITest {
}

/*
string(5) "ITest"

Fatal error: Interface 'ITest' not found in ...
*/
?>
    ]]>
    </programlisting>
   </example>
   <example>
    <title>Uso del autoloader de Composer</title>
    <simpara>
     &link.composer; genera un fichero <literal>vendor/autoload.php</literal>
     configurado para cargar automáticamente los paquetes gestionados por Composer.
     Al incluir este fichero, estos paquetes pueden ser utilizados sin trabajo
     adicional.
    </simpara>
    <programlisting role="php" annotations="interactive">
<![CDATA[
<?php
require __DIR__ . '/vendor/autoload.php';

$uuid = Ramsey\Uuid\Uuid::uuid7();

echo "Nuevo UUID generado -> ", $uuid->toString(), "\n";
?>
]]>
   </programlisting>
  </example>
 </para>

 <simplesect role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
     <member><function>unserialize</function></member>
     <member><link linkend="ini.unserialize-callback-func">unserialize_callback_func</link></member>
     <member><link linkend="ini.unserialize-max-depth">unserialize_max_depth</link></member>
     <member><function>spl_autoload_register</function></member>
     <member><function>spl_autoload</function></member>
     <member><function>__autoload</function></member>
    </simplelist>
  </para>
 </simplesect>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
