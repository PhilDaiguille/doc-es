<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 009f215fc983eeded6161676bcffdd8cf3b6b080 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<sect1 xml:id="language.oop5.late-static-bindings" xmlns="http://docbook.org/ns/docbook">
  <title>Late Static Bindings (Résolution statique a la volée)</title>
  <para>
   PHP implementa una funcionalidad llamada
   <literal>late static binding</literal>, en español la resolución
   estática a la volée, que puede ser utilizada para referenciar la clase llamada
   en un contexto de herencia estática.
  </para>

  <para>
   Más precisamente, las resoluciones estáticas a la volée funcionan registrando
   el nombre de la clase en el último "llamado no transmitido". En el caso de los llamados de
   métodos estáticos, se trata de la clase explícitamente nombrada (generalmente, la que está a
   la izquierda del operador
   <link linkend="language.oop5.paamayim-nekudotayim"><literal>::</literal></link>) ;
   en el caso de métodos no estáticos, se trata de la clase del objeto. Un "llamado
   transmitido" es un llamado estático desencadenado por <literal>self::</literal>,
   <literal>parent::</literal>, <literal>static::</literal>, o, en la parte superior de la
   jerarquía de clases, <function>forward_static_call</function>.
   <!-- técnicamente, static:: puede no ser de reenvío, pero es irrelevante -->

   La función <function>get_called_class</function> puede ser utilizada para recuperar
   una cadena que contiene el nombre de la clase llamada, y <literal>static::</literal>
   introduce su espacio.
  </para>

  <para>
   Esta funcionalidad ha sido bautizada como <literal>"late static bindings"</literal>,
   con un punto de vista interno. <literal>"Late binding"</literal>, literalmente
   resolución tardía, proviene del hecho de que los elementos <literal>static::</literal>
   no serán resueltos utilizando la clase donde el método ha sido definido, sino
   la que está activa durante la ejecución. El adjetivo estático ha sido
   añadido porque este problema se aplica (sin estar limitado a) a los métodos estáticos.
  </para>

  <sect2 xml:id="language.oop5.late-static-bindings.self">
   <title>Limitaciones de <literal>self::</literal></title>
   <para>
    Las referencias estáticas a la clase actual, con <literal>self::</literal> o
    <literal>__CLASS__</literal>, son resueltas utilizando la clase a la que
    pertenecen las funciones, es decir, donde fueron definidas:
   </para>
   <example>
    <title>Uso de <literal>self::</literal></title>
    <programlisting role="php">
<![CDATA[
<?php

class A
{
    public static function qui()
    {
        echo __CLASS__;
    }
    public static function test()
    {
        self::qui();
    }
}

class B extends A
{
    public static function qui()
    {
         echo __CLASS__;
    }
}

B::test();

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
A
]]>
    </screen>
   </example>

  </sect2>

  <sect2 xml:id="language.oop5.late-static-bindings.usage">
   <title>Uso de la resolución estática a la volée</title>

   <para>
    La resolución estática a la volée intenta superar esta limitación
    introduciendo una palabra clave que hace referencia a la clase
    que ha sido llamada durante la ejecución. Para simplificar, esta palabra clave
    permite la referencia a <literal>B</literal> desde
    <literal>test()</literal>, en el ejemplo anterior.
    Se decidió no introducir una nueva palabra clave, sino más bien
    utilizar la palabra <literal>static</literal> que ya estaba
    reservada.
   </para>

   <example>
    <title>Uso simple de <literal>static::</literal></title>
    <programlisting role="php">
<![CDATA[
<?php

class A
{
    public static function qui()
    {
        echo __CLASS__;
    }
    public static function test()
    {
        static::qui(); // Aquí, resolución a la volée
    }
}

class B extends A
{
    public static function qui()
    {
         echo __CLASS__;
    }
}

B::test();

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
B
]]>
    </screen>
   </example>
   <note>
    <para>
     En contextos no estáticos, la clase llamada será la del objeto.
     Como <literal>$this-></literal> intentará llamar
     a métodos privados desde el mismo contexto, utilizar <literal>static::</literal>
     podría dar resultados diferentes. Tenga en cuenta también que
     <literal>static::</literal> solo puede hacer referencia a atributos/métodos
     estáticos.
    </para>
   </note>
   <example>
    <title>Uso de <literal>static::</literal> en un contexto no estático</title>
    <programlisting role="php">
<![CDATA[
<?php

class A
{
    private function foo()
    {
        echo "success!\n";
    }
    public function test()
    {
        $this->foo();
        static::foo();
    }
}

class B extends A
{
   /* foo() será copiada en B, por lo tanto su contexto será siempre A
    * y la llamada se realizará sin problemas */
}

class C extends A
{
    private function foo()
    {
        /* El método original es reemplazado; el contexto es el de C */
    }
}

$b = new B();
$b->test();

$c = new C();
try {
    $c->test();
} catch (Error $e) {
    echo $e->getMessage();
}

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Success!
Success!
Success!
Call to private method C::foo() from scope A
]]>
    </screen>
   </example>
   <note>
    <para>
     La resolución de estáticos a la volée se detendrá en un llamado estático
     completamente resuelto. Por otro lado, los llamados estáticos utilizando
     una palabra clave como <literal>parent::</literal> o <literal>self::</literal>
     transmitirán la información de llamada.
    </para>
    <example>
     <title>Llamada con o sin transmisión</title>
     <programlisting role="php">
<![CDATA[
<?php

class A
{
    public static function foo()
    {
        static::qui();
    }

    public static function qui()
    {
        echo __CLASS__."\n";
    }
}

class B extends A
{
    public static function test()
    {
        A::foo();
        parent::foo();
        self::foo();
    }

    public static function qui()
    {
        echo __CLASS__."\n";
    }
}
class C extends B
{
    public static function qui()
    {
        echo __CLASS__."\n";
    }
}

C::test();

?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
A
C
C
]]>
     </screen>
    </example>
   </note>
  </sect2>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
