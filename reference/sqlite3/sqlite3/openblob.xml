<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 855bfee2f3db70d7dbb4c60c7c4a4efa567f1c60 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="sqlite3.openblob" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>SQLite3::openBlob</refname>
  <refpurpose>Abre un flujo de recurso para leer un BLOB</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="SQLite3">
   <modifier>public</modifier> <type class="union"><type>resource</type><type>false</type></type><methodname>SQLite3::openBlob</methodname>
   <methodparam><type>string</type><parameter>table</parameter></methodparam>
   <methodparam><type>string</type><parameter>column</parameter></methodparam>
   <methodparam><type>int</type><parameter>rowid</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>database</parameter><initializer>"main"</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter><initializer><constant>SQLITE3_OPEN_READONLY</constant></initializer></methodparam>
  </methodsynopsis>
  <para>
   Abre un flujo de recurso para leer o escribir un BLOB, que sería seleccionado por:
  </para>
  <para>
   SELECT <parameter>column</parameter> FROM <parameter>database</parameter>.<parameter>table</parameter> WHERE rowid = <parameter>rowid</parameter>
  </para>
  <note>
   <simpara>
    No es posible cambiar el tamaño de un BLOB escribiendo en el flujo.
    En su lugar, una declaración UPDATE debe ser ejecutada, utilizando, eventualmente,
    la función zeroblob() de SQLite para definir el tamaño del BLOB deseado.
   </simpara>
  </note>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>table</parameter></term>
     <listitem>
      <para>
       El nombre de la tabla.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>column</parameter></term>
     <listitem>
      <para>
       El nombre de la columna.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>rowid</parameter></term>
     <listitem>
      <para>
       La ID de la fila.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>database</parameter></term>
     <listitem>
      <para>
       El nombre simbólico de la base de datos.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       O bien <constant>SQLITE3_OPEN_READONLY</constant> o
       <constant>SQLITE3_OPEN_READWRITE</constant> para abrir el flujo
       en modo de solo lectura o de lectura y escritura, respectivamente.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>

 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve un recurso de flujo, &return.falseforfailure;.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>7.2.0</entry>
      <entry>
       El argumento <parameter>flags</parameter> fue añadido, permitiendo
       escribir BLOBs; anteriormente solo la lectura era soportada.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo con <function>SQLite3::openBlob</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$conn = new SQLite3(':memory:');
$conn->exec('CREATE TABLE test (text text)');
$conn->exec("INSERT INTO test VALUES ('Lorem ipsum')");
$stream = $conn->openBlob('test', 'text', 1);
echo stream_get_contents($stream);
fclose($stream); // obligatorio, de lo contrario la siguiente línea fallaría
$conn->close();
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Lorem ipsum
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Escribir progresivamente un BLOB</title>
    <programlisting role="php">
<![CDATA[
<?php
$conn = new SQLite3(':memory:');
$conn->exec('CREATE TABLE test (text text)');
$conn->exec("INSERT INTO test VALUES (zeroblob(36))");
$stream = $conn->openBlob('test', 'text', 1, 'main', SQLITE3_OPEN_READWRITE);
for ($i = 0; $i < 3; $i++) {
    fwrite($stream,  "Lorem ipsum\n");
}
fclose($stream);
echo $conn->querySingle("SELECT text FROM test");
$conn->close();
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Lorem ipsum
Lorem ipsum
Lorem ipsum
]]>
    </screen>
   </example>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
