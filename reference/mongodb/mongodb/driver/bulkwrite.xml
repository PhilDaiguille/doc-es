<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 9a03654d101176d0073a32683ef791bc20bc1425 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<reference xml:id="class.mongodb-driver-bulkwrite" role="class" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">
 <title>La clase MongoDB\Driver\BulkWrite</title>
 <titleabbrev>MongoDB\Driver\BulkWrite</titleabbrev>

 <partintro>

<!-- {{{ MongoDB\Driver\BulkWrite intro -->
  <section xml:id="mongodb-driver-bulkwrite.intro">
   &reftitle.intro;
   <para>
    El <classname>MongoDB\Driver\BulkWrite</classname> recopila una o más
    operaciones de escritura que deberían ser enviadas al servidor. Después de agregar
    un número cualquiera de operaciones de inserción, actualización y eliminación,
    la colección puede ser ejecutada a través de
    <methodname>MongoDB\Driver\Manager::executeBulkWrite</methodname>.
   </para>
   <para>
    Las operaciones de escritura pueden ser ordenadas (por omisión) o no ordenadas.
    Las operaciones de escritura ordenadas son enviadas al servidor, en el orden
    proporcionado, para una ejecución serial. Si una escritura falla, todas las
    operaciones restantes serán canceladas. Las operaciones no ordenadas son enviadas
    al servidor en un orden arbitrario donde pueden ser ejecutadas en paralelo.
    Todos los errores que ocurren son reportados después de que todas las
    operaciones hayan sido intentadas.
   </para>
  </section>
<!-- }}} -->

  <section xml:id="mongodb-driver-bulkwrite.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass><classname>MongoDB\Driver\BulkWrite</classname></ooclass>

<!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <modifier>final</modifier>
     <ooclass>
      <classname>MongoDB\Driver\BulkWrite</classname>
     </ooclass>

     <oointerface>
      <interfacename>Countable</interfacename>
     </oointerface>
    </classsynopsisinfo>
<!-- }}} -->

    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.mongodb-driver-bulkwrite')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[not(@role='procedural')])" />
   </classsynopsis>
<!-- }}} -->

  </section>

  <section xml:id="mongodb-driver-bulkwrite.examples">
   &reftitle.examples;

   <example>
    <title>Operaciones de escritura ordenadas por tipo</title>
    <para>
     Las operaciones de escritura mixtas (es decir, las inserciones, las actualizaciones y las eliminaciones) serán ensambladas en comandos de escritura tipificados para ser enviados secuencialmente al servidor.
    </para>
    <programlisting role="php">
<![CDATA[
<?php

$bulk = new MongoDB\Driver\BulkWrite(['ordered' => true]);
$bulk->insert(['_id' => 1, 'x' => 1]);
$bulk->insert(['_id' => 2, 'x' => 2]);
$bulk->update(['x' => 2], ['$set' => ['x' => 1]]);
$bulk->insert(['_id' => 3, 'x' => 3]);
$bulk->delete(['x' => 1]);

?>
]]>
    </programlisting>
    <para>
     Resulta en cuatro comandos de escritura (es decir, idas y vueltas)
     ejecutadas. Dado que las operaciones son ordenadas, la tercera inserción no puede ser enviada
     hasta que la actualización previa sea ejecutada.
    </para>
   </example>
   <example>
    <title>Operaciones de escritura ordenadas causando un error</title>
    <programlisting role="php">
<![CDATA[
<?php

$bulk = new MongoDB\Driver\BulkWrite(['ordered' => true]);
$bulk->delete([]);
$bulk->insert(['_id' => 1]);
$bulk->insert(['_id' => 2]);
$bulk->insert(['_id' => 3, 'hello' => 'world']);
$bulk->update(['_id' => 3], ['$set' => ['hello' => 'earth']]);
$bulk->insert(['_id' => 4, 'hello' => 'pluto']);
$bulk->update(['_id' => 4], ['$set' => ['hello' => 'moon']]);
$bulk->insert(['_id' => 3]);
$bulk->insert(['_id' => 4]);
$bulk->insert(['_id' => 5]);

$manager = new MongoDB\Driver\Manager('mongodb://localhost:27017');
$writeConcern = new MongoDB\Driver\WriteConcern(MongoDB\Driver\WriteConcern::MAJORITY, 1000);

try {
    $result = $manager->executeBulkWrite('db.collection', $bulk, ['writeConcern' => $writeConcern]);
} catch (MongoDB\Driver\Exception\BulkWriteException $e) {
    $result = $e->getWriteResult();

    // Verifica si la escritura no pudo ser satisfecha
    if ($writeConcernError = $result->getWriteConcernError()) {
        printf("%s (%d): %s\n",
            $writeConcernError->getMessage(),
            $writeConcernError->getCode(),
            var_export($writeConcernError->getInfo(), true)
        );
    }

    // Verifica si una operación de escritura no pudo ser completada
    foreach ($result->getWriteErrors() as $writeError) {
        printf("Operación#%d: %s (%d)\n",
            $writeError->getIndex(),
            $writeError->getMessage(),
            $writeError->getCode()
        );
    }
} catch (MongoDB\Driver\Exception\Exception $e) {
    printf("Otro error: %s\n", $e->getMessage());
    exit;
}

printf("Insertados %d documento(s)\n", $result->getInsertedCount());
printf("Actualizados  %d documento(s)\n", $result->getModifiedCount());

?>
]]>
    </programlisting>
   </example>
   &example.outputs;
   <screen>
<![CDATA[
Operación#7: E11000 duplicate key error index: db.collection.$_id_ dup key: { : 3 } (11000)
Insertados 4 documento(s)
Actualizados  2 documento(s)
]]>
   </screen>
   <para>
    Si el write concern no puede ser satisfecho, el ejemplo anterior mostrará
    algo como:
   </para>
   <screen>
<![CDATA[
esperando la replicación tiempo agotado (64): array (
  'wtimeout' => true,
)
Operación#7: E11000 duplicate key error index: databaseName.collectionName.$_id_ dup key: { : 3 } (11000)
Insertados 4 documento(s)
Actualizados  2 documento(s)
]]>
   </screen>
   <para>
    Si se ejecuta el ejemplo anterior, pero se permiten escrituras no ordenadas:
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$bulk = new MongoDB\Driver\BulkWrite(['ordered' => false]);
/* ... */

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Operación#7: E11000 duplicate key error index: db.collection.$_id_ dup key: { : 3 } (11000)
Operación#8: E11000 duplicate key error index: db.collection.$_id_ dup key: { : 4 } (11000)
Insertados 5 documento(s)
Actualizados  2 documento(s)
]]>
   </screen>
  </section>

  <section xml:id="mongodb-driver-bulkwrite.seealso">
   &reftitle.seealso;
   <simplelist>
    <member><methodname>MongoDB\Driver\Manager::executeBulkWrite</methodname></member>
    <member><classname>MongoDB\Driver\WriteResult</classname></member>
    <member><classname>MongoDB\Driver\WriteConcern</classname></member>
    <member><classname>MongoDB\Driver\WriteConcernError</classname></member>
    <member><classname>MongoDB\Driver\WriteError</classname></member>
   </simplelist>
  </section>

 </partintro>

 &reference.mongodb.mongodb.driver.entities.bulkwrite;

</reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
