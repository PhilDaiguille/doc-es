<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 4639881688d3faaf0073ad71fe0a4b730aea15a0 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="mongodb-driver-manager.executecommand" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>MongoDB\Driver\Manager::executeCommand</refname>
  <refpurpose>Ejecuta un comando de base de datos</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>final</modifier> <modifier>public</modifier> <type>MongoDB\Driver\Cursor</type><methodname>MongoDB\Driver\Manager::executeCommand</methodname>
   <methodparam><type>string</type><parameter>db</parameter></methodparam>
   <methodparam><type>MongoDB\Driver\Command</type><parameter>command</parameter></methodparam>
   <methodparam choice="opt"><type class="union"><type>array</type><type>null</type></type><parameter>options</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   Selecciona un servidor en función de la opción <literal>"readPreference"</literal>
   y ejecuta el comando en ese servidor.
  </para>
  <para>
   Este método no aplica ninguna lógica especial al comando. Los valores
   por defecto de las opciones <literal>"readPreference"</literal>,
   <literal>"readConcern"</literal> y <literal>"writeConcern"</literal> serán
   deducidos a partir de una transacción activa (indicada por la opción
   <literal>"session"</literal>). Si no hay una transacción activa, se utilizará
   una preferencia de lectura primaria para la selección del servidor.
  </para>
  <para>
   Los valores por defecto no serán <emphasis>no</emphasis> deducidos a partir de
   la <link linkend="mongodb-driver-manager.construct-uri">URI de conexión</link>.
   Por lo tanto, se recomienda a los usuarios utilizar métodos de comando de lectura
   y/o escritura específicos si es posible.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   &mongodb.parameter.db;
   &mongodb.parameter.command;
   <varlistentry>
    <term><parameter>options</parameter></term>
    <listitem>
     <para>
      <table>
       <title>options</title>
       <tgroup cols="3">
        <thead>
         <row>
          <entry>Option</entry>
          <entry>Type</entry>
          <entry>Description</entry>
         </row>
        </thead>
        <tbody>
         &mongodb.option.readConcern;
         &mongodb.option.readPreference;
         &mongodb.option.session;
         &mongodb.option.writeConcern;
        </tbody>
       </tgroup>
      </table>
     </para>
     &mongodb.option.transactionReadWriteConcern;
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  &mongodb.returns.cursor;
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <simplelist>
   &mongodb.throws.session-readwriteconcern;
   &mongodb.throws.session-unacknowledged;
   &mongodb.throws.std;
   <member>Lanza una <classname>MongoDB\Driver\Exception\RuntimeException</classname> en otros errores (por ejemplo: comando inválido, entrega de un comando de escritura a un secundario).</member>
  </simplelist>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>PECL mongodb 2.0.0</entry>
       <entry>
        El parámetro <parameter>options</parameter> ya no acepta
        una instancia de <classname>MongoDB\Driver\ReadPreference</classname>.
       </entry>
      </row>
      <row>
       <entry>PECL mongodb 1.21.0</entry>
       <entry>
        Pasar un objeto <classname>MongoDB\Driver\ReadPreference</classname> como
        <parameter>options</parameter> está obsoleto y será eliminado en la 2.0.
       </entry>
      </row>
      <row>
       <entry>PECL mongodb 1.4.4</entry>
       <entry>
        Se lanzará una <classname>MongoDB\Driver\Exception\InvalidArgumentException</classname>
        si la opción <literal>"session"</literal> se utiliza en combinación con una
        preferencia de escritura no reconocida.
       </entry>
      </row>
      <row>
       <entry>PECL mongodb 1.4.0</entry>
       <entry>
        Este tercer parámetro es ahora un array de <parameter>options</parameter>.
        Por razones de compatibilidad ascendente, este parámetro siempre aceptará
        un objeto <classname>MongoDB\Driver\ReadPreference</classname>.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title><function>MongoDB\Driver\Manager::executeCommand</function> con un comando que devuelve un solo documento de resultado</title>
   <programlisting role="php">
<![CDATA[
<?php

$manager = new MongoDB\Driver\Manager('mongodb://localhost:27017');
$command = new MongoDB\Driver\Command(['ping' => 1]);

try {
    $cursor = $manager->executeCommand('admin', $command);
} catch(MongoDB\Driver\Exception $e) {
    echo $e->getMessage(), "\n";
    exit;
}

/* El comando ping devuelve un solo documento de resultado, por lo que
 * se debe acceder al primer resultado en el cursor. */
$response = $cursor->toArray()[0];

var_dump($response);

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
array(1) {
  ["ok"]=>
  float(1)
}
]]>
   </screen>
  </example>
  <example>
   <title><function>MongoDB\Driver\Manager::executeCommand</function> con un comando que devuelve un cursor</title>
   <programlisting role="php">
<![CDATA[
<?php

$manager = new MongoDB\Driver\Manager("mongodb://localhost:27017");

$bulk = new MongoDB\Driver\BulkWrite;
$bulk->insert(['x' => 1, 'y' => 'foo']);
$bulk->insert(['x' => 2, 'y' => 'bar']);
$bulk->insert(['x' => 3, 'y' => 'bar']);
$manager->executeBulkWrite('db.collection', $bulk);

$command = new MongoDB\Driver\Command([
    'aggregate' => 'collection',
    'pipeline' => [
        ['$group' => ['_id' => '$y', 'sum' => ['$sum' => '$x']]],
    ],
    'cursor' => new stdClass,
]);
$cursor = $manager->executeCommand('db', $command);

/* El comando de agregación puede eventualmente devolver sus resultados en
 * un cursor en lugar de un solo documento de resultado. En este caso, se puede
 * iterar directamente sobre el cursor para acceder a estos resultados. */
foreach ($cursor as $document) {
    var_dump($document);
}

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
object(stdClass)#6 (2) {
  ["_id"]=>
  string(3) "bar"
  ["sum"]=>
  int(10)
}
object(stdClass)#7 (2) {
  ["_id"]=>
  string(3) "foo"
  ["sum"]=>
  int(2)
}
]]>
   </screen>
  </example>

  <example>
   <title>Limitar el tiempo de ejecución de un comando</title>
   <para>
    El tiempo de ejecución de un comando puede ser limitado especificando un valor para
    <literal>"maxTimeMS"</literal> en el documento <classname>MongoDB\Driver\Command</classname>.
    Tenga en cuenta que este límite de tiempo se aplica en el lado del servidor y no tiene en cuenta
    la latencia de la red. Ver <link xlink:href="&url.mongodb.docs.maxtimems;">Terminar las operaciones en curso
    </link> en el manual de MongoDB para más información.
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$manager = new MongoDB\Driver\Manager('mongodb://localhost:27017');

$command = new MongoDB\Driver\Command([
    'count' => 'collection',
    'query' => ['x' => ['$gt' => 1]],
    'maxTimeMS' => 1000,
]);

$cursor = $manager->executeCommand('db', $command);

var_dump($cursor->toArray()[0]);

?>
]]>
   </programlisting>
   <para>
    Si el comando no logra completarse después de un segundo de ejecución en el servidor,
    se lanzará una <classname>MongoDB\Driver\Exception\ExecutionTimeoutException</classname>.
   </para>
  </example>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <simpara>
    Si se utiliza una segunda <parameter>readPreference</parameter>, es responsabilidad del llamante
    asegurarse de que el <parameter>comando</parameter> pueda ser ejecutado en un secundario. No se realiza
    ninguna validación por parte del controlador.
   </simpara>
  </note>
  <note>
   <simpara>
    Este método no utiliza por defecto la preferencia de lectura de la
    <link linkend="mongodb-driver-manager.construct-uri">URI de conexión MongoDB</link>.
    Las aplicaciones que lo necesiten deberían considerar el uso de
    <function>MongoDB\Driver\Manager::executeReadCommand</function>.
   </simpara>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><classname>MongoDB\Driver\Command</classname></member>
   <member><classname>MongoDB\Driver\Cursor</classname></member>
   <member><function>MongoDB\Driver\Manager::executeReadCommand</function></member>
   <member><function>MongoDB\Driver\Manager::executeReadWriteCommand</function></member>
   <member><function>MongoDB\Driver\Manager::executeWriteCommand</function></member>
   <member><function>MongoDB\Driver\Server::executeCommand</function></member>
  </simplelist>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
