<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: e8ac70bf549a723cb36465667a6109d9933b8619 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<chapter xml:id="mongodb.architecture" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <titleabbrev>Arquitectura y funcionalidades especiales</titleabbrev>
 <title>Explicaciones de la arquitectura del controlador y de las funcionalidades especiales</title>

 <section xml:id="mongodb.overview">
  <titleabbrev>Arquitectura</titleabbrev>
  <title>Visión general de la arquitectura</title>

  <para>
   Este artículo explica cómo se integran todos los diferentes componentes del controlador PHP, desde las bibliotecas del sistema base, hasta la extensión, y las bibliotecas PHP en la parte superior.
  </para>

  <para>
   <mediaobject>
    <alt>
     El diagrama de la arquitectura del controlador MongoDB PHP. El nivel más bajo del controlador son nuestras bibliotecas del sistema: libmongoc, libbson, y libmongocrypt. El nivel intermedio es la extensión PHP MongoDB. El nivel superior es el código del usuario PHP e incluye la biblioteca MongoDB PHP y paquetes de nivel superior como las integraciones de marcos de trabajo y las aplicaciones.
    </alt>
    <imageobject>
     <imagedata fileref="en/reference/mongodb/images/driver_arch.svg" width="625" depth="450" format="SVG" />
    </imageobject>
   </mediaobject>
  </para>

  <para>
   En la parte superior de esta pila se encuentra una
   <link xlink:href="&url.mongodb.library;">biblioteca PHP</link>,
   que distribuye un
   <link xlink:href="&url.packagist.package;/mongodb/mongodb">paquete Composer</link>.
   Esta biblioteca proporciona una API coherente con otros
   <link xlink:href="&url.mongodb.drivers;">controladores</link>
   MongoDB e implementa diversas
   <link xlink:href="&url.mongodb.specs;">especificaciones</link>
   cruzadas. Aunque la extensión puede ser utilizada directamente, la biblioteca
   tiene un sobrecoste mínimo y debería ser una dependencia común para la mayoría
   de las aplicaciones construidas con MongoDB.
  </para>

  <para>
   Debajo de esta biblioteca se encuentra una extensión PHP, que se distribuye a través de
   <link xlink:href="&url.pecl.package;mongodb">PECL</link>.
   La extensión forma la cola entre PHP y nuestras bibliotecas del sistema
   (<link xlink:href="&url.mongodb.libmongoc;">libmongoc</link>,
   <link xlink:href="&url.mongodb.libbson;">libbson</link>, y
   <link xlink:href="&url.mongodb.libmongocrypt;">libmongocrypt</link>).
   Su API pública proporciona únicamente las funcionalidades más esenciales:
   <simplelist>
    <member>Gestión de conexiones</member>
    <member>Codificación y decodificación BSON</member>
    <member>Serialización y deserialización de documentos (soporte de bibliotecas ODM)</member>
    <member>Ejecución de comandos, consultas y operaciones de escritura</member>
    <member>Gestión de cursores para los resultados de comandos y consultas</member>
   </simplelist>
  </para>

  <para>
   <table>
    <title>Código fuente del controlador y proyectos JIRA</title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>Proyecto</entry>
       <entry>GitHub</entry>
       <entry>JIRA</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>Bibliotecas PHP</entry>
       <entry><link xlink:href="&url.mongodb.github.phplib;">mongodb/mongo-php-library</link></entry>
       <entry><link xlink:href="&url.mongodb.jira.phplib;">PHPLIB</link></entry>
      </row>
      <row>
       <entry>Extensiones PHP</entry>
       <entry><link xlink:href="&url.mongodb.github.phpc;">mongodb/mongo-php-driver</link></entry>
       <entry><link xlink:href="&url.mongodb.jira.phpc;">PHPC</link></entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </para>
 </section>

 <section xml:id="mongodb.connection-handling">
  <titleabbrev>Conexiones</titleabbrev>
  <title>Gestión de la conexión y de la persistencia</title>

  &mongodb.note.forking;

  <section>
   <title>Conexiones y topología persistente (versión PHP desde 1.2.0)</title>

   <para>
    Todas las versiones de la extensión desde 1.2.0 conservan el objeto cliente
    <link xlink:href="&url.mongodb.libmongoc;">libmongoc</link> en el proceso
    PHP, lo que le permite reutilizar las conexiones de base de datos, los
    estados de autenticación, <emphasis>y</emphasis> la información de
    topología a través de múltiples consultas.
   </para>

   <para>
    Cuando <methodname>MongoDB\Driver\Manager::__construct</methodname> es
    invocado, se crea un hash a partir de sus argumentos (es decir, la
    cadena URI y el array de opciones). La extensión intentará encontrar un objeto
    cliente <link xlink:href="&url.mongodb.libmongoc;">libmongoc</link> persistido
    previamente para este hash. Si no se puede encontrar un cliente existente para el hash, se creará un nuevo cliente y se persistirá para su uso futuro. Este comportamiento puede ser desactivado a través de la opción del controlador
    <literal>"disableClientPersistence"</literal>.
   </para>

   <para>
    Cada cliente contiene sus propias conexiones de base de datos y una vista
    de la topología del servidor (por ejemplo, autónomo, conjunto de réplicas,
    grupo de fragmentos). Al persistir el cliente entre las consultas PHP,
    la extensión es capaz de reutilizar las conexiones de base de datos
    establecidas y eliminar la necesidad de
    <link xlink:href="&url.mongodb.sdam;">descubrir la topología del servidor</link>
    en cada consulta.
   </para>

   <para>
    Considere el siguiente ejemplo:
   </para>

   <programlisting role="php">
<![CDATA[
<?php

$managers = [
    new MongoDB\Driver\Manager('mongodb://127.0.0.1'),
    new MongoDB\Driver\Manager('mongodb://127.0.0.1'),
    new MongoDB\Driver\Manager('mongodb://127.0.0.1:27017'),
    new MongoDB\Driver\Manager('mongodb://rs1.example.com,rs2.example.com/', ['replicaSet' => 'myReplicaSet']),
];

foreach ($managers as $manager) {
    $manager->executeCommand('test', new MongoDB\Driver\Command(['ping' => 1]));
}

?>
]]>
   </programlisting>

   <para>
    Los dos primeros objetos <classname>Manager</classname> compartirán el mismo
    cliente <link xlink:href="&url.mongodb.libmongoc;">libmongoc</link> ya que sus
    argumentos de constructor son idénticos. Los tercer y cuarto objetos
    utilizarán cada uno su propio cliente. En total, se crearán tres clientes y el proceso PHP ejecutando este script abrirá dos conexiones a
    <literal>127.0.0.1</literal> y una conexión a cada uno de
    <literal>rs1.example.com</literal> y <literal>rs2.example.com</literal>.
    Si la extensión descubre miembros adicionales del conjunto de réplicas
    después de emitir comandos <literal>hello</literal>, abrirá conexiones adicionales a estos servidores también.
   </para>

   <para>
    Si las mismas conexiones son reutilizadas por el mismo proceso PHP, los tres
    clientes serán reutilizados y no se establecerá ninguna nueva conexión. En
    función del tiempo transcurrido desde la última consulta servida, la extensión
    puede necesitar emitir comandos <literal>hello</literal> adicionales para actualizar su vista de las topologías.
   </para>
  </section>

  <section>
   <title>Persistencia de sockets (versiones PHP antes de 1.2.0)</title>

   <para>
    Las versiones de la extensión antes de 1.2.0 utilizan la API de flujos PHP para
    las conexiones de base de datos, utilizando una API en
    <link xlink:href="&url.mongodb.libmongoc;">libmongoc</link> para designar gestores personalizados para la comunicación por socket; sin embargo, se crea un nuevo cliente libmongoc para cada
    <classname>MongoDB\Driver\Manager</classname>. En consecuencia, la extensión persiste las conexiones de base de datos individuales pero no el estado
    de autentificación o la información de topología. Esto significa que
    la extensión debe emitir comandos al inicio de cada consulta para
    autenticarse y
    <link xlink:href="&url.mongodb.sdam;">descubrir la topología del servidor</link>.
   </para>

   <para>
    Las conexiones de base de datos son persistidas por un hash derivado del
    host del servidor, del puerto y de la cadena URI utilizada para construir el
    <classname>MongoDB\Driver\Manager</classname>. Las opciones del array del
    constructor no están incluidas en este hash.
   </para>

   <note>
    <simpara>
     Las versiones de la extensión &gt;= 1.1.8 y &lt; 1.2.0 no persisten los
     sockets para las conexiones SSL. Ver
     <link xlink:href="&url.mongodb.jira.phpc;-720">PHPC-720</link> para más
     información.
    </simpara>
   </note>

   <para>
    A pesar de sus carencias con las conexiones SSL persistentes y la información
    de topología, esta versión de la extensión soporta todas las
    <link xlink:href="context.ssl">opciones de contexto SSL</link> ya que utiliza la API de flujos PHP.
   </para>
  </section>
 </section>

 <section xml:id="mongodb.persistence">
  <titleabbrev>Persistir datos</titleabbrev>
  <title>Serialización y deserialización de variables PHP en MongoDB</title>

  <para>
   Este documento explica cómo se convierten las estructuras compuestas (es decir, los
   documentos, los arrays y los objetos) entre los valores BSON y PHP.
  </para>

  <section xml:id="mongodb.persistence.serialization">
   <title>Serialización en BSON</title>

   <section>
    <title>Arrays</title>

    <para>
     Si un array es un <emphasis>array compacto</emphasis> — es decir, un
     array vacío o las claves comienzan en 0 y son secuenciales sin huecos :
     <emphasis>array BSON</emphasis>.
    </para>

    <para>
     Si el array no es compacto — es decir, que tiene claves
     asociativas (cadenas), que las claves no comienzan en 0, o que hay
     huecos : <emphasis>objeto BSON</emphasis>.
    </para>

    <para>
     Un documento de nivel superior (raíz), <emphasis>siempre</emphasis>
     serializado como documento BSON.
    </para>

    <section>
     <title>Ejemplos</title>

     <para>
      Estos ejemplos se serializan como array BSON :
     </para>

     <programlisting role="text">
<![CDATA[
[ 8, 5, 2, 3 ] => [ 8, 5, 2, 3 ]
[ 0 => 4, 1 => 9 ] => [ 4, 9 ]
]]>
     </programlisting>

     <para>
      Estos ejemplos se serializan como objeto BSON :
     </para>

     <programlisting role="text">
<![CDATA[
[ 0 => 1, 2 => 8, 3 => 12 ] => { "0" : 1, "2" : 8, "3" : 12 }
[ "foo" => 42 ] => { "foo" : 42 }
[ 1 => 9, 0 => 10 ] => { "1" : 9, "0" : 10 }
]]>
     </programlisting>

     <para>
      Es de notar que los cinco ejemplos son <emphasis>extractos</emphasis>
      de un documento completo, y solo representan un <emphasis>valor</emphasis>
      dentro de un documento.
     </para>

    </section>
   </section>

   <section>
    <title>Objetos</title>

     <para>
      Si un objeto es de la clase <classname>stdClass</classname>, serializar
      como <emphasis>documento BSON</emphasis>.
     </para>

     <para>
      Si un objeto es una clase soportada que implementa
      <interfacename>MongoDB\BSON\Type</interfacename>, entonces utilizar la lógica
      de serialización BSON para este tipo específico.
      Las instancias de <interfacename>MongoDB\BSON\Type</interfacename> (a
      excepción de <interfacename>MongoDB\BSON\Serializable</interfacename>)
      solo pueden ser serializadas como valor de campo de documento. Intentar
      serializar tal objeto como documento raíz lanzará una
      <classname>MongoDB\Driver\Exception\UnexpectedValueException</classname>.
     </para>

     <para>
      Si un objeto es de una clase desconocida que implementa la interfaz
      <interfacename>MongoDB\BSON\Type</interfacename>, entonces se lanza una
      <classname>MongoDB\Driver\Exception\UnexpectedValueException</classname>.
     </para>

     <para>
      Si un objeto es de otra clase, sin implementar una interfaz especial,
      serializar como <emphasis>documento BSON</emphasis>. Mantener solo
      las propiedades <emphasis>públicas</emphasis>, e ignorar las propiedades
      <emphasis>protegidas</emphasis> y <emphasis>privadas</emphasis>.
     </para>

     <para>
      Si un objeto es de una clase que implementa
      <interfacename>MongoDB\BSON\Serializable</interfacename>, llamar
      <methodname>MongoDB\BSON\Serializable::bsonSerialize</methodname> y
      utilizar el array o <classname>stdClass</classname> devuelto para
      serializar como documento BSON o array. El tipo BSON será
      determinado por las siguientes reglas :
     </para>

     <para>
      <orderedlist>
       <listitem>
        <para>
         Los documentos raíz deben ser serializados como
         documento BSON.
        </para>
       </listitem>
       <listitem>
        <para>
         Los objetos <interfacename>MongoDB\BSON\Persistable</interfacename> deben
         ser serializados como documento BSON.
        </para>
       </listitem>
       <listitem>
        <para>
         Si <methodname>MongoDB\BSON\Serializable::bsonSerialize</methodname>
         devuelve un array compacto, serializar como array BSON.
        </para>
       </listitem>
       <listitem>
        <para>
         Si <methodname>MongoDB\BSON\Serializable::bsonSerialize</methodname>
         devuelve un array no compacto o <classname>stdClass</classname>, serializar como objeto BSON.
        </para>
       </listitem>
       <listitem>
        <para>
         Si <methodname>MongoDB\BSON\Serializable::bsonSerialize</methodname>
         no devuelve un array o <classname>stdClass</classname>, lanzar una excepción
         <classname>MongoDB\Driver\Exception\UnexpectedValueException</classname>.
        </para>
       </listitem>
      </orderedlist>
     </para>

     <para>
      Si un objeto es de una clase que implementa la interfaz
      <interfacename>MongoDB\BSON\Persistable</interfacename> (lo que implica
      <interfacename>MongoDB\BSON\Serializable</interfacename>), obtener las
      propiedades de manera similar a los párrafos anteriores, pero
      <emphasis>también</emphasis> añadir una propiedad
      <property>__pclass</property> como valor binario, con un subtipo
      <literal>0x80</literal> y datos que llevan el nombre de la clase
      completamente calificado del objeto que se serializa.
     </para>

     <para>
      La propiedad <property>__pclass</property> se añade al array o al
      objeto devuelto por
      <methodname>MongoDB\BSON\Serializable::bsonSerialize</methodname>, lo que
      significa que sobrescribirá cualquier clave/propiedad <property>__pclass</property>
      en el valor de retorno de
      <methodname>MongoDB\BSON\Serializable::bsonSerialize</methodname>. Si se
      desea evitar este comportamiento y definir su propio valor
      <property>__pclass</property>,
      no se debe <emphasis>implementar</emphasis>
      <interfacename>MongoDB\BSON\Persistable</interfacename> y se debería implementar
      <interfacename>MongoDB\BSON\Serializable</interfacename> directamente.
     </para>

     <section>
      <title>Ejemplos</title>

      <programlisting role="php">
<![CDATA[
<?php

class stdClass
{
    public $foo = 42;
} // => {"foo": 42}

class MyClass
{
    public $foo = 42;
    protected $prot = 'wine';
    private $fpr = 'cheese';
} // => {"foo": 42}

class AnotherClass1 implements MongoDB\BSON\Serializable
{
    public $foo = 42;
    protected $prot = 'wine';
    private $fpr = 'cheese';

    public function bsonSerialize(): array
    {
        return ['foo' => $this->foo, 'prot' => $this->prot];
    }
} // => {"foo": 42, "prot": "wine"}

class AnotherClass2 implements MongoDB\BSON\Serializable
{
    public $foo = 42;

    public function bsonSerialize(): self
    {
        return $this;
    }
} // => MongoDB\Driver\Exception\UnexpectedValueException("bsonSerialize() did not return an array or stdClass")

class AnotherClass3 implements MongoDB\BSON\Serializable
{
    private $elements = ['foo', 'bar'];

    public function bsonSerialize(): array
    {
        return $this->elements;
    }
} // => {"0": "foo", "1": "bar"}

/**
 * Nesting Serializable classes
 */

class AnotherClass4 implements MongoDB\BSON\Serializable
{
    private $elements = [0 => 'foo', 2 => 'bar'];

    public function bsonSerialize(): array
    {
        return $this->elements;
    }
} // => {"0": "foo", "2": "bar"}

class ContainerClass1 implements MongoDB\BSON\Serializable
{
    public $things;

    public function __construct()
    {
        $this->things = new AnotherClass4();
    }

    function bsonSerialize(): array
    {
        return ['things' => $this->things];
    }
} // => {"things": {"0": "foo", "2": "bar"}}

class AnotherClass5 implements MongoDB\BSON\Serializable
{
    private $elements = [0 => 'foo', 2 => 'bar'];

    public function bsonSerialize(): array
    {
        return array_values($this->elements);
    }
} // => {"0": "foo", "1": "bar"} como clase raíz
  //        ["foo", "bar"] como valor anidado

class ContainerClass2 implements MongoDB\BSON\Serializable
{
    public $things;

    public function __construct()
    {
        $this->things = new AnotherClass5();
    }

    public function bsonSerialize(): array
    {
        return ['things' => $this->things];
    }
} // => {"things": ["foo", "bar"]}

class AnotherClass6 implements MongoDB\BSON\Serializable
{
    private $elements = ['foo', 'bar'];

    function bsonSerialize(): object
    {
        return (object) $this->elements;
    }
} // => {"0": "foo", "1": "bar"}

class ContainerClass3 implements MongoDB\BSON\Serializable
{
    public $things;

    public function __construct()
    {
        $this->things = new AnotherClass6();
    }

    public function bsonSerialize(): array
    {
        return ['things' => $this->things];
    }
} // => {"things": {"0": "foo", "1": "bar"}}

class UpperClass implements MongoDB\BSON\Persistable
{
    public $foo = 42;
    protected $prot = 'wine';
    private $fpr = 'cheese';

    private $data;

    public function bsonUnserialize(array $data): void
    {
        $this->data = $data;
    }

    public function bsonSerialize(): array
    {
        return ['foo' => $this->foo, 'prot' => $this->prot];
    }
} // => {"foo": 42, "prot": "wine", "__pclass": {"$type": "80", "$binary": "VXBwZXJDbGFzcw=="}}

?>
]]>
     </programlisting>
    </section>
   </section>
  </section>

  <section xml:id="mongodb.persistence.deserialization">
   <title>Deserialización desde BSON</title>

   &mongodb.warning.duplicate-keys;

   <para>
    La extensión <code>mongodb</code> deserializa los documentos BSON
    y los arrays BSON como arrays PHP. Aunque los arrays PHP son
    prácticos de usar, este comportamiento era problemático ya que diferentes
    tipos BSON podían ser deserializados en el mismo valor PHP (por ejemplo
    <literal>{"0": "foo"}</literal> y <literal>["foo"]</literal>) y hacía
    imposible inferir el tipo BSON original. Por defecto, la extensión
    <code>mongodb</code> aborda esta preocupación asegurándose de que los
    arrays BSON y los documentos BSON se conviertan en arrays y objetos PHP,
    respectivamente.
   </para>
   <para>
    Para los tipos compuestos, existen tres tipos de datos :
   </para>

   <para>
    <variablelist>
     <varlistentry>
      <term>raíz</term>
      <listitem>
       <para>
        se refiere a un documento BSON de nivel superior <emphasis>solo</emphasis>
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>documento</term>
      <listitem>
       <para>
        se refiere a documentos BSON anidados <emphasis>solo</emphasis>
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>array</term>
      <listitem>
       <para>
        se refiere a un array BSON
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>

   <para>
    Además de los tres tipos colectivos, también es posible configurar campos específicos en su documento para mapear los tipos de datos
    mencionados a continuación. Por ejemplo, el siguiente tipo de mapa le permite mapear cada documento incrustado en un array <literal>"addresses"</literal> a una clase <classname>Address</classname> <emphasis>y</emphasis> cada
    campo <literal>"city"</literal> en estos documentos de dirección incrustados a una
    clase <classname>City</classname>:

    <programlisting role="text">
<![CDATA[
[
    'fieldPaths' => [
        'addresses.$' => 'MyProject\Address',
        'addresses.$.city' => 'MyProject\City',
    ],
]
]]>
    </programlisting>
   </para>

   <para>
    Cada uno de estos tres tipos de datos, así como los mapeos específicos
    de los campos, pueden ser mapeados contra diferentes tipos PHP. Los valores de
    mapeo posibles son:
   </para>

   <para>
    <variablelist>
     <varlistentry>
      <term><emphasis>no definido</emphasis> o <type>NULL</type> (por defecto)</term>
      <listitem>
       <para>
        <itemizedlist>
         <listitem>
          <para>
           Un array BSON será deserializado en un <type>array</type> PHP.
          </para>
         </listitem>
         <listitem>
          <para>
           Un documento BSON (raíz o anidado) sin propiedad
            <property>__pclass</property>
            <footnote xml:id="mongodb.pclass">
            <para>
             Una propiedad __pclass solo se considera existente si
             una propiedad con ese nombre existe, y es un valor
             binario, y el subtipo del valor binario es 0x80. Si
             alguna de estas tres condiciones no se cumple, la propiedad
             __pclass no existe y debe ser tratada como cualquier otra
             propiedad normal.
            </para>
           </footnote>
           se convierte en un objeto <type>stdClass</type>, con cada clave de documento
           BSON definida como una propiedad de <type>stdClass</type>
           pública.
          </para>
         </listitem>
         <listitem>
          <para>
           Un documento BSON (raíz o anidado) con una propiedad
           <property>__pclass</property> se convierte en un objeto PHP de la clase
           nombrada por la propiedad <property>__pclass</property>.
          </para>
          <para>
           Si la clase nombrada implementa la interfaz
           <interfacename>MongoDB\BSON\Persistable</interfacename>, entonces las
           propiedades del documento BSON, incluyendo la propiedad
           <property>__pclass</property>, se envían como array asociativo a la función
           <methodname>MongoDB\BSON\Unserializable::bsonUnserialize</methodname>
           para inicializar las propiedades del objeto.
          </para>
          <para>
           Si la clase nombrada no existe o no implementa la interfaz
           <interfacename>MongoDB\BSON\Persistable</interfacename>,
           <type>stdClass</type> será
           utilizado y cada clave de documento BSON (incluyendo <property>__pclass</property>)
           será definida como una propiedad pública de <type>stdClass</type>.
          </para>
          <para>
           La funcionalidad <property>__pclass</property> se basa en el hecho
           de que la propiedad sea parte de un documento MongoDB recuperado. Si utiliza una
           <link xlink:href="mongodb-driver-query.construct-queryOptions">proyección</link>
           al buscar documentos, debe incluir el campo
           <property>__pclass</property> en la proyección para que esta
           funcionalidad funcione.
          </para>
         </listitem>
        </itemizedlist>
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>"array"</literal></term>
      <listitem>
       <para>
        Transforma un array BSON en un <type>array</type> PHP. No habrá
        tratamiento especial de una propiedad <property>__pclass</property> <footnoteref linkend="mongodb.pclass"/>
        pero puede ser definida como un elemento en el array devuelto
        si estaba presente en el documento BSON.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>"object"</literal> o <literal>"stdClass"</literal></term>
      <listitem>
       <para>
        Transforma un array BSON o un documento BSON en un objeto
        <type>stdClass</type>. No habrá tratamiento especial de una
        propiedad <property>__pclass</property> <footnoteref linkend="mongodb.pclass"/>
        pero puede ser definida como una propiedad pública en el objeto
        devuelto si estaba presente en el documento BSON.
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>"bson"</literal></term>
      <listitem>
       <para>
        Transforma un array BSON en un <classname>MongoDB\BSON\PackedArray</classname>
        y un documento BSON en un <classname>MongoDB\BSON\Document</classname>,
        independientemente de si el documento BSON tiene una propiedad
        <property>__pclass</property> <footnoteref linkend="mongodb.pclass"/>.
       </para>
       <note>
        <simpara>
         El valor <literal>bson</literal> solo está disponible para los tres
         tipos raíz, y no en los mapeos específicos de los campos.
        </simpara>
       </note>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>todas las otras cadenas de caracteres</term>
      <listitem>
       <para>
        Define el nombre de la clase a la que el documento BSON debe ser
        deserializado. Para los documentos BSON que incluyen propiedades
        <property>__pclass</property>,
        esta clase tendrá prioridad.
       </para>

       <para>
        Si la clase nombrada no existe o no implementa la interfaz
        <interfacename>MongoDB\BSON\Unserializable</interfacename>,
        se lanza una excepción
        <classname>MongoDB\Driver\Exception\InvalidArgumentException</classname>.
       </para>

       <para>
        Si el objeto BSON tiene una propiedad <property>__pclass</property> y
        esta clase existe e implementa
        <interfacename>MongoDB\BSON\Persistable</interfacename>, tendrá
        prioridad sobre la clase proporcionada en el mapa de tipos.
       </para>

       <para>
        Las propiedades del documento BSON, <emphasis>incluyendo</emphasis> la propiedad
        <property>__pclass</property>,
        serán enviadas como array asociativo a la función
        <methodname>MongoDB\BSON\Unserializable::bsonUnserialize</methodname>
        para inicializar las propiedades del objeto.
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>

   <section xml:id="mongodb.persistence.typemaps">
    <title>TypeMaps</title>

     <para>
      Los TypeMaps pueden ser definidos a través del método
      <methodname>MongoDB\Driver\Cursor::setTypeMap</methodname> en un objeto
      <classname>MongoDB\Driver\Cursor</classname>, o el argumento
      <literal>$typeMap</literal> de
      <function>MongoDB\BSON\toPHP</function>,
      <methodname>MongoDB\BSON\Document::toPHP</methodname>, y
      <methodname>MongoDB\BSON\PackedArray::toPHP</methodname>. Cada una de las tres
      clases (<emphasis>raíz</emphasis>, <emphasis>documento</emphasis>, y
      <emphasis>array</emphasis>) puede ser definida individualmente, además de los
      tipos específicos de los campos.
     </para>

     <para>
      Si el valor en el TypeMap es <type>NULL</type>, esto significa lo mismo que el valor <emphasis>por defecto</emphasis> para este elemento.
     </para>
    </section>

    <section>
     <title>Ejemplos</title>

     <para>
      Estos ejemplos utilizan las siguientes clases:
     </para>

     <para>
      <variablelist>
       <varlistentry>
        <term>MyClass</term>
        <listitem>
         <para>
          que no implementa <emphasis>ninguna</emphasis> interfaz
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term>YourClass</term>
        <listitem>
         <para>
          que implementa
          <interfacename>MongoDB\BSON\Unserializable</interfacename>
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term>OurClass</term>
        <listitem>
         <para>
          que implementa
          <interfacename>MongoDB\BSON\Persistable</interfacename>
         </para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term>TheirClass</term>
        <listitem>
         <para>
          que extiende OurClass
         </para>
        </listitem>
       </varlistentry>
      </variablelist>
     </para>

     <para>
      El método <methodname>MongoDB\BSON\Unserializable::bsonUnserialize</methodname>
      de YourClass, OurClass, TheirClass itera sobre el array y define las
      propiedades sin modificaciones. También <emphasis>añade</emphasis> la
      propiedad <literal>$unserialized</literal> a &true;:

      <programlisting role="php">
<![CDATA[
<?php

function bsonUnserialize( array $map )
{
    foreach ( $map as $k => $value )
    {
        $this->$k = $value;
    }
    $this->unserialized = true;
}
]]>
      </programlisting>
     </para>

     <para>
      <programlisting role="text">
<![CDATA[
/* typemap: [] (todos los valores por defecto) */
{ "foo": "yes", "bar" : false }
  -> stdClass { $foo => 'yes', $bar => false }

{ "foo": "no", "array" : [ 5, 6 ] }
  -> stdClass { $foo => 'no', $array => [ 5, 6 ] }

{ "foo": "no", "obj" : { "embedded" : 3.14 } }
  -> stdClass { $foo => 'no', $obj => stdClass { $embedded => 3.14 } }

{ "foo": "yes", "__pclass": "MyClass" }
  -> stdClass { $foo => 'yes', $__pclass => 'MyClass' }

{ "foo": "yes", "__pclass": { "$type" : "80", "$binary" : "MyClass" } }
  -> stdClass { $foo => 'yes', $__pclass => Binary(0x80, 'MyClass') }

{ "foo": "yes", "__pclass": { "$type" : "80", "$binary" : "YourClass") }
  -> stdClass { $foo => 'yes', $__pclass => Binary(0x80, 'YourClass') }

{ "foo": "yes", "__pclass": { "$type" : "80", "$binary" : "OurClass") }
  -> OurClass { $foo => 'yes', $__pclass => Binary(0x80, 'OurClass'), $unserialized => true }

{ "foo": "yes", "__pclass": { "$type" : "44", "$binary" : "YourClass") }
  -> stdClass { $foo => 'yes', $__pclass => Binary(0x44, 'YourClass') }
]]>
      </programlisting>
     </para>

     <para>
      <programlisting role="text">
<![CDATA[
/* typemap: [ "root" => "MissingClass" ] */
{ "foo": "yes" }
  -> MongoDB\Driver\Exception\InvalidArgumentException("MissingClass does not exist")

/* typemap: [ "root" => "MyClass" ] */
{ "foo": "yes", "__pclass" : { "$type": "80", "$binary": "MyClass" } }
  -> MongoDB\Driver\Exception\InvalidArgumentException("MyClass does not implement Unserializable interface")

/* typemap: [ "root" => "MongoDB\BSON\Unserializable" ] */
{ "foo": "yes" }
  -> MongoDB\Driver\Exception\InvalidArgumentException("Unserializable is not a concrete class")

/* typemap: [ "root" => "YourClass" ] */
{ "foo": "yes", "__pclass" : { "$type": "80", "$binary": "MongoDB\BSON\Unserializable" } }
  -> YourClass { $foo => "yes", $__pclass => Binary(0x80, "MongoDB\BSON\Unserializable"), $unserialized => true }

/* typemap: [ "root" => "YourClass" ] */
{ "foo": "yes", "__pclass" : { "$type": "80", "$binary": "MyClass" } }
  -> YourClass { $foo => "yes", $__pclass => Binary(0x80, "MyClass"), $unserialized => true }

/* typemap: [ "root" => "YourClass" ] */
{ "foo": "yes", "__pclass" : { "$type": "80", "$binary": "OurClass" } }
  -> OurClass { $foo => "yes", $__pclass => Binary(0x80, "OurClass"), $unserialized => true }

/* typemap: [ "root" => "YourClass" ] */
{ "foo": "yes", "__pclass" : { "$type": "80", "$binary": "TheirClass" } }
  -> TheirClass { $foo => "yes", $__pclass => Binary(0x80, "TheirClass"), $unserialized => true }

/* typemap: [ "root" => "OurClass" ] */
{ foo: "yes", "__pclass" : { "$type": "80", "$binary": "TheirClass" } }
  -> TheirClass { $foo => "yes", $__pclass => Binary(0x80, "TheirClass"), $unserialized => true }
]]>
      </programlisting>
     </para>

     <para>
      <programlisting role="text">
<![CDATA[
/* typemap: [ 'root' => 'YourClass' ] */
{ foo: "yes", "__pclass" : { "$type": "80", "$binary": "YourClass" } }
  -> YourClass { $foo => 'yes', $__pclass => Binary(0x80, 'YourClass'), $unserialized => true }
]]>
      </programlisting>
     </para>

     <para>
      <programlisting role="text">
<![CDATA[
/* typemap: [ 'root' => 'array', 'document' => 'array' ] */
{ "foo": "yes", "bar" : false }
  -> [ "foo" => "yes", "bar" => false ]

{ "foo": "no", "array" : [ 5, 6 ] }
  -> [ "foo" => "no", "array" => [ 5, 6 ] ]

{ "foo": "no", "obj" : { "embedded" : 3.14 } }
  -> [ "foo" => "no", "obj" => [ "embedded => 3.14 ] ]

{ "foo": "yes", "__pclass": "MyClass" }
  -> [ "foo" => "yes", "__pclass" => "MyClass" ]

{ "foo": "yes", "__pclass" : { "$type": "80", "$binary": "MyClass" } }
  -> [ "foo" => "yes", "__pclass" => Binary(0x80, "MyClass") ]

{ "foo": "yes", "__pclass" : { "$type": "80", "$binary": "OurClass" } }
  -> [ "foo" => "yes", "__pclass" => Binary(0x80, "OurClass") ]
]]>
      </programlisting>
     </para>

     <para>
      <programlisting role="text">
<![CDATA[
/* typemap: [ 'root' => 'object', 'document' => 'object' ] */
{ "foo": "yes", "__pclass": { "$type": "80", "$binary": "MyClass" } }
  -> stdClass { $foo => "yes", "__pclass" => Binary(0x80, "MyClass") }
]]>
      </programlisting>
     </para>

   </section>
  </section>

 </section>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
