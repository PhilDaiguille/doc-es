<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 61374bbe228e8e9c55a24aba59a1e2bb2a871148 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes -->
<refentry xml:id="function.pcntl-wait" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>pcntl_wait</refname>
  <refpurpose>Espera o devuelve el estado de un proceso hijo</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>pcntl_wait</methodname>
   <methodparam><type>int</type><parameter role="reference">status</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter><initializer>0</initializer></methodparam>
   <methodparam choice="opt"><type>array</type><parameter role="reference">resource_usage</parameter><initializer>[]</initializer></methodparam>
  </methodsynopsis>
  <para>
   <function>pcntl_wait</function> suspende la ejecución del proceso
   actual hasta que uno de los procesos hijos haya terminado, o hasta que
   se envíe una señal para terminar el proceso actual o
   para llamar a un gestor. Si el proceso ya ha terminado en el momento
   de la llamada a la función, es decir, si el proceso es un
   zombie, entonces la función termina inmediatamente. Todos los
   recursos del sistema utilizados por el proceso hijo son liberados.
   Consulte el manual de su sistema en wait(2) para obtener detalles
   específicos sobre el funcionamiento de wait() en él.
  </para>
  <note>
   <para>
    Esta función es equivalente a llamar a la función
    <function>pcntl_waitpid</function> con un <parameter>process_id</parameter>
    valiendo <literal>-1</literal> y sin <parameter>flags</parameter>.
   </para>
  </note>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>status</parameter></term>
     <listitem>
      <para>
       <function>pcntl_wait</function> almacenará la información
       de estado en el parámetro <parameter>status</parameter>
       que puede ser leído con las siguientes funciones:
       <function>pcntl_wifexited</function>,
       <function>pcntl_wifstopped</function>,
       <function>pcntl_wifsignaled</function>,
       <function>pcntl_wexitstatus</function>,
       <function>pcntl_wtermsig</function> y
       <function>pcntl_wstopsig</function>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       Si wait3 está disponible en su sistema (esto es el caso de la mayoría
       de los sistemas BSD-), puede añadir el parámetro opcional
       <parameter>flags</parameter>. Si no se proporciona,
       wait() será utilizado para la llamada al sistema. Si wait3 no está disponible,
       el parámetro <parameter>flags</parameter> no tendrá efecto. El valor
       de <parameter>flags</parameter> es la combinación de cero o más
       de las siguientes constantes:
       <table>
        <title>Valores posibles para <parameter>flags</parameter></title>
        <tgroup cols="2">
         <tbody>
          <row>
           <entry><constant>WNOHANG</constant></entry>
           <entry>
            Termina inmediatamente si ningún proceso ha terminado.
           </entry>
          </row>
          <row>
           <entry><constant>WUNTRACED</constant></entry>
           <entry>
            Termina para los procesos que están detenidos, y para aquellos
            cuyo resultado no ha sido reportado.
           </entry>
          </row>
         </tbody>
        </tgroup>
       </table>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>pcntl_wait</function> devuelve el identificador de proceso
   que ha terminado, -1 en caso de error o cero si WNOHANG ha sido
   proporcionado como opción (disponible en los sistemas wait3),
   y ningún proceso hijo estaba disponible.
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>pcntl_fork</function></member>
    <member><function>pcntl_signal</function></member>
    <member><function>pcntl_wifexited</function></member>
    <member><function>pcntl_wifstopped</function></member>
    <member><function>pcntl_wifsignaled</function></member>
    <member><function>pcntl_wexitstatus</function></member>
    <member><function>pcntl_wtermsig</function></member>
    <member><function>pcntl_wstopsig</function></member>
    <member><function>pcntl_waitpid</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
