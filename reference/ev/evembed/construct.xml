<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 23ea6be076881a34e1d454e9680968ece085f7f6 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="evembed.construct" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>EvEmbed::__construct</refname>
  <refpurpose>Construye un objeto EvEmbed</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <constructorsynopsis>
   <modifier>public</modifier>
   <methodname>EvEmbed::__construct</methodname>
   <methodparam>
    <type>object</type>
    <parameter>other</parameter>
   </methodparam>
   <methodparam choice="opt">
    <type>callable</type>
    <parameter>callback</parameter>
   </methodparam>
   <methodparam choice="opt">
    <type>mixed</type>
    <parameter>data</parameter>
   </methodparam>
   <methodparam choice="opt">
    <type>int</type>
    <parameter>priority</parameter>
   </methodparam>
  </constructorsynopsis>
  <para>
   Se trata de un tipo de watcher avanzado que permite integrar un bucle
   de eventos en otro (actualmente, solo los eventos IO son
   soportados en el bucle interno, otros tipos de watcher no deben
   ser utilizados).
  </para>
  <para>
   Ver la
   <link
   xlink:href="http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod#code_ev_embed_code_when_one_backend_">
   documentación libev</link> para más detalles.
  </para>
  <para>
   Este watcher es más útil en sistemas
   <emphasis>BSD</emphasis> donde <literal>kqueue</literal> no es utilizado,
   para poder manejar un gran número de sockets. Ver el ejemplo a continuación.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term>
     <parameter>other</parameter>
    </term>
    <listitem>
     <para>
      Una instancia de <classname>EvLoop</classname>. El bucle a integrar;
      debe ser encapsulable (ver el método
      <methodname>Ev::embeddableBackends</methodname>).
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <parameter>callback</parameter>
    </term>
    <listitem>
     <para>
      Ver las
      <link linkend="ev.watcher-callbacks">funciones de retrollamada de los Watcher</link>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <parameter>data</parameter>
    </term>
    <listitem>
     <para>
      Datos personalizados para asociar con el watcher.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <parameter>priority</parameter>
    </term>
    <listitem>
     <para>
      <link linkend="ev.constants.watcher-pri">Prioridad del Watcher</link>
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
 <example>
   <title>
    Encapsulamiento de un bucle creado con el gestor kqueue en el bucle por omisión</title>
   <programlisting role="php">
<![CDATA[
<?php
/*
 * Verifica si kqueue está disponible y crea un gestor kqueue
 * para usarlo con los sockets (que funciona habitualmente con cualquier implementación
 * de kqueue. Almacena el bucle de eventos kqueue/socket solo, en loop_socket.
 * (opcionalmente, uso de EVFLAG_NOENV)
 *
 * Ejemplo tomado de
 * http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod#Examples_CONTENT-9
 */
$loop        = EvLoop::defaultLoop();
$socket_loop = NULL;
$embed       = NULL;

if (Ev::supportedBackends() & ~Ev::recommendedBackends() & Ev::BACKEND_KQUEUE) {
    if (($socket_loop = new EvLoop(Ev::BACKEND_KQUEUE))) {
        $embed = new EvEmbed($loop);
    }
}

if (!$socket_loop) {
    $socket_loop = $loop;
}

// Ahora, se usa $socket_loop para todos los sockets, y $loop para todo lo demás
?>
]]>
   </programlisting>
  </example>
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member>
    <methodname>Ev::embeddableBackends</methodname>
   </member>
  </simplelist>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
