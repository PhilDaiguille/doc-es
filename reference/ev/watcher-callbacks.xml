<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 23ea6be076881a34e1d454e9680968ece085f7f6 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->

<chapter  xml:id="ev.watcher-callbacks" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Las funciones de retrollamada de un Watcher</title>
 <para>
  Todos los watchers pueden estar activos (esperando eventos) o inactivos
  (en pausa). Solo los watchers activos pueden tener sus funciones de retrollamada
  llamadas. Todas las funciones de retrollamada serán llamadas con al menos dos
  argumentos:
  <parameter>watcher</parameter> - el watcher, y <parameter>revents</parameter>,
  una máscara de eventos recibidos.
 </para>
 <para>
  Las funciones de retrollamada de los watchers son pasadas a los constructores de los watchers
  (una clase derivada de <classname>EvWatcher</classname> -
  <methodname>EvCheck::__construct</methodname>, <methodname>EvChild::__construct</methodname>
  etc.). Una función de retrollamada de un watcher debe coincidir con el siguiente prototipo:
 </para>
 <methodsynopsis>
  <type>void</type>
  <methodname>callback</methodname>
  <methodparam
   choice="opt">
   <type>object</type>
   <parameter>watcher</parameter>
   <initializer>NULL</initializer>
  </methodparam>
  <methodparam
   choice="opt">
   <type>int</type>
   <parameter>revents</parameter>
   <initializer>NULL</initializer>
  </methodparam>
 </methodsynopsis>
 <para>
  <variablelist>
   <varlistentry>
    <term>
     <parameter>watcher</parameter>
    </term>
    <listitem>
     <para>
      La instancia del watcher (de una clase que extiende <classname>EvWatcher</classname>).
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <parameter>revents</parameter>
    </term>
    <listitem>
     <para>
      <link linkend="ev.constants.watcher-revents">Un watcher que recibe los eventos</link>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </para>
 <para>
  Cada tipo de watcher tiene un byte asociado en
  <parameter>revents</parameter>, por lo tanto, se puede utilizar la misma
  función de retrollamada para varios watchers. La máscara de eventos
  se nombra según el tipo, es decir,
  <classname>EvChild</classname> (o <methodname>EvLoop::child</methodname>) define
  <constant>EV::CHILD</constant>, <classname>EvPrepare</classname> (o
  <methodname>EvLoop::prepare</methodname>) define <constant>Ev::PREPARE</constant>,
  <classname>EvPeriodic</classname> (o <methodname>EvLoop::periodic</methodname>)
  define <constant>Ev::PERIODIC</constant> y así sucesivamente, con la excepción de los
  eventos de E/S (que pueden definir tanto los bytes
  <constant>Ev::READ</constant> como <constant>Ev::WRITE</constant>).
 </para>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
