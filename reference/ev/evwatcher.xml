<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 23ea6be076881a34e1d454e9680968ece085f7f6 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<reference xml:id="class.evwatcher" role="class" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">
 <title>La clase EvWatcher</title>
 <titleabbrev>EvWatcher</titleabbrev>
 <partintro>
<!-- {{{ EvWatcher intro -->
  <section xml:id="evwatcher.intro">
   &reftitle.intro;
   <para>
    La clase <classname>EvWatcher</classname> es una clase base
    para todos los watchers (<classname>EvCheck</classname>, <classname>EvChild</classname>
    etc.). Dado que el constructor de la clase <classname>EvWatcher</classname>
    es <modifier>abstracto</modifier>, no se puede
    (y no se debe) crear objetos EvWatcher directamente.
   </para>
  </section>
<!-- }}} -->
  <section xml:id="evwatcher.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass>
     <classname>EvWatcher</classname>
    </ooclass>
<!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <modifier>abstract</modifier>
      <classname>EvWatcher</classname>
     </ooclass>
    </classsynopsisinfo>
<!-- }}} -->
    <classsynopsisinfo role="comment">&Properties;</classsynopsisinfo>
    <fieldsynopsis>
     <modifier>public</modifier>
     <varname linkend="evwatcher.props.is-active">is_active</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <varname linkend="evwatcher.props.data">data</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <varname linkend="evwatcher.props.is-pending">is_pending</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <varname linkend="evwatcher.props.priority">priority</varname>
    </fieldsynopsis>
    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.evwatcher')/db:refentry/db:refsect1[@role='description']/descendant::db:constructorsynopsis[not(@role='procedural')])"/>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.evwatcher')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[not(@role='procedural')])"/>
   </classsynopsis>
<!-- }}} -->
  </section>
<!-- {{{ EvWatcher properties -->
  <section xml:id="evwatcher.props">
   &reftitle.properties;
   <variablelist>
    <varlistentry xml:id="evwatcher.props.is-active">
     <term>
      <varname>is_active</varname>
     </term>
     <listitem>
      <para>
       <emphasis>Solo lectura</emphasis>. &true; si el watcher está
       activo, &false; en caso contrario.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="evwatcher.props.data">
     <term>
      <varname>data</varname>
     </term>
     <listitem>
      <para>
       Datos de usuario personalizados asociados con el watcher
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="evwatcher.props.is-pending">
     <term>
      <varname>is_pending</varname>
     </term>
     <listitem>
      <para>
       <emphasis>Solo lectura</emphasis>. Si el watcher está pendiente,
       es decir, si el watcher tiene eventos pendientes, pero su función
       de retrollamada aún no ha sido llamada, &false; en caso contrario. Mientras el
       watcher esté pendiente (pero no activo), otro <emphasis>no puede</emphasis>
       modificar sus prioridades.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="evwatcher.props.priority">
     <term>
      <varname>priority</varname>
     </term>
     <listitem>
      <para>
       &integer;
       Rango de <constant>Ev::MINPRI</constant> a <constant>Ev::MAXPRI</constant>.
       Los watchers pendientes con una prioridad alta serán llamados
       antes que los watchers con una prioridad baja, pero la prioridad no puede
       hacer que un watcher nunca sea ejecutado (excepto para los watchers
       <classname>EvIdle</classname>).
       Los watchers <classname>EvIdle</classname> proporcionan funcionalidades
       para suprimir la invocación cuando hay eventos con una prioridad
       más alta pendientes.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </section>
<!-- }}} -->
 </partintro>

 &reference.ev.entities.evwatcher;

</reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
