<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 23ea6be076881a34e1d454e9680968ece085f7f6 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<reference xml:id="class.evidle" role="class" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">
 <title>La clase EvIdle</title>
 <titleabbrev>EvIdle</titleabbrev>
 <partintro>
<!-- {{{ EvIdle intro -->
  <section xml:id="evidle.intro">
   &reftitle.intro;
   <para>
    Los observadores <classname>EvIdle</classname> lanzan los eventos
    cuando ningún otro evento con la misma (o superior) prioridad
    está pendiente (<classname>EvPrepare</classname>, <classname>EvCheck</classname>
    y otros observadores <classname>EvIdle</classname> no cuentan
    como <emphasis>eventos</emphasis>).
   </para>
   <para>
    Asimismo, mientras el proceso está gestionando sockets o
    tiempos de espera máximos (o incluso señales) de la misma prioridad (o
    de prioridad superior), no se lanzará. Pero cuando el proceso
    está inactivo (o solo hay observadores con prioridad baja pendientes), los observadores <classname>EvIdle</classname> serán llamados
    una vez por iteración del bucle de eventos - y esto, mientras
    no se detengan, o el proceso no reciba más eventos
    y se ocupe así de gestionar trabajos con prioridad superior.
   </para>
   <para>
    Además de mantener el proceso no bloqueante (lo cual es útil a veces),
    los observadores <classname>EvIdle</classname> son un buen lugar
    para realizar <emphasis>"trabajos en pseudo-segundo plano"</emphasis>,
    o reprogramar trabajos después de que el bucle de eventos haya gestionado
    los eventos excepcionales.
   </para>
   <para>
    El efecto más notable es que, mientras los observadores
    <emphasis>idle</emphasis> estén activos, el proceso
    <emphasis>no</emphasis> se bloqueará al esperar nuevos
    eventos.
   </para>
  </section>
<!-- }}} -->
  <section xml:id="evidle.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass>
     <classname>EvIdle</classname>
    </ooclass>
<!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <classname>EvIdle</classname>
     </ooclass>
     <ooclass>
      <modifier>extends</modifier>
      <classname>EvWatcher</classname>
     </ooclass>
    </classsynopsisinfo>
<!-- }}} -->
<!--<classsynopsisinfo role="comment">&Properties;</classsynopsisinfo>-->
    <classsynopsisinfo role="comment">&InheritedProperties;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('evwatcher.synopsis')/descendant::db:fieldsynopsis)" />
    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.evidle')/db:refentry/db:refsect1[@role='description']/descendant::db:constructorsynopsis[not(@role='procedural')])"/>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.evidle')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[not(@role='procedural')])"/>
    <classsynopsisinfo role="comment">&InheritedMethods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.evwatcher')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[1])" />
   </classsynopsis>
<!-- }}} -->
  </section>
<!-- }}} -->
 </partintro>

 &reference.ev.entities.evidle;

</reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
