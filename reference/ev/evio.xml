<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 33e5f4ef7243bc1282acb1cba93e8f99c1debe68 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<reference xml:id="class.evio" role="class" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">
 <title>La clase EvIo</title>
 <titleabbrev>EvIo</titleabbrev>
 <partintro>
<!-- {{{ EvIo intro -->
  <section xml:id="evio.intro">
   &reftitle.intro;
   <para>
    Los observadores <classname>EvIo</classname> verifican si un descriptor
    de fichero (o un socket, o un flujo que pueda ser convertido en descriptor
    de fichero numérico) está disponible para lectura o escritura en cada
    iteración del bucle de eventos, o, más precisamente, cuando la
    lectura no va a bloquear el proceso, y cuando la escritura va
    a permitir escribir datos. Este comportamiento se denomina
    <emphasis>nivel de activación</emphasis> porque los eventos se
    mantienen mientras persista la condición. Para detener la recepción
    de eventos, simplemente se debe detener el observador.
   </para>
   <para>
    El número de eventos de lectura/escritura de los observadores por
    <parameter>fd</parameter> es ilimitado. Establecer todos los
    descriptores de ficheros en modo no bloqueante es generalmente
    una buena idea (aunque no es obligatorio).
   </para>
   <para>
    Otra cosa a tener en cuenta es que es muy fácil recibir
    notificaciones falsas de sistema listo para lectura, es decir, la función
    de retrollamada puede ser llamada con <constant>Ev::READ</constant>
    pero una subsiguiente <emphasis>read()</emphasis> puede bloquearse
    debido a que no hay datos. Es muy simple
    encontrarse en esta situación. Por lo tanto, se recomienda siempre
    utilizar I/O no bloqueante: una <emphasis>read()</emphasis>
    adicional que devuelva <constant>EAGAIN</constant> (o similar)
    es preferible a un programa que espera la llegada de datos.
   </para>
   <para>
    Si por alguna razón no es posible ejecutar el
    <parameter>fd</parameter> en modo no bloqueante, entonces, por separado,
    se debe volver a verificar si el descriptor de fichero está realmente listo.
    Algunos usuarios utilizan además <constant>SIGALRM</constant>
    y un temporizador de intervalo, solo para asegurarse de que no haya
    bloqueos infinitos.
   </para>
   <para>
    Se recomienda siempre utilizar el modo no bloqueante.
   </para>
  </section>
<!-- }}} -->
  <section xml:id="evio.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass>
     <classname>EvIo</classname>
    </ooclass>
<!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <classname>EvIo</classname>
     </ooclass>
     <ooclass>
      <modifier>extends</modifier>
      <classname>EvWatcher</classname>
     </ooclass>
    </classsynopsisinfo>
<!-- }}} -->
    <classsynopsisinfo role="comment">&Properties;</classsynopsisinfo>
    <fieldsynopsis>
     <modifier>public</modifier>
     <varname linkend="evio.props.fd">fd</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <varname linkend="evio.props.events">events</varname>
    </fieldsynopsis>
    <classsynopsisinfo role="comment">&InheritedProperties;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('evwatcher.synopsis')/descendant::db:fieldsynopsis)" />
    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.evio')/db:refentry/db:refsect1[@role='description']/descendant::db:constructorsynopsis[not(@role='procedural')])"/>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.evio')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[not(@role='procedural')])"/>
    <classsynopsisinfo role="comment">&InheritedMethods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.evwatcher')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[1])" />
   </classsynopsis>
<!-- }}} -->
  </section>
<!-- {{{ EvIo properties -->
  <section xml:id="evio.props">
   &reftitle.properties;
   <variablelist>
    <varlistentry xml:id="evio.props.fd">
     <term>
      <varname>fd</varname>
     </term>
     <listitem>
      <para></para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="evio.props.events">
     <term>
      <varname>events</varname>
     </term>
     <listitem>
      <para></para>
     </listitem>
    </varlistentry>
   </variablelist>
  </section>
<!-- }}} -->
 </partintro>

 &reference.ev.entities.evio;

</reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
