<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 23ea6be076881a34e1d454e9680968ece085f7f6 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="evtimer.construct" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>EvTimer::__construct</refname>
  <refpurpose>Construye un objeto EvTimer watcher</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <constructorsynopsis>
   <modifier>public</modifier>
   <methodname>EvTimer::__construct</methodname>
   <methodparam>
    <type>float</type>
    <parameter>after</parameter>
   </methodparam>
   <methodparam>
    <type>float</type>
    <parameter>repeat</parameter>
   </methodparam>
   <methodparam>
    <type>callable</type>
    <parameter>callback</parameter>
   </methodparam>
   <methodparam
   choice="opt">
    <type>mixed</type>
    <parameter>data</parameter>
    <initializer>&null;</initializer>
   </methodparam>
   <methodparam
   choice="opt">
    <type>int</type>
    <parameter>priority</parameter>
    <initializer>0</initializer>
   </methodparam>
  </constructorsynopsis>
  <para>
   Construye un objeto EvTimer watcher.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term>
     <parameter>after</parameter>
    </term>
    <listitem>
     <para>
      Configura el tiempo para lanzar el trigger después de
      <parameter>after</parameter> segundos.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <parameter>repeat</parameter>
    </term>
    <listitem>
     <para>
      Si este argumento vale <literal>0.0</literal>, entonces el watcher
      se detendrá automáticamente cuando se alcance el tiempo máximo de espera. Si este argumento es positivo, entonces el timer lanzará automáticamente el trigger cada segundo siguiente, hasta que se detenga manualmente.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <parameter>callback</parameter>
    </term>
    <listitem>
     <para>
      Ver las
      <link linkend="ev.watcher-callbacks">funciones de retrollamada Watcher</link>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <parameter>data</parameter>
    </term>
    <listitem>
     <para>
      Datos personalizados asociados con el watcher.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <parameter>priority</parameter>
    </term>
    <listitem>
     <para>
      <link linkend="ev.constants.watcher-pri">Las prioridades del Watcher</link>
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
 <example>
   <title>timers simples</title>
   <programlisting role="php">
<![CDATA[
<?php
// Crea e inicia un timer lanzado después de 2 segundos
$w1 = new EvTimer(2, 0, function () {
    echo "2 segundos pasados\n";
});

// Crea e inicia un timer lanzado después de 2 segundos, y lo repite cada segundo
// hasta que no se detenga manualmente
$w2 = new EvTimer(2, 1, function ($w) {
    echo "es llamado cada segundo, es iniciado después de 2 segundos\n";
    echo "iteración = ", Ev::iteration(), PHP_EOL;

    // Detiene el watcher después de 5 iteraciones
    Ev::iteration() == 5 and $w->stop();
    // Detiene el watcher si llamadas posteriores causan más de 10 iteraciones
    Ev::iteration() >= 10 and $w->stop();
});

// Crea un timer detenido. Estará inactivo hasta que no se inicie manualmente
$w_stopped = EvTimer::createStopped(10, 5, function($w) {
    echo "Función de retrollamada del timer creado detenido\n";

    // Detiene el watcher después de 2 iteraciones
    Ev::iteration() >= 2 and $w->stop();
});

// Bucle mientras Ev::stop() es llamado o mientras todos los watchers no se detienen
Ev::run();

// Inicia y bloquea si está en funcionamiento
$w_stopped->start();
echo "Ejecución de una sola iteración\n";
Ev::run(Ev::RUN_ONCE);

echo "Reinicia el segundo watcher y intenta manejar los mismos eventos, pero no bloquea\n";
$w2->again();
Ev::run(Ev::RUN_NOWAIT);

$w = new EvTimer(10, 0, function() {});
echo "Ejecución de un bucle bloqueante\n";
Ev::run();
echo "FIN\n";
?>
]]>
   </programlisting>
  &example.outputs.similar;
  <screen>
<![CDATA[
2 segundos pasados
es llamado cada segundo, es iniciado después de 2 segundos
iteración = 1
es llamado cada segundo, es iniciado después de 2 segundos
iteración = 2
es llamado cada segundo, es iniciado después de 2 segundos
iteración = 3
es llamado cada segundo, es iniciado después de 2 segundos
iteración = 4
es llamado cada segundo, es iniciado después de 2 segundos
iteración = 5
Ejecución de una sola iteración
Función de retrollamada del timer creado detenido
Reinicia el segundo watcher y intenta manejar los mismos eventos, pero no bloquea
Ejecución de un bucle bloqueante
es llamado cada segundo, es iniciado después de 2 segundos
iteración = 8
es llamado cada segundo, es iniciado después de 2 segundos
iteración = 9
es llamado cada segundo, es iniciado después de 2 segundos
iteración = 10
FIN
]]>
  </screen>
  </example>
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member>
    <methodname>EvTimer::createStopped</methodname>
   </member>
   <member>
    <classname>EvPeriodic</classname>
   </member>
   <member>
    <link xlink:href="&url.ev.timer;">ev_timer - repetición de un tiempo de espera máximo</link>
   </member>
   <member>
    <link xlink:href="&url.ev.timeouts;">Ser inteligente con los tiempos de espera máximo</link>
   </member>
  </simplelist>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
