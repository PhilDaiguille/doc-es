<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 23ea6be076881a34e1d454e9680968ece085f7f6 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<reference xml:id="class.evperiodic" role="class" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">
 <title>La clase EvPeriodic</title>
 <titleabbrev>EvPeriodic</titleabbrev>
 <partintro>
<!-- {{{ EvPeriodic intro -->
  <section xml:id="evperiodic.intro">
   &reftitle.intro;
  <para>
   Los observadores periódicos son una especie de temporizadores, pero son muy
   versátiles.
   </para>
   <para>
    A diferencia de <classname>EvTimer</classname>, los observadores
    <classname>EvPeriodic</classname> no se basan en un tiempo real
    (o un tiempo relativo, el tiempo físico que transcurre), sino en un tiempo
    de reloj (tiempo absoluto, calendario o de reloj). La diferencia es
    que un tiempo de reloj puede ser más rápido o más lento que un tiempo
    real, y los saltos en el tiempo no son raros (por ejemplo, durante un ajuste).
   </para>
   <para>
    Un observador <classname>EvPeriodic</classname> puede ser configurado para
    ser lanzado después de puntos específicos en el tiempo. Por ejemplo,
    si un observador <classname>EvPeriodic</classname> está configurado para
    lanzarse <emphasis>"en 10 segundos"</emphasis> (es decir,
    <methodname>EvLoop::now</methodname> + <literal>10.0</literal>,
    es decir, un tiempo absoluto, y no un retraso), y el reloj del sistema
    se reinicia a <emphasis>enero del año pasado</emphasis>,
    entonces tomará un año o más para lanzar el evento (a diferencia
    de <classname>EvTimer</classname> que se lanzará <literal>10</literal>
    segundos después de su inicio, ya que utiliza un retraso máximo relativo).
   </para>
   <para>
    Al igual que con los temporizadores, se garantiza que la función de retrollamada sea
    llamada únicamente cuando el punto en el tiempo en el que se supone que debe lanzarse
    haya pasado. Si varios temporizadores se vuelven listos al mismo tiempo
    durante la misma iteración del bucle, entonces aquellos con valores de retraso
    máximo más cercanos serán llamados antes que aquellos con valores de retraso
    máximo más lejanos (pero esto ya no es cierto cuando una función de retrollamada
    llama recursivamente al método <methodname>EvLoop::run</methodname>).
   </para>
  </section>
<!-- }}} -->
  <section xml:id="evperiodic.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass>
     <classname>EvPeriodic</classname>
    </ooclass>
<!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <classname>EvPeriodic</classname>
     </ooclass>
     <ooclass>
      <modifier>extends</modifier>
      <classname>EvWatcher</classname>
     </ooclass>
    </classsynopsisinfo>
<!-- }}} -->
    <classsynopsisinfo role="comment">&Properties;</classsynopsisinfo>
    <fieldsynopsis>
     <modifier>public</modifier>
     <varname linkend="evperiodic.props.offset">offset</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <varname linkend="evperiodic.props.interval">interval</varname>
    </fieldsynopsis>
    <classsynopsisinfo role="comment">&InheritedProperties;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('evwatcher.synopsis')/descendant::db:fieldsynopsis)" />
    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.evperiodic')/db:refentry/db:refsect1[@role='description']/descendant::db:constructorsynopsis[not(@role='procedural')])"/>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.evperiodic')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[not(@role='procedural')])"/>
    <classsynopsisinfo role="comment">&InheritedMethods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.evwatcher')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[1])" />
   </classsynopsis>
<!-- }}} -->
  </section>
<!-- {{{ EvPeriodic properties -->
  <section xml:id="evperiodic.props">
   &reftitle.properties;
   <variablelist>
    <varlistentry xml:id="evperiodic.props.offset">
     <term>
      <varname>offset</varname>
     </term>
     <listitem>
      <para>
       Al repetirse, contendrá el valor de la posición, de lo contrario,
       será el punto absoluto en el tiempo (el valor de la posición
       pasado al método <methodname>EvPeriodic::set</methodname>,
       aunque <emphasis>libev</emphasis> puede modificar este valor
       para una mejor estabilidad numérica).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="evperiodic.props.interval">
     <term>
      <varname>interval</varname>
     </term>
     <listitem>
      <para>
       El valor del intervalo actual. Puede ser modificado en cualquier momento,
       pero los cambios no surten efecto hasta que el temporizador
       periódico no se lance, o cuando se llame al método
       <methodname>EvPeriodic::again</methodname>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </section>
<!-- }}} -->
 </partintro>

 &reference.ev.entities.evperiodic;

</reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
