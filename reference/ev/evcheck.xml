<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 23ea6be076881a34e1d454e9680968ece085f7f6 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<reference xml:id="class.evcheck" role="class" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">
 <title>La clase EvCheck</title>
 <titleabbrev>EvCheck</titleabbrev>
 <partintro>
<!-- {{{ EvCheck intro -->
  <section xml:id="evcheck.intro">
   &reftitle.intro;
   <para>
    Los observadores <classname>EvPrepare</classname> y
    <classname>EvCheck</classname> se utilizan habitualmente juntos.
    El observador <classname>EvPrepare</classname> será llamado antes de
    los bloques del proceso, mientras que el observador <classname>EvCheck</classname>
    será llamado después.
   </para>
   <para>
    No está permitido llamar al método <methodname>EvLoop::run</methodname>
    o a un método/función similar que entre en el bucle del evento
    actual desde el observador <classname>EvPrepare</classname>,
    o desde el observador <classname>EvCheck</classname>. Sin embargo,
    esto es posible para todos los demás bucles que no sean el actual.
    La razón es que no es necesario verificar la recursión
    en estos observadores, es decir, la secuencia siguiente será siempre:
    <classname>EvPrepare</classname> -&gt; bloqueo -&gt; <classname>EvCheck</classname>,
    por lo tanto, tener un observador para cada uno no es útil, sabiendo que siempre serán llamados
    juntos al llamar al bloqueo.
   </para>
   <para>
    El propósito principal es integrar otros mecanismos de eventos en
    la biblioteca <emphasis>libev</emphasis>, con un uso avanzado.
    Pueden ser utilizados, por ejemplo, para monitorear los cambios
    de variables, implementar observadores personalizados, integrar net-snmp
    o una biblioteca adicional, y mucho más. También pueden ser útiles para almacenar en caché datos, y querer mostrarlos después
    del bloqueo.
   </para>
   <para>
    Se recomienda proporcionar una prioridad alta a <classname>EvCheck</classname>
    (<constant>Ev::MAXPRI</constant>) para asegurarse de que se ejecutará
    antes que cualquier otro observador en la cola (a diferencia de lo que ocurre con
    el observador <classname>EvPrepare</classname>).
   </para>
   <para>
    Además, los observadores <classname>EvCheck</classname> no deben
    activar/alimentar eventos. Aunque <emphasis>libev</emphasis>
    admite esto, pueden ser ejecutados antes de que los otros observadores
    <classname>EvCheck</classname> terminen sus trabajos.
   </para>
  </section>
<!-- }}} -->
  <section xml:id="evcheck.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass>
     <classname>EvCheck</classname>
    </ooclass>
<!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <classname>EvCheck</classname>
     </ooclass>
     <ooclass>
      <modifier>extends</modifier>
      <classname>EvWatcher</classname>
     </ooclass>
    </classsynopsisinfo>
<!-- }}} -->
<!--<classsynopsisinfo role="comment">&Properties;</classsynopsisinfo>-->
    <classsynopsisinfo role="comment">&InheritedProperties;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('evwatcher.synopsis')/descendant::db:fieldsynopsis)" />
    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.evcheck')/db:refentry/db:refsect1[@role='description']/descendant::db:constructorsynopsis[not(@role='procedural')])"/>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.evcheck')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[not(@role='procedural')])"/>
    <classsynopsisinfo role="comment">&InheritedMethods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.evwatcher')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[1])" />
   </classsynopsis>
<!-- }}} -->
  </section>
 </partintro>

 &reference.ev.entities.evcheck;

</reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
