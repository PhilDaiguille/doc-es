<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 23ea6be076881a34e1d454e9680968ece085f7f6 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="ev.recommendedbackends" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Ev::recommendedBackends</refname>
  <refpurpose>Devuelve una máscara de octetos de backends recomendados
   para la plataforma actual</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>final</modifier>
   <modifier>public</modifier>
   <modifier>static</modifier>
   <type>int</type>
   <methodname>Ev::recommendedBackends</methodname>
   <void />
  </methodsynopsis>
  <para>
   Devuelve un conjunto de todos los backends compilados en este binario de
   <literal>libev</literal>, y también recomendados para esta
   plataforma, lo que significa que deberían funcionar para la
   mayoría de los tipos de descriptor de ficheros. Este conjunto es generalmente
   más pequeño que el devuelto por la función
   <function>ev_supported_backends</function>, sabiendo que, por ejemplo,
   <literal>kqueue</literal> está roto en los sistemas <literal>BSD</literal>
   y no será auto-detectado hasta que no sea requerido explícitamente.
   Es el conjunto de backends que <literal>libev</literal> utilizará
   cuando ninguno sea solicitado explícitamente.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  &no.function.parameters;
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve una máscara de octetos que contiene los
   <link
  linkend="ev.constants.watcher-backends">flags de backends</link>
   combinados utilizando el operador <emphasis>OR</emphasis>.
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
 <example>
   <title>Encapsula un bucle en otro</title>
   <programlisting role="php">
<![CDATA[
<?php
/*
* Intenta recuperar un bucle de evento interno, y encapsularlo en
* el bucle de evento por defecto.
* Si es posible, se utiliza el bucle por defecto.
* El bucle por defecto se almacena en $loop_hi, mientras que el bucle interno
* se almacena en $loop_lo (que es $loop_hi en este caso ya que ningún bucle interno
* puede ser utilizado).
*
* Ejemplo de:
* http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod#Examples_CONTENT-9
*/
$loop_hi = EvLoop::defaultLoop();
$loop_lo = NULL;
$embed   = NULL;

/*
* Mira si hay posibilidad de recuperar uno que funcione
* (el valor del flag a 0 significa auto-detección)
*/
$loop_lo = Ev::embeddableBackends() & Ev::recommendedBackends()
 ? new EvLoop(Ev::embeddableBackends() & Ev::recommendedBackends())
 : 0;

if ($loop_lo) {
 $embed = new EvEmbed($loop_lo, function () {});
} else {
 $loop_lo = $loop_hi;
}
?>
]]>
   </programlisting>
  </example>
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member>
    <classname>EvEmbed</classname>
   </member>
   <member>
    <methodname>Ev::embeddableBackends</methodname>
   </member>
   <member>
    <methodname>Ev::supportedBackends</methodname>
   </member>
   <member>
    <link linkend="ev.constants.watcher-backends">Los flags de Backend</link>
   </member>
   <member>
    <link linkend="ev.examples">Los ejemplos</link>
   </member>
  </simplelist>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
