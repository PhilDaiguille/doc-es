<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 88c8421cbef98b73ac59f58cc60d317c4861fd89 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="ev.supportedbackends" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Ev::supportedBackends</refname>
  <refpurpose>Devuelve el conjunto de backends soportados por la configuración actual de libev</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>final</modifier>
   <modifier>public</modifier>
   <modifier>static</modifier>
   <type>int</type>
   <methodname>Ev::supportedBackends</methodname>
   <void />
  </methodsynopsis>
  <para>
   Devuelve el conjunto de backends soportados por la configuración actual de libev.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  &no.function.parameters;
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve una máscara de bits que puede contener los
   <link
   linkend="ev.constants.watcher-backends">flags de backend</link>
   combinados utilizando el operador <emphasis>OR</emphasis>.
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Bucle integrado creado con el backend kqueue en el bucle por defecto</title>
  <programlisting role="php">
<![CDATA[
<?php
/*
* Verifica si kqueue está disponible (pero no recomendado) y crea un backend kqueue
* para usarlo con sockets (lo cual funciona con cualquier implementación
* kqueue).
* Almacena el bucle de eventos kqueue (utilizable únicamente a través de sockets)
* en loop_socket. (uso opcional de EVFLAG_NOENV)
*
* Ejemplo tomado de la siguiente URL:
* http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod#Examples_CONTENT-9
*/
$loop        = EvLoop::defaultLoop();
$socket_loop = NULL;
$embed       = NULL;

if (Ev::supportedBackends() & ~Ev::recommendedBackends() & Ev::BACKEND_KQUEUE) {
 if (($socket_loop = new EvLoop(Ev::BACKEND_KQUEUE))) {
  $embed = new EvEmbed($loop);
 }
}

if (!$socket_loop) {
 $socket_loop = $loop;
}

// Ahora, uso de $socket_loop para todos los sockets y $loop para todo lo demás
?>
]]>
  </programlisting>
  </example>
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member>
    <classname>EvEmbed</classname>
   </member>
   <member>
    <methodname>Ev::recommendedBackends</methodname>
   </member>
   <member>
    <methodname>Ev::embeddableBackends</methodname>
   </member>
   <member>
    <link linkend="ev.constants.watcher-backends">Los flags de backend</link>
   </member>
   <member>
    <link linkend="ev.examples">Los ejemplos</link>
   </member>
  </simplelist>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
