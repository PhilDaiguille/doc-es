<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 12ff796708d2460fed5a241950e667ea938d07e7 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="quickhashintset.construct" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>QuickHashIntSet::__construct</refname>
  <refpurpose>Crear un nuevo objeto QuickHashIntSet</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <methodname>QuickHashIntSet::__construct</methodname>
   <methodparam><type>int</type><parameter>size</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>options</parameter></methodparam>
  </methodsynopsis>
  <para>
   Este constructor crea un nuevo <classname>QuickHashIntSet</classname>. El tamaño es el número de
   listas de cubos a crear. Cuantas más listas haya, menos colisiones habrá.
   Las opciones también son soportadas.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>size</parameter></term>
     <listitem>
      <para>
       La cantidad de listas de cubos a configurar. El número que se pasa será
       automáticamente redondeado a la siguiente potencia de dos. También se limita
       automáticamente de <literal>4</literal> a <literal>4194304</literal>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>options</parameter></term>
     <listitem>
      <para>
       Las opciones que se pueden pasar son: <constant>QuickHashIntSet::CHECK_FOR_DUPES</constant>,
       que asegura que ninguna entrada duplicada sea añadida al conjunto;
       <constant>QuickHashIntSet::DO_NOT_USE_ZEND_ALLOC</constant> para no utilizar el gestor de memoria
       interno de PHP así como una de las <constant>QuickHashIntSet::HASHER_NO_HASH</constant>,
       <constant>QuickHashIntSet::HASHER_JENKINS1</constant> o <constant>QuickHashIntSet::HASHER_JENKINS2</constant>.
       Estas tres últimas configuran el algoritmo de hash a utilizar. Todas las opciones
       pueden ser combinadas utilizando máscaras de bits.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve un nuevo objeto <classname>QuickHashIntSet</classname>.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo de <function>QuickHashIntSet::__construct</function></title>
    <programlisting role="php">
<![CDATA[
<?php
var_dump( new QuickHashIntSet( 1024 ) );
var_dump( new QuickHashIntSet( 1024, QuickHashIntSet::CHECK_FOR_DUPES ) );
var_dump(
    new QuickHashIntSet(
        1024,
        QuickHashIntSet::DO_NOT_USE_ZEND_ALLOC | QuickHashIntSet::HASHER_JENKINS2
    )
);
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
