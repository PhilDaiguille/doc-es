<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 62a954a6ff9d6d0fc815befe14413e5baba37c88 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes -->
<refentry xml:id="function.zookeeper-dispatch" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>zookeeper_dispatch</refname>
  <refpurpose>Llama a las funciones de devolución de llamada para las operaciones pendientes</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>void</type><methodname>zookeeper_dispatch</methodname>
   <void/>
  </methodsynopsis>

  <para>
   La función <function>zookeeper_dispatch</function> llama a las funciones de devolución de llamada pasadas por las operaciones como <methodname>Zookeeper::get</methodname> o <methodname>Zookeeper::exists</methodname>.
  </para>

  <caution>
   <para>
    Desde la versión 0.4.0, esta función debe ser llamada manualmente para realizar operaciones asíncronas. Si desea que esto se haga automáticamente, también puede declarar ticks al inicio de su programa.
   </para>
  </caution>

  <para>
   Después de PHP 7.1, puede ignorar esta función. Esta extensión usa EG(vm_interrupt) para implementar la distribución asíncrona.
  </para>

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  &no.function.parameters;
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.void;
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Este método emite una alerta PHP cuando la función de devolución de llamada no puede ser invocada.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example xml:id="function.zookeeper-dispatch.example.1">
   <title>Ejemplo de <methodname>zookeeper_dispatch</methodname> #1</title>
   <para>
     Distribuir manualmente las funciones de devolución de llamada.
   </para>
   <programlisting role="php">
<![CDATA[
<?php
$client = new Zookeeper();
$client->connect('localhost:2181');
$client->get('/zookeeper', function() {
    echo "Callback was called".PHP_EOL;
});
while(true) {
    sleep(1);
    zookeeper_dispatch();
}
?>
]]>
   </programlisting>
  </example>

  <example xml:id="function.zookeeper-dispatch.example.2">
   <title>Ejemplo de <methodname>zookeeper_dispatch</methodname> #2</title>
   <para>
     Declarar ticks.
   </para>
   <programlisting role="php">
<![CDATA[
<?php
declare(ticks=1);

$client = new Zookeeper();
$client->connect('localhost:2181');
$client->get('/zookeeper', function() {
    echo "Callback was called".PHP_EOL;
});
while(true) {
    sleep(1);
}
?>
]]>
   </programlisting>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>Zookeeper::addAuth</methodname></member>
    <member><methodname>Zookeeper::connect</methodname></member>
    <member><methodname>Zookeeper::__construct</methodname></member>
    <member><methodname>Zookeeper::exists</methodname></member>
    <member><methodname>Zookeeper::get</methodname></member>
    <member><methodname>Zookeeper::getChildren</methodname></member>
    <member><methodname>Zookeeper::setWatcher</methodname></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
