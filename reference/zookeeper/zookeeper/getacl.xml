<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 09965ec0c7ced02607bfcca1525ffe856122e7bb Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes -->
<refentry xml:id="zookeeper.getacl" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Zookeeper::getAcl</refname>
  <refpurpose>Devuelve las ACL asociadas a un nodo de forma sincrónica</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="oop">
   <modifier>public</modifier>
   <type>array</type><methodname>Zookeeper::getAcl</methodname>
   <methodparam><type>string</type><parameter>path</parameter></methodparam>
  </methodsynopsis>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>path</parameter></term>
    <listitem>
     <para>
      El nombre del nodo. Expresado como un nombre de archivo con barras separando los ancestros del nodo.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve un array de ACLs en caso de éxito y false en caso de fallo.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Este método emite un error/advertencia de PHP si el número de parámetros o los tipos son incorrectos
   o si no se han podido recuperar las ACL del nodo.
  </para>
  <caution>
    <para>
      Desde la versión 0.3.0, este método lanza <classname>ZookeeperException</classname> y sus derivados.
    </para>
  </caution>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example xml:id="zookeeper.getacl.example.basic">
   <title>Ejemplo de <methodname>Zookeeper::getAcl</methodname></title>
   <para>
     Devuelve las ACL de un nodo.
   </para>
   <programlisting role="php">
<![CDATA[
<?php
$zookeeper = new Zookeeper('locahost:2181');
$aclArray = array(
  array(
    'perms'  => Zookeeper::PERM_ALL,
    'scheme' => 'world',
    'id'     => 'anyone',
  )
);
$path = '/path/to/newnode';
$zookeeper->setAcl($path, $aclArray);

$r = $zookeeper->getAcl($path);
if ($r)
  var_dump($r);
else
  echo 'ERR';
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
array(1) {
  [0]=>
  array(3) {
    ["perms"]=>
    int(31)
    ["scheme"]=>
    string(5) "world"
    ["id"]=>
    string(6) "anyone"
  }
}
]]>
   </screen>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><methodname>Zookeeper::create</methodname></member>
   <member><methodname>Zookeeper::setAcl</methodname></member>
   <member><link linkend="zookeeper.constants.perms">Permisos de ZooKeeper</link></member>
   <member><classname>ZookeeperException</classname></member>
  </simplelist>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
