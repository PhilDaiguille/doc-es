<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 4d17b7b4947e7819ff5036715dd706be87ae4def Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<reference xml:id="class.parallel-runtime" role="class" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">
 <title>La clase parallel\Runtime</title>
 <titleabbrev>parallel\Runtime</titleabbrev>

 <partintro>

  <section>
    <title>Objetos de ejecución</title>
    <para>
     Cada ejecución representa un solo thread PHP, el thread es creado (e inicializado) durante la construcción.
     El thread espera luego a que se programen tareas: las tareas programadas serán ejecutadas FIFO y luego el thread volverá
     a esperar hasta que se programen otras tareas, o hasta que sea cerrado, eliminado o destruido por las reglas de ámbito normales de los objetos PHP.
    </para>
    <warning>
     <para>
      Cuando una ejecución es destruida por las reglas de ámbito normales de los objetos PHP, primero ejecutará todas las tareas que han sido programadas,
      y bloqueará durante este tiempo.
     </para>
    </warning>
  </section>

  <section>
    <title>Amortiguación de ejecución</title>
    <para>
     Cuando se crea una nueva ejecución, no comparte código con el thread (o el proceso) que la creó. Esto significa que no tiene las mismas
     clases y funciones cargadas, ni el mismo cargador automático definido. En algunos casos, una ejecución muy ligera es deseable porque las tareas que
     serán programadas no necesitan acceder al código del thread padre. En los casos en que las tareas necesitan acceder al mismo código, basta con definir
     un cargador automático como amortiguación.
    </para>
    <note>
     <para>
      La precarga puede ser utilizada en conjunción con parallel, en este caso el código precargado está disponible sin amortiguación.
     </para>
    </note>
  </section>

  <section xml:id="parallel-runtime.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass><classname>parallel\Runtime</classname></ooclass>

<!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <modifier>final</modifier>
      <classname>parallel\Runtime</classname>
     </ooclass>
    </classsynopsisinfo>
<!-- }}} -->

    <classsynopsisinfo role="comment">Crear</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.parallel-runtime')/db:refentry/db:refsect1[@audience='create']/descendant::db:constructorsynopsis[not(@role='procedural')])">
     <xi:fallback />
    </xi:include>

    <classsynopsisinfo role="comment">Ejecutar</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.parallel-runtime')/db:refentry/db:refsect1[@audience='execute']/descendant::db:methodsynopsis[not(@role='procedural')])">
     <xi:fallback />
    </xi:include>

    <classsynopsisinfo role="comment">Unir</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.parallel-runtime')/db:refentry/db:refsect1[@audience='join']/descendant::db:methodsynopsis[not(@role='procedural')])">
     <xi:fallback />
    </xi:include>
   </classsynopsis>
<!-- }}} -->

  </section>

 </partintro>

 &reference.parallel.parallel.runtime.construct;
 &reference.parallel.parallel.runtime.run;
 &reference.parallel.parallel.runtime.close;
 &reference.parallel.parallel.runtime.kill;

</reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
