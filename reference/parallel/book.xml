<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: bbfa9738785f054752e6cb565cd0a58e71015bc6 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<book xml:id="book.parallel" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">
 <?phpdoc extension-membership="pecl" ?>
 <title>parallel</title>
 <titleabbrev>parallel</titleabbrev>

 <preface xml:id="intro.parallel">
  &reftitle.intro;
  <para>
  parallel es una extensión de concurrencia paralela para PHP ≥ 7.2.0.
  A partir de parallel 1.2.0, PHP ≥ 8.0.0 es requerido.
  </para>
  <para>
   A continuación se presenta una breve descripción de los conceptos básicos de parallel, se puede encontrar información más detallada en esta sección del manual.
  </para>
  <simplesect>
   <title>Ejecución</title>
   <para>
    Un <classname>parallel\Runtime</classname> representa un hilo de intérprete PHP. Un <classname>parallel\Runtime</classname> se configura con un fichero de arranque opcional pasado a <methodname>parallel\Runtime::__construct</methodname>, generalmente un cargador automático,
    o alguna otra rutina de precarga: el fichero de arranque será incluido antes de la ejecución de cualquier tarea.
   </para>
   <para>
    Después de la construcción, el <classname>parallel\Runtime</classname> permanece disponible hasta que se cierre, se mate, o se destruya por las reglas de ámbito normales de los objetos PHP.
    <methodname>parallel\Runtime::run</methodname> permite al desarrollador programar tareas para una ejecución paralela.
    Un <classname>parallel\Runtime</classname> tiene un orden de programación FIFO, las tareas se ejecutarán en el orden en que se programen.
   </para>
  </simplesect>
  <simplesect>
   <title>API Funcional</title>
   <para>
    Parallel implementa una API funcional, de alto nivel sobre <classname>parallel\Runtime</classname> que proporciona un único punto de entrada para ejecutar código paralelo
    con una programación automática: <function>parallel\run</function>.
   </para>
  </simplesect>
  <simplesect>
   <title>Tareas</title>
   <para>
    Una tarea (Task) es simplemente una <classname>Closure</classname> destinada a una ejecución paralela. La <classname>Closure</classname> puede contener casi cualquier instrucción, incluyendo cierres anidados.
    Sin embargo, algunas instrucciones están prohibidas en las tareas:
    <itemizedlist>
     <listitem>
     <para>yield</para>
     </listitem>
     <listitem>
     <para>use by-reference</para>
     </listitem>
     <listitem>
     <para>declare class</para>
     </listitem>
     <listitem>
     <para>declare named function</para>
     </listitem>
    </itemizedlist>
   </para>
   <note>
    <para>
     Los cierres anidados pueden usar yield o use by-reference, pero no deben contener declaraciones de clase o funciones nombradas.
    </para>
   </note>
   <note>
    <para>
     Ninguna instrucción está prohibida en los ficheros que la tarea puede incluir.
    </para>
   </note>
  </simplesect>
  <simplesect>
   <title>Future</title>
   <para>
    El <classname>parallel\Future</classname> se utiliza para acceder al valor de retorno de la tarea, y expone una API para la cancelación de la tarea.
   </para>
  </simplesect>
  <simplesect>
   <title>Canales</title>
   <para>
    Una tarea puede ser programada con argumentos, usar variables de ámbito léxico (por valor), y devolver un valor (a través de un <classname>parallel\Future</classname>), pero estos solo permiten la comunicación unidireccional:
    Permiten al desarrollador enviar datos a una tarea y recuperar datos de una tarea, pero no permiten la comunicación bidireccional entre las tareas. La API <classname>parallel\Channel</classname> permite la comunicación bidireccional entre las tareas, un <classname>parallel\Channel</classname> es un enlace de tipo socket entre las tareas que el desarrollador puede usar para enviar y recibir datos.
   </para>
  </simplesect>
  <simplesect>
   <title>Eventos</title>
   <para>
    La API <classname>parallel\Events</classname> implementa un bucle de eventos (<classname>Traversable</classname>) nativo, y el método <methodname>parallel\Events::poll</methodname>.
    Esto permite al desarrollador trabajar con conjuntos de canales y/o futuros.
    El desarrollador simplemente añade canales y futuros al bucle de eventos, definiendo opcionalmente la entrada para las escrituras con <methodname>parallel\Events::setInput</methodname>,
    y entra en un bucle foreach: parallel leerá y escribirá en los objetos a medida que se vuelvan disponibles, devolviendo objetos <classname>parallel\Events\Event</classname>
    describiendo las operaciones que han ocurrido.
   </para>
  </simplesect>
   <simplesect role="seealso">
   &reftitle.seealso;
   <simplelist>
    <member><xref linkend="philosophy.parallel" /></member>
   </simplelist>
  </simplesect>
 </preface>

 &reference.parallel.setup;
 &reference.parallel.philosophy;
 &reference.parallel.functional;
 &reference.parallel.parallel.runtime;
 &reference.parallel.parallel.future;
 &reference.parallel.parallel.channel;
 &reference.parallel.parallel.events;
 &reference.parallel.parallel.events.input;
 &reference.parallel.parallel.events.event;
 &reference.parallel.parallel.events.event.type;

 &reference.parallel.parallel.sync;
 <!--&reference.parallel.examples;-->

</book>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
