<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 3f3362ebcdd1a27cf9c9c751dd5cbe8a6264d1c3 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.simdjson-decode" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>simdjson_decode</refname>
  <refpurpose>Decodifica una cadena JSON</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>simdjson_decode</methodname>
   <methodparam><type>string</type><parameter>json</parameter></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>associative</parameter><initializer>&false;</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>depth</parameter><initializer>512</initializer></methodparam>
  </methodsynopsis>
  <para>
   Toma una cadena codificada en JSON y la convierte en un valor PHP.
   Esto utiliza una Instrucción Simultánea más Rápida, Datos Múltiples (Simultaneous Instruction, Multiple Data - SIMD)
   que <function>json_decode</function> cuando es soportada por la arquitectura del ordenador.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>json</parameter></term>
    <listitem>
     <para>
      El <type>string</type> <parameter>json</parameter> a decodificar.
     </para>
     <para>
      Esta función solo funciona con cadenas codificadas en UTF-8.
     </para>
     <para>
      Esta función analiza las entradas válidas que
      <function>json_decode</function> puede decodificar,
      siempre que sean inferiores a 4 Go de longitud.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>associative</parameter></term>
    <listitem>
     <para>
      Cuando &true;, los objetos JSON serán devueltos como
      &array; asociativos; cuando sean &false;, los objetos JSON serán devueltos como &object;s.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>depth</parameter></term>
    <listitem>
     <para>
      La profundidad máxima de la estructura a decodificar.
      El valor debe ser superior a <literal>0</literal>,
      e inferior o igual a <literal>2147483647</literal>.

      Aquellos que llamen a esta función deberían utilizar valores razonablemente pequeños,
      ya que profundidades mayores requieren más espacio de búfer y aumentarán
      la profundidad de recursión, a diferencia de la implementación actual de <function>json_decode</function>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve el valor codificado en <parameter>json</parameter> en el
   tipo PHP apropiado. Los valores <literal>true</literal>, <literal>false</literal> y
   <literal>null</literal> son devueltos respectivamente como &true;, &false; y &null;.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Si <parameter>json</parameter> es inválido, una <classname>SimdJsonException</classname> es lanzada a partir de PECL simdjson 2.1.0,
   mientras que anteriormente, una <classname>RuntimeException</classname> era lanzada.
  </para>
  <para>
   Si <parameter>depth</parameter> está fuera del rango permitido,
   una <classname>SimdJsonValueError</classname> es lanzada a partir de PECL simdjson 3.0.0,
   mientras que anteriormente, un error de nivel <constant>E_WARNING</constant> era lanzado.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplos de <function>simdjson_decode</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$json = '{"a":1,"b":2,"c":3}';

var_dump(simdjson_decode($json));
var_dump(simdjson_decode($json, true));

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
object(stdClass)#1 (3) {
  ["a"]=>
  int(1)
  ["b"]=>
  int(2)
  ["c"]=>
  int(3)
}
array(3) {
  ["a"]=>
  int(1)
  ["b"]=>
  int(2)
  ["c"]=>
  int(3)
}
]]>
    </screen>
   </example>
   <example>
    <title>Acceder a propiedades de objeto no válidas</title>
    <simpara>
     Acceder a elementos en un objeto que contienen caracteres no
     permitidos por la convención de nomenclatura de PHP (por ejemplo, el guion) puede ser
     logrado encapsulando el nombre del elemento entre llaves y comillas.
    </simpara>
    <programlisting role="php">
<![CDATA[
<?php

$json = '{"foo-bar": 12345}';

$obj = simdjson_decode($json);
print $obj->{'foo-bar'}; // 12345

?>
]]>
    </programlisting>
   </example>
   <example>
    <title>Errores comunes al usar <function>simdjson_decode</function></title>
    <programlisting role="php">
<![CDATA[
<?php

// las siguientes cadenas son válidas en JavaScript pero no en JSON

// el nombre y el valor deben estar encerrados entre comillas dobles
// las comillas simples no son válidas
$bad_json = "{ 'bar': 'baz' }";
simdjson_decode($bad_json); // Lanza SimdJsonException

// el nombre debe estar encerrado entre comillas dobles
$bad_json = '{ bar: "baz" }';
simdjson_decode($bad_json); // Lanza SimdJsonException

// las comas finales no están permitidas
$bad_json = '{ bar: "baz", }';
simdjson_decode($bad_json); // Lanza SimdJsonException

?>
]]>
    </programlisting>
   </example>
   <example>
    <title>Errores de <parameter>depth</parameter></title>
    <programlisting role="php">
<![CDATA[
<?php
// Codificar datos con una profundidad máxima de 4
// (array -> array -> array -> string)
$json = json_encode(
    [
        1 => [
            'English' => [
                'One',
                'January'
            ],
            'French' => [
                'Une',
                'Janvier'
            ]
        ]
    ]
);

// Mostrar errores para diferentes profundidades.
var_dump(simdjson_decode($json, true, 4));
try {
    var_dump(simdjson_decode($json, true, 3));
} catch (SimdJsonException $e) {
     echo "Capturado: ", $e->getMessage(), "\n";
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(1) {
  [1]=>
  array(2) {
    ["English"]=>
    array(2) {
      [0]=>
      string(3) "One"
      [1]=>
      string(7) "January"
    }
    ["French"]=>
    array(2) {
      [0]=>
      string(3) "Une"
      [1]=>
      string(7) "Janvier"
    }
  }
}
Capturado: El documento JSON era demasiado profundo (demasiados objetos y arrays anidados)
]]>
    </screen>
   </example>
   <example>
    <title><function>simdjson_decode</function> de grandes enteros</title>
    <programlisting role="php">
<![CDATA[
<?php
$json = '{"number": 12345678901234567890}';

var_dump(simdjson_decode($json));

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
object(stdClass)#1 (1) {
  ["number"]=>
  float(1.2345678901235E+19)
}
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    La especificación JSON no es JavaScript, sino un subconjunto de JavaScript.
   </para>
  </note>
  <note>
   <para>
    En el caso de que la decodificación falle,
    una <classname>SimdJsonException</classname> es lanzada
    y <methodname>SimdJsonException::getCode</methodname> y
    <methodname>SimdJsonException::getMessage</methodname> pueden ser utilizados
    para determinar la naturaleza exacta del error.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>json_encode</function></member>
    <member><function>json_decode</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
