<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: cf2b279980fc54b7f2602a0687652c170a906930 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.simdjson-is-valid" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>simdjson_is_valid</refname>
  <refpurpose>Verifica si un string JSON es válido</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>simdjson_is_valid</methodname>
   <methodparam><type>string</type><parameter>json</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>depth</parameter><initializer>512</initializer></methodparam>
  </methodsynopsis>
  <para>
   Toma un string codificado en JSON y devuelve true si es válido.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>json</parameter></term>
    <listitem>
      <para>
       El <type>string</type> <parameter>json</parameter> a validar.
      </para>
      <para>
       Esta función solo funciona con strings codificados en UTF-8.
      </para>
      <para>
       Esta función valida las entradas que
       <function>json_decode</function> puede decodificar,
       siempre que sean inferiores a 4 Go de longitud.
      </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>depth</parameter></term>
    <listitem>
     <para>
      La profundidad máxima de la estructura a decodificar.
      El valor debe ser superior a <literal>0</literal>,
      e inferior o igual a <literal>2147483647</literal>.

      Quienes llamen a esta función deberían utilizar valores razonablemente pequeños,
      ya que profundidades mayores requieren más espacio de búfer y aumentarán
      la profundidad de recursión, a diferencia de la implementación actual de <function>json_decode</function>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve &true; si <parameter>json</parameter> es un string JSON
   válido, de lo contrario &false;.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Si <parameter>json</parameter> es inválido, se lanza una <classname>SimdJsonException</classname> a partir de PECL simdjson 2.1.0,
   mientras que anteriormente se lanzaba una <classname>RuntimeException</classname>.
  </para>
  <para>
   Si <parameter>depth</parameter> está fuera del rango permitido,
   se lanza una <classname>SimdJsonValueError</classname> a partir de PECL simdjson 3.0.0,
   mientras que anteriormente se lanzaba un error de nivel <constant>E_WARNING</constant>.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplos de <function>simdjson_decode</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$json = '{"a":1,"b":2,"c":3}';
$invalidJson = '{"a":1,"b":2,"c":';

var_dump(simdjson_is_valid($json));
var_dump(simdjson_is_valid($invalidJson));

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
bool(true)
bool(false)
]]>
    </screen>
   </example>
   <example>
    <title>Errores de <parameter>depth</parameter></title>
    <programlisting role="php">
<![CDATA[
<?php
// Codificar datos con una profundidad máxima de 4
// (array -> array -> array -> string)
$json = json_encode(
    [
        1 => [
            'English' => [
                'One',
                'January'
            ],
            'French' => [
                'Une',
                'Janvier'
            ]
        ]
    ]
);

// Mostrar errores para diferentes profundidades.
var_dump(simdjson_is_valid($json, 4));
var_dump(simdjson_is_valid($json, 3));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
bool(true)
bool(false)
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    La especificación JSON no es JavaScript, sino un subconjunto de JavaScript.
   </para>
  </note>
  <note>
   <para>
    En caso de que la decodificación falle,
    se lanza una <classname>SimdJsonException</classname>
    y <methodname>SimdJsonException::getCode</methodname> y
    <methodname>SimdJsonException::getMessage</methodname> pueden ser utilizados
    para determinar la naturaleza exacta del error.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>json_encode</function></member>
    <member><function>json_decode</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
