<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: e9366ee458b2900c53a503b1ad97664e1d9a8859 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no Maintainer: Marqitos-->
<refentry xml:id="function.apcu-entry" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>apcu_entry</refname>
  <refpurpose>
   Recupera de manera atómica o genera una entrada de caché
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>apcu_entry</methodname>
   <methodparam><type>string</type><parameter>key</parameter></methodparam>
   <methodparam><type>callable</type><parameter>generator</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>ttl</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>
  <para>
   Intenta recuperar de manera atómica el valor indexado por la clave <parameter>key</parameter>
   en la caché. Si no puede ser recuperado, la función pasada a
   <parameter>generator</parameter> es llamada, con el único argumento de la clave
   contenida en <parameter>key</parameter>. El valor de retorno de la llamada es
   luego almacenado en caché con el parámetro opcional <parameter>ttl</parameter>,
   y luego devuelve el control.
  </para>
  <note>
   <simpara>
    Cuando el control entra en <function>apcu_entry</function>, el bloqueo de la caché es
    adquirido de manera exclusiva. Es liberado cuando el control sale de
    <function>apcu_entry</function>: Más específicamente, el cuerpo de la función pasada a
    <parameter>generator</parameter> se convierte en una sección crítica, lo que impide que
    dos procesos ejecuten la misma parte del código de manera concurrente. Además, impide
    la ejecución concurrente de cualquier otra función APCu, ya que adquirirá el mismo bloqueo.
   </simpara>
  </note>
  <warning>
   <simpara>
     La única función que puede ser llamada de manera segura por <parameter>generator</parameter>
     es <function>apcu_entry</function>.
   </simpara>
  </warning>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>key</parameter></term>
     <listitem>
      <para>
       Clave de una entrada de caché.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>generator</parameter></term>
     <listitem>
      <para>
       Un parámetro de tipo callable que toma <parameter>key</parameter> como único argumento
       y devuelve el valor a almacenar en caché.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>ttl</parameter></term>
     <listitem>
      <para>
       Duración de vida; almacena la variable <parameter>var</parameter> en la caché por
       una duración de <parameter>ttl</parameter> segundos. Después de la expiración de
       <parameter>ttl</parameter>, la variable almacenada será retirada de la caché (en la
       próxima solicitud). Si no se pasa ningún valor al parámetro
       <parameter>ttl</parameter> (o si el valor de <parameter>ttl</parameter> es
       <literal>0</literal>), la variable persistirá hasta que sea retirada
       manualmente de la caché, o, de lo contrario, fallará al salir de la caché (durante un
       borrado, reinicio, etc.).
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve el valor almacenado en caché.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Un ejemplo con <function>apcu_entry</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$config = apcu_entry("config", function($key) {
 return [
   "fruit" => apcu_entry("config.fruit", function($key){
     return [
       "apples",
       "pears"
     ];
   }),
   "people" => apcu_entry("config.people", function($key){
     return [
      "bob",
      "joe",
      "niki"
     ];
   })
 ];
});

var_dump($config);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(2) {
  ["fruit"]=>
  array(2) {
    [0]=>
    string(6) "apples"
    [1]=>
    string(5) "pears"
  }
  ["people"]=>
  array(3) {
    [0]=>
    string(3) "bob"
    [1]=>
    string(3) "joe"
    [2]=>
    string(4) "niki"
  }
}
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>apcu_store</function></member>
    <member><function>apcu_fetch</function></member>
    <member><function>apcu_delete</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
