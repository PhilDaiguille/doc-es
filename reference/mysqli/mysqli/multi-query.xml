<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: d470f625f96a83d65464619297cccad7ce46e743 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="mysqli.multi-query" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>mysqli::multi_query</refname>
  <refname>mysqli_multi_query</refname>
  <refpurpose>Ejecuta una o varias consultas en la base de datos</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <para>&style.oop;</para>
  <methodsynopsis role="mysqli">
   <modifier>public</modifier> <type>bool</type><methodname>mysqli::multi_query</methodname>
   <methodparam><type>string</type><parameter>query</parameter></methodparam>
  </methodsynopsis>
  <para>&style.procedural;</para>
  <methodsynopsis>
   <type>bool</type><methodname>mysqli_multi_query</methodname>
   <methodparam><type>mysqli</type><parameter>mysql</parameter></methodparam>
   <methodparam><type>string</type><parameter>query</parameter></methodparam>
  </methodsynopsis>
  <para>
   Ejecuta una o varias consultas, agrupadas en el parámetro
   <parameter>query</parameter> mediante puntos y comas.
  </para>
  &mysqli.sqlinjection.warning;
  <para>
   Las consultas se envían de manera asíncrona en una sola llamada a la
   base de datos, pero la base de datos las procesa de manera secuencial.
   <methodname>mysqli_multi_query</methodname> espera a que la primera consulta
   se complete antes de devolver el control a PHP. El servidor MySQL procesará
   entonces la siguiente consulta en la secuencia. Una vez que el resultado esté listo,
   MySQL esperará a la siguiente ejecución de
   <function>mysqli_next_result</function> desde PHP.
  </para>
  <para>
   Se recomienda utilizar una
   <link linkend="control-structures.do.while">do-while</link> para procesar
   varias consultas. La conexión estará ocupada hasta que todas las
   consultas se completen y sus resultados sean recuperados por PHP.
   Ninguna otra consulta puede ser emitida en la misma conexión, hasta que
   todas las consultas sean procesadas.
   Para procesar la siguiente consulta en la secuencia, utilizar
   <function>mysqli_next_result</function>. Si el siguiente resultado no está
   aún listo, mysqli esperará la respuesta desde el servidor MySQL.
   Para verificar si hay más resultados, utilizar
   <function>mysqli_more_results</function>.
  </para>
  <para>
   Para las consultas que producen un conjunto de resultados, como
   <literal>SELECT, SHOW, DESCRIBE</literal> o
   <literal>EXPLAIN</literal>,
   <function>mysqli_use_result</function> o <function>mysqli_store_result</function>
   pueden ser utilizados para recuperar el conjunto de resultados. Para las consultas que
   no producen un conjunto de resultados, las mismas funciones pueden ser
   utilizadas para recuperar información como el número de filas afectadas.
  </para>
  <tip>
   <para>
    Ejecutar una consulta <literal>CALL</literal> para procedimientos almacenados
    puede producir varios conjuntos de resultados. Si el procedimiento almacenado contiene
    consultas <literal>SELECT</literal>, los conjuntos de resultados son devueltos
    en el orden en que son producidos por la ejecución del procedimiento.
    En general, el llamador no puede saber cuántos conjuntos de resultados devolverá un
    procedimiento y debe estar preparado para recuperar varios resultados.
    El resultado final del procedimiento es un resultado de estado que no incluye
    un conjunto de resultados. El estado indica si el procedimiento tuvo éxito
    o si se produjo un error.
   </para>
  </tip>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    &mysqli.link.description;
    <varlistentry>
     <term><parameter>query</parameter></term>
     <listitem>
      <para>
       Una &string; que contiene las consultas a ejecutar.
       Varias consultas deben estar separadas por un punto y coma.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve &false; únicamente si la primera consulta falla. Para recuperar
   las subsecuencias de errores provenientes de otras consultas, se debe llamar
   primero a la función <function>mysqli_next_result</function>.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  &mysqli.conditionalexception;
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Ejemplo con <methodname>mysqli::multi_query</methodname></title>
   <para>&style.oop;</para>
   <programlisting role="php">
<![CDATA[
<?php
mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);
$mysqli = new mysqli("localhost", "my_user", "my_password", "world");

$query = "SELECT CURRENT_USER();";
$query .= "SELECT Name FROM City ORDER BY ID LIMIT 20, 5";

/* Ejecución de una consulta múltiple */
$mysqli->multi_query($query);
do {
    /* Almacenar el conjunto de resultados en PHP */
    if ($result = $mysqli->store_result()) {
        while ($row = $result->fetch_row()) {
            printf("%s\n", $row[0]);
        }
    }
    /* Imprimir divisor */
    if ($mysqli->more_results()) {
        printf("-----------------\n");
    }
} while ($mysqli->next_result());
?>
]]>
   </programlisting>
   <para>&style.procedural;</para>
   <programlisting role="php">
<![CDATA[
<?php
mysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);
$link = mysqli_connect("localhost", "my_user", "my_password", "world");

$query = "SELECT CURRENT_USER();";
$query .= "SELECT Name FROM City ORDER BY ID LIMIT 20, 5";

/* Ejecución de una consulta múltiple */
mysqli_multi_query($link, $query);
do {
    /* Almacenar el conjunto de resultados en PHP */
    if ($result = mysqli_store_result($link)) {
        while ($row = mysqli_fetch_row($result)) {
            printf("%s\n", $row[0]);
        }
        /* Mostrar una separación */
        if (mysqli_more_results($link)) {
            printf("-----------------\n");
        }
    }
    /* Imprimir divisor */
    if (mysqli_more_results($link)) {
        printf("-----------------\n");
    }
} while (mysqli_next_result($link));
?>
]]>
   </programlisting>
   &examples.outputs.similar;
   <screen>
<![CDATA[
my_user@localhost
-----------------
Amersfoort
Maastricht
Dordrecht
Leiden
Haarlemmermeer
]]>
   </screen>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>mysqli_query</function></member>
    <member><function>mysqli_use_result</function></member>
    <member><function>mysqli_store_result</function></member>
    <member><function>mysqli_next_result</function></member>
    <member><function>mysqli_more_results</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
