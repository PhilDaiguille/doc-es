<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: e8ac70bf549a723cb36465667a6109d9933b8619 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->

<chapter xml:id="mysqli.overview" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Introducción</title>

  <para>
    Esta sección proporciona información sobre las soluciones disponibles
    al desarrollar una aplicación PHP que necesita interactuar con una base de datos MySQL.
  </para>

  <para>
    <emphasis role="bold">¿Qué es una API?</emphasis>
  </para>

  <para>
    Una Interfaz de Programación de Aplicaciones, o <literal>Application Programming Interface</literal> (API),
    define las clases, métodos, funciones y variables que su aplicación utilizará para ejecutar diferentes tareas. En el caso
    de las aplicaciones PHP, las comunicaciones con una base de datos se realizan generalmente a través de una API que está expuesta en una extensión PHP.
  </para>

  <para>
    Las API pueden ser procedimentales u orientadas a objetos. Con una API procedimental,
    se pueden llamar funciones para ejecutar comandos; con una API orientada a objetos,
    es necesario crear objetos y llamar a los métodos de estos objetos. De las dos, esta última es generalmente preferida,
    ya que es más moderna y conduce a un código más organizado.
  </para>

  <para>
    Al escribir aplicaciones PHP que deben conectarse a MySQL, hay varias API disponibles. Este documento presenta estas API y
    proporciona la información necesaria para elegir la mejor solución para su aplicación.
  </para>

  <para>
    <emphasis role="bold">¿Qué es un conector?</emphasis>
  </para>

  <para>
    En la documentación de MySQL, el término <emphasis>conector</emphasis>
    se refiere a un software que permite a una aplicación conectarse
    a una base de datos MySQL. MySQL proporciona conectores para una amplia
    colección de lenguajes, incluyendo PHP.
  </para>

  <para>
    Si su aplicación PHP necesita comunicarse con un servidor de
    base de datos, es necesario escribir código para poder conectarse,
    enviar consultas al servidor, etc. Se requiere un software para
    proporcionar la interfaz que PHP utilizará y gestionar las comunicaciones
    entre su aplicación y el servidor de base de datos: eventualmente,
    se necesitan bibliotecas intermedias. Estos programas se denominan
    genéricamente conectores, ya que permiten <emphasis>conectarse</emphasis> a un servidor de base de datos.
  </para>

  <para>
    <emphasis role="bold">¿Qué es un controlador?</emphasis>
  </para>

  <para>
    Un controlador es un software diseñado para comunicarse con
    un tipo particular de base de datos. Un controlador también puede
    llamarse biblioteca, como la <literal>MySQL Client Library</literal> o el
    MySQL Native Driver. Estas bibliotecas implementan el protocolo
    de bajo nivel para comunicarse con un servidor MySQL.
  </para>

  <para>
    Por ejemplo, la capa de abstracción de base de datos
    <link linkend="mysqli.overview.pdo">PHP Data Objects (PDO)</link> utiliza
    uno o más controladores de base de datos. Uno de estos controladores es el
    controlador PDO MYSQL, que permite interactuar con MySQL.
  </para>

  <para>
    A veces, los desarrolladores utilizan los términos conector y controlador
    de manera intercambiable, lo que puede resultar confuso. En la
    documentación de MySQL, el término <quote>controlador</quote> está reservado
    para los programas que son la interfaz específica con la base de datos del paquete.
  </para>

  <para>
    <emphasis role="bold">¿Qué es una extensión?</emphasis>
  </para>

  <para>
    En la documentación de PHP, se encontrará con otro término:
    <emphasis>extensión</emphasis>. El código PHP está compuesto por un núcleo,
    con extensiones opcionales. Las extensiones relacionadas con MySQL de PHP,
    como la extensión <literal>mysqli</literal> y la extensión de controlador
    PDO MySQL, están implementadas utilizando el framework de extensión de PHP.
  </para>

  <para>
    Una extensión expone típicamente una API a un desarrollador PHP,
    para facilitar la programación. Sin embargo,
    algunas extensiones que utilizan el framework de PHP no exponen
    ninguna API al desarrollador PHP.
  </para>

  <para>
    La extensión de controlador PDO MySQL, por ejemplo, no expone ninguna API al
    desarrollador PHP, pero proporciona una interfaz a la capa PDO.
  </para>

  <para>
    Los términos API y extensión no deberían significar lo mismo,
    ya que una extensión PHP no proporciona necesariamente una API particular al desarrollador PHP.
  </para>

  <para>
    <emphasis role="bold">¿Cuáles son las API de PHP para MySQL?</emphasis>
  </para>

  <para>
    Hay dos API principales para conectarse a MySQL:
  </para>

  <itemizedlist>
    <listitem>
      <para>
        La extensión mysqli
      </para>
    </listitem>
    <listitem>
      <para>
        PHP Data Objects (PDO)
      </para>
    </listitem>
  </itemizedlist>

  <para>
    Cada una tiene sus ventajas e inconvenientes. Las siguientes secciones
    ofrecen una presentación rápida de cada API.
  </para>

  <para>
    <emphasis role="bold">¿Qué es la extensión mysqli de PHP?</emphasis>
  </para>

  <para>
    La extensión <literal>mysqli</literal>, o como a veces se la denomina,
    la extensión MySQL <emphasis>mejorada</emphasis> (i para <literal>improved</literal>
    en inglés), fue desarrollada para aprovechar las nuevas características
    de los sistemas MySQL versión 4.1.3 y posteriores. La extensión
    <literal>mysqli</literal> está incluida en PHP desde la versión 5.
  </para>

  <para>
    La extensión <literal>mysqli</literal> tiene una gran cantidad de ventajas
    y mejoras con respecto a la extensión <literal>mysql</literal>:
    <itemizedlist>
      <listitem>
        <para>
          Interfaz orientada a objetos
        </para>
      </listitem>
      <listitem>
        <para>
          Soporte para sentencias preparadas
        </para>
      </listitem>
      <listitem>
        <para>
          Soporte para múltiples sentencias
        </para>
      </listitem>
      <listitem>
        <para>
          Soporte para transacciones
        </para>
      </listitem>
      <listitem>
        <para>
          Capacidades avanzadas de depuración
        </para>
      </listitem>
    </itemizedlist>
  </para>

  <para>
    Además de una interfaz orientada a objetos, la extensión también ofrece
    una interfaz procedimental.
  </para>

  <para>
    La extensión <literal>mysqli</literal> está compilada con el framework
    de PHP, y su código fuente se encuentra en el directorio <filename>ext/mysqli</filename>.
  </para>

  <para>
    Para más información sobre la extensión <literal>mysqli</literal>,
    consulte <xref linkend="book.mysqli"/>.
  </para>

  <para xml:id="mysqli.overview.pdo">
    <emphasis role="bold">¿Qué es la extensión PDO de PHP?</emphasis>
  </para>

  <para>
    <literal>PHP Data Objects</literal>, o PDO, es una capa de abstracción
    de base de datos específica para PHP. PDO ofrece una API coherente para sus
    aplicaciones PHP, independientemente del tipo de base de datos con la que
    se trabaje. En teoría, si se utiliza PDO, se puede cambiar de base de datos,
    por ejemplo de Firebird a MySQL, y solo realizar cambios menores en el código PHP.
  </para>

  <para>
    Otros ejemplos de capas de abstracción de base de datos incluyen
    JDBC para Java y DBI para Perl.
  </para>

  <para>
    Si PDO tiene sus ventajas, como una API limpia, simple y portable,
    sus principales inconvenientes son que no permite utilizar
    todas las características avanzadas de las últimas versiones de MySQL.
    Por ejemplo, PDO no permite realizar consultas múltiples.
  </para>

  <para>
    PDO está implementado utilizando el framework de PHP, y su código fuente
    se encuentra en el directorio <filename>ext/pdo</filename>.
  </para>

  <para>
    Para más información sobre PDO, consulte <xref linkend="book.pdo"/>.
  </para>

  <para>
    <emphasis role="bold">¿Qué es el controlador MySQL para PDO?</emphasis>
  </para>

  <para>
    El controlador PDO MYSQL no es una API en sí mismo, al menos desde el
    punto de vista del desarrollador PHP. De hecho, el controlador PDO MYSQL forma parte
    de PDO, y proporciona las funcionalidades específicas de MySQL. El
    desarrollador llama a la API PDO, pero PDO utiliza el controlador PDO MYSQL
    para gestionar las comunicaciones con MySQL.
  </para>

  <para>
    El controlador PDO MYSQL forma parte de la gran familia de controladores PDO.
    Otros controladores disponibles gestionan las comunicaciones con
    Firebird y PostgreSQL, entre otros.
  </para>

  <para>
    El controlador PDO MYSQL está implementado con el framework de extensión de PHP.
    Su código fuente se encuentra en el directorio <filename>ext/pdo_mysql</filename>.
    No expone ninguna API al desarrollador PHP.
  </para>

  <para>
    Para más detalles sobre el controlador PDO de MySQL, consulte
    <xref linkend="ref.pdo-mysql"/>.
  </para>

  <para xml:id="mysqli.overview.mysqlnd">
    <emphasis role="bold">¿Qué es el controlador nativo MySQL de PHP?</emphasis>
  </para>

  <para>
    Para comunicarse con el servidor MySQL, la extensión
    <literal>mysqli</literal> y el controlador
    PDO MYSQL utilizan una biblioteca de bajo nivel que implementa
    el protocolo MySQL. En el pasado, la única biblioteca disponible
    era la <literal>MySQL Client Library</literal>,
    también llamada <literal>libmysqlclient</literal>.
  </para>

  <para>
    Sin embargo, la interfaz presentada por <literal>libmysqlclient</literal> no estaba
    optimizada para las comunicaciones con PHP, y
    <literal>libmysqlclient</literal> estaba diseñada originalmente en C, para aplicaciones
    de tipo similar. Por esta razón, el controlador MySQL nativo
    <literal>mysqlnd</literal> fue desarrollado como una alternativa a
    <literal>libmysqlclient</literal> para aplicaciones PHP.
  </para>

  <para>
    La extensión <literal>mysqli</literal> y el controlador MySQL nativo pueden
    configurarse individualmente para utilizar <literal>libmysqlclient</literal> o <literal>mysqlnd</literal>. Como
    <literal>mysqlnd</literal> fue diseñado específicamente para el sistema
    PHP, ofrece numerosas ventajas y mejoras con respecto a
    <literal>libmysqlclient</literal>. Se recomienda encarecidamente su uso.
  </para>

  <para>
    El MySQL Native Driver está implementado sobre la base del framework
    de extensión de PHP. El código fuente se encuentra en
    <filename>ext/mysqlnd</filename>. No expone ninguna nueva API
    al desarrollador PHP.
  </para>

  <para>
    <emphasis role="bold">Comparación de características</emphasis>
  </para>

  <para>
    La siguiente tabla compara las características de los métodos
    principales para conectarse a MySQL desde PHP:
  </para>

  <table xml:id="mysqli.overview.option.comparison">
    <title>Comparación de las opciones de API MySQL para PHP</title>
    <tgroup cols="3">
      <colspec colwidth="34*"/>
      <colspec colwidth="33*"/>
      <colspec colwidth="33*"/>
      <thead>
        <row>
          <entry></entry>
          <entry>Extensión mysqli</entry>
          <entry>PDO (con el controlador PDO MySQL Driver y MySQL Native Driver)</entry>
        </row>
      </thead>
      <tbody>
        <row>
          <entry>Versión de introducción en PHP</entry>
          <entry>5.0</entry>
          <entry>5.0</entry>
        </row>
        <row>
          <entry>Estado de desarrollo de MySQL</entry>
          <entry>Desarrollo activo</entry>
          <entry>Desarrollo activo</entry>
        </row>
        <row>
          <entry>La API soporta juegos de caracteres</entry>
          <entry>Sí</entry>
          <entry>Sí</entry>
        </row>
        <row>
          <entry>La API soporta sentencias preparadas</entry>
          <entry>Sí</entry>
          <entry>Sí</entry>
        </row>
        <row>
          <entry>La API soporta sentencias preparadas del lado del cliente</entry>
          <entry>No</entry>
          <entry>Sí</entry>
        </row>
        <row>
          <entry>La API soporta procedimientos almacenados</entry>
          <entry>Sí</entry>
          <entry>Sí</entry>
        </row>
        <row>
          <entry>La API soporta múltiples sentencias</entry>
          <entry>Sí</entry>
          <entry>La mayoría</entry>
        </row>
        <row>
          <entry>Todas las características de MySQL 4.1 y posteriores</entry>
          <entry>Sí</entry>
          <entry>La mayoría</entry>
        </row>
      </tbody>
    </tgroup>
  </table>
</chapter>
