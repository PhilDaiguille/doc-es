<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 38ee86c3c030bc74362a7e5c185192ef8ad5a442 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->

<reference xml:id="class.commonmark-cql" role="class" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">

 <title>La clase CommonMark\CQL</title>
 <titleabbrev>CommonMark\CQL</titleabbrev>

 <partintro>

<!-- {{{ CommonMark\Parser intro -->
  <section xml:id="commonmark-cql.intro">
   &reftitle.intro;
   <para>
    El CommonMark Query Language es un DSL para describir cómo viajar a través de un árbol de nodos CommonMark implementado como un analizador y un compilador para un pequeño conjunto de instrucciones, y una máquina virtual para ejecutar estas instrucciones.
   </para>
   <formalpara>
    <title>Rutas:</title>
     <para>
      En su forma más simplista, una consulta CQL combina las siguientes rutas y <literal>/</literal> para describir cómo viajar a través de un árbol:
      <simplelist>
       <member>firstChild</member>
       <member>lastChild</member>
       <member>previous</member>
       <member>next</member>
       <member>parent</member>
      </simplelist>
      Por ejemplo, <literal>/firstChild/lastChild</literal> viaja al último nodo hijo del primer nodo hijo.
     </para>
   </formalpara>
   <formalpara>
   <title>Bucle</title>
   <para>
    CQL puede ser instruido para bucles, por ejemplo a través de los hijos de, o los hermanos de un nodo particular, utilizando la ruta <literal>children</literal>, o <literal>siblings</literal>. Por ejemplo, <literal>/firstChild/children</literal> viajará a todos los hijos del primer nodo hijo.
   </para>
   </formalpara>
   <formalpara>
    <title>Subconsultas</title>
     <para>
      CQL puede ser instruido para viajar utilizando una subconsulta como <literal>[/firstChild]</literal>. Por ejemplo, <literal>/firstChild/children[/firstChild]</literal> viajará al primer nodo hijo de todos los hijos del primer nodo hijo.
     </para>
   </formalpara>
   <formalpara>
    <title>Restricciones de bucle</title>
     <para>
      Al buclar, CQL puede ser instruido para restringir la ruta recorrida a los nodos de un tipo particular. Por ejemplo <literal>/children(BlockQuote)</literal> viajará a los hijos de un nodo donde el tipo es <literal>BlockQuote</literal>. Los siguientes tipos son reconocidos (insensibles a mayúsculas y minúsculas):
      <simplelist>
       <member>BlockQuote</member>
       <member>List</member>
       <member>Item</member>
       <member>CodeBlock</member>
       <member>HtmlBlock</member>
       <member>CustomBlock</member>
       <member>Paragraph</member>
       <member>Heading</member>
       <member>ThematicBreak</member>
       <member>Text</member>
       <member>SoftBreak</member>
       <member>LineBreak</member>
       <member>Code</member>
       <member>HtmlInline</member>
       <member>CustomInline</member>
       <member>Emphasis</member>
       <member>Strong</member>
       <member>Link</member>
       <member>Image</member>
      </simplelist>
      Los tipos pueden ser utilizados como una unión, por ejemplo <literal>/children(BlockQuote|List)</literal> viajará a los hijos de un nodo donde el tipo es <literal>BlockQuote</literal> o <literal>List</literal>. Los tipos, o uniones de tipos, también pueden ser negados. Por ejemplo <literal>/children(~BlockQuote)</literal> viajará a los hijos de un nodo donde el tipo no es <literal>BlockQuote</literal>, y <literal>/children(~BlockQuote|Paragraph)</literal> viajará a los hijos de un nodo donde el tipo no es <literal>BlockQuote</literal> o <literal>Paragraph</literal>.
     </para>
   </formalpara>
   <formalpara>
    <title>Restricciones de rutas</title>
     <para>
      CQL puede ser instruido para crear un bucle para viajar a un nodo de un tipo particular, a una ruta particular. Por ejemplo, <literal>/firstChild(BlockQuote)</literal> viajará al primer nodo hijo donde el tipo es <literal>BlockQuote</literal>. Tenga en cuenta que como otros bucles para <literal>children</literal> y <literal>siblings</literal>, este tipo de ruta solo puede ser seguido por una subconsulta.
     </para>
   </formalpara>
   <formalpara>
    <title>Notas de implementación</title>
    <para>
     Aunque CQL ha sido implementado como parte de la extensión PHP CommonMark, está separado de PHP y no utiliza la máquina virtual de PHP o la representación interna de los valores.
   </para>
   </formalpara>
  </section>
<!-- }}} -->

  <section xml:id="commonmark-cql.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass><classname>CommonMark\CQL</classname></ooclass>

<!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <classname>CommonMark\CQL</classname>
     </ooclass>
    </classsynopsisinfo>
<!-- }}} -->

    <classsynopsisinfo role="comment">&Constructor;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('commonmark-cql.construct')/db:refsect1[@role='description']/descendant::db:constructorsynopsis[not(@role='procedural')])" />

    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.commonmark-cql')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[not(@role='procedural')])" />
   </classsynopsis>
<!-- }}} -->

  </section>

 </partintro>

  &reference.cmark.commonmark.cql.construct;
  &reference.cmark.commonmark.cql.invoke;

</reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
