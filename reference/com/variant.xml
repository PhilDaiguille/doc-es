<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 14767af0f05dffa6fdb9b49e1a1f4e9ca7022a60 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<reference xml:id="class.variant" role="class" xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
 <titleabbrev>variant</titleabbrev>
 <title>La clase variant</title>
 <partintro>

<!-- {{{ variant intro -->
  <section xml:id="variant.intro">
   &reftitle.intro;
   <para>

    El VARIANT es el equivalente COM de zval para PHP; es una estructura que
    puede contener un valor con un rango de diferentes tipos posibles. La clase variant proporcionada por la extensión COM permite tener más control sobre lo que PHP envía y recibe de COM.
   </para>
  </section>
<!-- }}} -->

  <section xml:id="variant.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis class="class">
    <ooclass>
     <classname>variant</classname>
    </ooclass>

    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.variant')/db:refentry/db:refsect1[@role='description']/descendant::db:constructorsynopsis[@role='variant'])">
     <xi:fallback/>
    </xi:include>
   </classsynopsis>
<!-- }}} -->

  </section>

  <section xml:id="class.variant.examples">
   <title>Ejemplos variant</title>
   <para>
    <example xml:id="com.variant.example.php5">
     <title>Ejemplo variant</title>
     <programlisting role="php">
<![CDATA[
<?php
$v = new variant(42);
print "El tipo es " . variant_get_type($v) . "<br/>";
print "El valor es " . $v . "<br/>";
?>
]]>
     </programlisting>
    </example>
   </para>
   <note>
    <para>
     Al devolver un valor o recuperar una propiedad variant, el variant se convierte en un valor PHP solo cuando hay una correspondencia directa entre los tipos que no produciría una pérdida de información. En todos los demás casos, el valor se devuelve como una instancia de la clase variant. Se puede forzar a PHP a convertir o evaluar el variant como un tipo PHP nativo utilizando los operadores de transtipado explícitamente, o implícitamente a una &string; al mostrarlo gracias a <function>print</function>. Se puede utilizar la gran variedad de funciones variant para realizar operaciones aritméticas sin forzar una conversión y arriesgarse a una pérdida de datos.
    </para>
   </note>
   <para>
    Véase también <function>variant_get_type</function>.
   </para>
  </section>

 </partintro>

 &reference.com.entities.variant;

</reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
