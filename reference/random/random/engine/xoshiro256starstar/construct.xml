<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 1bcc40f8134305cbebf6c8378ee7e5fc8c569674 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="random-engine-xoshiro256starstar.construct" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Random\Engine\Xoshiro256StarStar::__construct</refname>
  <refpurpose>Crea un nuevo motor xoshiro256**</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <constructorsynopsis role="Random\\Engine\\Xoshiro256StarStar">
   <modifier>public</modifier> <methodname>Random\Engine\Xoshiro256StarStar::__construct</methodname>
   <methodparam choice="opt"><type class="union"><type>string</type><type>int</type><type>null</type></type><parameter>seed</parameter><initializer>&null;</initializer></methodparam>
  </constructorsynopsis>
  <para>

  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>seed</parameter></term>
    <listitem>
     <para>
      Cómo se inicializa el estado interno de 256 bits (32 bytes) compuesto por cuatro enteros sin signo de 64 bits
      depende del tipo utilizado como <parameter>seed</parameter>.
      <informaltable>
       <tgroup cols="2">
        <thead>
         <row>
          <entry>Tipo</entry>
          <entry>&Description;</entry>
         </row>
        </thead>
        <tbody>
         <row>
          <entry><type>null</type></entry>
          <entry>
           Rellena el estado con 32 bytes aleatorios generados usando el <acronym>CSPRNG</acronym>.
          </entry>
         </row>
         <row>
          <entry><type>int</type></entry>
          <entry>
           Rellena el estado con cuatro valores consecutivos generados con el algoritmo SplitMix64
           que se inicializó con <parameter>seed</parameter> interpretado como un entero sin signo de 64 bits.
          </entry>
         </row>
         <row>
          <entry><type>string</type></entry>
          <entry>
           Rellena el estado interpretando un <type>string</type> de 32 bytes como cuatro enteros sin signo de 64 bits en little-endian.
          </entry>
         </row>
        </tbody>
       </tgroup>
      </informaltable>
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <!-- Return values commented out, as constructors generally don't return a
      value. Uncomment this if you do need a return values section (for
      example, because there's also a procedural version of the method).
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>

  </para>
 </refsect1>
 -->

 <refsect1 role="errors">
  &reftitle.errors;
  <itemizedlist>
   <listitem>
    <simpara>
     Si la longitud de un <type>string</type> <parameter>seed</parameter>
     no es de 32 bytes, se lanzará un <classname>ValueError</classname>.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Si un <type>string</type> <parameter>seed</parameter> consiste en
     32 bytes NUL (<literal>"\x00"</literal>), se lanzará un <classname>ValueError</classname>.
    </simpara>
   </listitem>
  </itemizedlist>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example annotations="non-interactive">
   <title><function>Random\Engine\Xoshiro256StarStar::__construct</function> ejemplo</title>
   <programlisting role="php">
<![CDATA[
<?php
// Usa una semilla aleatoria de 256 bits.
$e = new \Random\Engine\Xoshiro256StarStar();

$r = new \Random\Randomizer($e);
?>
]]>
   </programlisting>
  </example>
  <example>
   <title>Derivando una semilla de un &string;</title>
   <programlisting role="php">
<![CDATA[
<?php
$string = "Mi semilla de string";

// Hashea el string con SHA-256 usando salida binaria para convertir el
// $string en una semilla de 256 bits. Usar el mismo string resultará
// en la misma secuencia de aleatoriedad.
$e = new \Random\Engine\Xoshiro256StarStar(
    hash('sha256', $string, binary: true)
);

echo bin2hex($e->generate()), "\n";
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
6e013453678388c2
]]>
   </screen>
  </example>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
