<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 43756e54fb34ece9b83559ccdde98864b9c3fb5c Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="random-engine.generate" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Random\Engine::generate</refname>
  <refpurpose>Genera aleatoriedad</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="Random\\Engine">
   <modifier>public</modifier> <type>string</type><methodname>Random\Engine::generate</methodname>
   <void/>
  </methodsynopsis>
  <para>
   Retorna aleatoriedad y avanza el estado del algoritmo en un paso.
  </para>
  <para>
   La aleatoriedad está representada por una cadena binaria que contiene octetos aleatorios. Esta representación
   permite interpretar sin ambigüedad los bits aleatorios generados por el algoritmo, por ejemplo para
   tener en cuenta los diferentes tamaños de salida utilizados por los distintos algoritmos.
  </para>
  <para>
   Los algoritmos que operan nativamente sobre valores enteros deben retornar el entero con los octetos en orden
   little-endian, por ejemplo utilizando la función <function>pack</function> con el código de formato
   <literal>P</literal>. La interfaz de alto nivel proporcionada por el
   <classname>Random\Randomizer</classname> interpretará los octetos aleatorios retornados como enteros no signados
   little-endian si se requiere una representación numérica.
  </para>
  <para>
   Se recomienda encarecidamente que cada bit de la cadena retornada sea seleccionado de manera uniforme e independiente,
   ya que ciertas aplicaciones requieren aleatoriedad a nivel de bits para funcionar correctamente.
   Por ejemplo, los generadores congruenciales lineales generan a menudo aleatoriedad de menor calidad para los bits
   de menor peso del valor entero retornado y por lo tanto no serían adecuados para aplicaciones
   que requieren aleatoriedad a nivel de bits.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  &no.function.parameters;
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Una cadena no vacía que contiene octetos aleatorios.
  </para>

  <note>
   <simpara>
    El <classname>Random\Randomizer</classname> utiliza internamente enteros no signados de 64 bits.
    Si la cadena retornada contiene más de 64 bits (8 octetos) de aleatoriedad, los octetos excedentes
    serán ignorados. Otras aplicaciones pueden ser capaces de procesar más de 64 bits a la vez.
   </simpara>
  </note>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <itemizedlist>
   <listitem>
    <simpara>
     Si la generación de aleatoriedad falla, una <classname>Random\RandomException</classname>
     debe ser emitida. Cualquier otra <classname>Exception</classname> emitida durante la generación debería ser
     capturada y envuelta en una <classname>Random\RandomException</classname>.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Si la cadena retornada está vacía, una <classname>Random\BrokenRandomEngineError</classname>
     será emitida por el <classname>Random\Randomizer</classname>.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     Si el algoritmo implementado está fuertemente sesgado, una <classname>Random\BrokenRandomEngineError</classname>
     puede ser emitida por el <classname>Random\Randomizer</classname> para evitar bucles infinitos
     si un muestreo por rechazo es necesario para retornar resultados no sesgados.
    </simpara>
   </listitem>
  </itemizedlist>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Ejemplo de <function>Random\Engine::generate</function></title>
   <programlisting role="php">
<![CDATA[
<?php
/**
 * Implementa un Generador Congruencial Lineal con módulo 65536,
 * un multiplicador de 61 y un incremento de 17, retornando un entero de 8 bits.
 *
 * Nota: Este motor solo puede ser utilizado con fines de demostración.
 *       Los generadores congruenciales lineales generalmente
 *       generan aleatoriedad de baja calidad y esta implementación específica tiene
 *       un período muy corto de 16 bits que no es adecuado para
 *       casi todos los casos de uso en el mundo real.
 */
final class LinearCongruentialGenerator implements \Random\Engine
{
    private int $state;

    public function __construct(?int $seed = null)
    {
        if ($seed === null) {
            $seed = random_int(0, 0xffff);
        }

        $this->state = $seed & 0xffff;
    }

    public function generate(): string
    {
        $this->state = (61 * $this->state + 17) & 0xffff;

        return pack('C', $this->state >> 8);
    }
}

$r = new \Random\Randomizer(
    new LinearCongruentialGenerator(seed: 1)
);

echo "Número afortunado: ", $r->getInt(0, 99), "\n";
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Número afortunado: 4
]]>
   </screen>
  </example>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
