<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 05579435b4bc64657f0b8313a71b34a504fcb3a4 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes -->
<refentry xml:id="random-randomizer.nextfloat" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Random\Randomizer::nextFloat</refname>
  <refpurpose>Devuelve un float seleccionado del intervalo abierto a la derecha [0.0, 1.0)</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="Random\\Randomizer">
   <modifier>public</modifier> <type>float</type><methodname>Random\Randomizer::nextFloat</methodname>
   <void/>
  </methodsynopsis>
  <para>
   Devuelve un float seleccionado de manera uniforme y equidistribuida del intervalo abierto a la derecha
   de <literal>0.0</literal> hasta, pero sin incluir, <literal>1.0</literal>.
  </para>

  <para>
   La probabilidad de que un float devuelto esté en un subintervalo dado abierto a la derecha
   es proporcional al tamaño del subintervalo.

   Esto significa que la probabilidad de que un float sea <emphasis>menor que</emphasis> <literal>0.5</literal>
   es del 50 %, lo cual es igual a la probabilidad de que un float sea <emphasis>al menos</emphasis> <literal>0.5</literal>.

   Del mismo modo, la probabilidad de que un float esté en el intervalo abierto a la derecha de
   <literal>0.2</literal> hasta, pero sin incluir, <literal>0.25</literal>
   es exactamente del 5 %.
  </para>

  <para>
   Esta propiedad permite utilizar fácilmente <methodname>Random\Randomizer::nextFloat</methodname>
   para generar un bool aleatorio con una probabilidad dada verificando si el float devuelto es
   <emphasis>menor que</emphasis> una probabilidad dada.
  </para>

  <note>
   <para>
    El dominio de los floats devueltos por <methodname>Random\Randomizer::nextFloat</methodname>
    es idéntico al de <code>Randomizer::getFloat(0.0, 1.0, IntervalBoundary::ClosedOpen)</code>.
   </para>

   <para>
    La implementación interna de <methodname>Random\Randomizer::nextFloat</methodname> es más
    eficiente.
   </para>
  </note>

  <caution>
   <para>
    Escalar el valor devuelto a un intervalo diferente utilizando la multiplicación
    o la adición (una transformación afín) podría resultar en un sesgo
    en el valor resultante, ya que los floats no son igualmente densos a lo largo de la línea
    de los números. Como no todos los valores pueden ser representados exactamente por un float, el
    resultado de la transformación afín podría también resultar en valores fuera
    del intervalo solicitado debido a redondeos implícitos.

    Una <link linkend="random-randomizer.getfloat.affine-transformation">explicación detallada</link>
    de los problemas con la transformación afín se proporciona en la documentación
    para <methodname>Random\Randomizer::getFloat</methodname>.
   </para>
   <para>
    Utilizar <methodname>Random\Randomizer::getFloat</methodname> para generar un
    float aleatorio en un intervalo arbitrario. Utilizar <methodname>Random\Randomizer::getInt</methodname>
    para generar un integer aleatorio en un intervalo arbitrario.
   </para>
  </caution>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  &no.function.parameters;
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Un float seleccionado de manera uniforme en el intervalo abierto a la derecha
   (<literal>IntervalBoundary::ClosedOpen</literal>) [0.0, 1.0).

   <literal>0.0</literal> es un valor de retorno posible, <literal>1.0</literal> no lo es.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <itemizedlist>
   &random.engineErrors;
  </itemizedlist>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Ejemplo de <methodname>Random\Randomizer::nextFloat</methodname></title>
   <programlisting role="php">
<![CDATA[
<?php
$r = new \Random\Randomizer();

// El resultado del bool será verdadero con la probabilidad dada.
$chance = 0.5;

$bool = $r->nextFloat() < $chance;

echo ($bool ? "You won" : "You lost"), "\n";
?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
You won
]]>
   </screen>
  </example>

  <example>
   <title>Escalado incorrecto utilizando una transformación afín</title>
   <programlisting role="php">
<![CDATA[
<?php
final class MaxEngine implements Random\Engine {
    public function generate(): string {
        return "\xff";
    }
}

$randomizer = new \Random\Randomizer(new MaxEngine);

$min = 3.5;
$max = 4.5;

// NO HACER ESTO:
//
// Esto mostrará 4.5, a pesar de que nextFloat() muestree
// desde un intervalo abierto a la derecha, que nunca devolverá 1.
printf("Wrong scaling: %.17g", $randomizer->nextFloat() * ($max - $min) + $min);

// Correcto:
// $randomizer->getFloat($min, $max, \Random\IntervalBoundary::ClosedOpen);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Wrong scaling: 4.5
]]>
   </screen>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><methodname>Random\Randomizer::getFloat</methodname></member>
  </simplelist>
 </refsect1>

</refentry>
<!--Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
