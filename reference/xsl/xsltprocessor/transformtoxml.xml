<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 01904e809eaf0aa60e7ce0524400ddd5681c9541 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes Maintainer: Marqitos -->
<refentry xml:id="xsltprocessor.transformtoxml" xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
 <refnamediv>
  <refname>XSLTProcessor::transformToXml</refname>
  <refpurpose>Transformar en XML</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="XSLTProcessor">
   <modifier>public</modifier> <type class="union"><type>string</type><type>null</type><type>false</type></type><methodname>XSLTProcessor::transformToXml</methodname>
   <methodparam><type>object</type><parameter>document</parameter></methodparam>
  </methodsynopsis>
  <para>
   Transforma el nodo fuente en una cadena aplicando una hoja de estilo dada
   por el método <function>xsltprocessor::importStylesheet</function>.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('xsltprocessor.transformtodoc')/db:refsect1[@role='parameters']/*)">
   <xi:fallback/>
  </xi:include>
 </refsect1>
 <xi:include xpointer="domxpath.query..errors" />
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   El resultado de la transformación como una cadena de caracteres o &false; si ocurre un error.
  </para>
 </refsect1>

 <xi:include xpointer="xsltprocessor.transformtouri..changelog" />

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
    <example>
      <title>Transformación en una cadena</title>
      <programlisting role="php">
<![CDATA[
<?php

// Cargar la fuente XML
$xml = new DOMDocument;
$xml->load('collection.xml');

$xsl = new DOMDocument;
$xsl->load('collection.xsl');

// Configurar el transformador
$proc = new XSLTProcessor;
$proc->importStyleSheet($xsl); // adjuntar las reglas XSL

echo $proc->transformToXML($xml);

?>
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
¡Hola! Bienvenido a la increíble colección de CD de Nicolas Eliaszewicz !

<h1>Fight for your mind</h1><h2>por Ben Harper - 1995</h2><hr>
<h1>Electric Ladyland</h1><h2>por Jimi Hendrix - 1997</h2><hr>
]]>
      </screen>
    </example>
    <example>
      <title>Transformación en una cadena utilizando <classname>Dom\Document</classname></title>
      <programlisting role="php">
<![CDATA[
<?php

$xml = Dom\XMLDocument::createFromFile('collection.xml');
$xsl = Dom\XMLDocument::createFromFile('collection.xsl');

// Configurar el transformador
$proc = new XSLTProcessor;
$proc->importStyleSheet($xsl); // adjuntar las reglas XSL

echo $proc->transformToXML($xml);

?>
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
¡Hola! Bienvenido a la increíble colección de CD de Nicolas Eliaszewicz !

<h1>Fight for your mind</h1><h2>por Ben Harper - 1995</h2><hr>
<h1>Electric Ladyland</h1><h2>por Jimi Hendrix - 1997</h2><hr>
]]>
      </screen>
     </example>
   </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>XSLTProcessor::transformToDoc</function></member>
    <member><function>XSLTProcessor::transformToUri</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
