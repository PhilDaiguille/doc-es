<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: a19139232af73a3c2054fcf5a687640ade63a393 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<book xml:id="book.hash" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" annotations="interactive">
 <?phpdoc extension-membership="core" ?>
 <title>HASH Message Digest Framework</title>
 <titleabbrev>Hash</titleabbrev>

 <!-- {{{ preface -->
 <preface xml:id="intro.hash">
  &reftitle.intro;
  <para>
   Esta extensión proporciona funciones que pueden usarse para el procesamiento directo o
   incremental de mensajes de longitud arbitraria utilizando una variedad de
   algoritmos de hash, incluyendo la generación de valores <acronym>HMAC</acronym>
   y derivaciones de claves incluyendo <acronym>HKDF</acronym> y
   <acronym>PBKDF2</acronym>.
  </para>
  <para>
   Existen aproximadamente tres categorías de algoritmos de hash, y una lista completa de
   algoritmos puede encontrarse en la documentación de <function>hash_algos</function>.

   <itemizedlist>
    <listitem>
     <simpara>
      Algoritmos de suma de verificación (como <literal>"crc32b"</literal> o <literal>"adler32"</literal>):
      Estos se utilizan para calcular sumas de verificación, útiles en situaciones como cuando
      se deben detectar errores de transmisión. Suelen ser muy rápidos. Estos
      algoritmos a menudo generan valores que son fácilmente "adivinables" o pueden ser manipulados
      para crear colisiones, por lo que son completamente inadecuados para uso criptográfico.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Algoritmos no criptográficos (como la familia xxHash):
      Estos se utilizan a menudo para calcular valores hash para tablas hash, ya que están
      diseñados para ofrecer una buena distribución sobre entradas de string arbitrarias. También
      suelen ser rápidos, pero no son adecuados para uso criptográfico.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Algoritmos criptográficos (como la familia SHA-2):
      Estos están diseñados para generar valores hash que sean representativos de sus
      entradas pero que no sean adivinables ni propensos a colisiones. El rendimiento suele
      ser una preocupación secundaria, pero el hardware moderno a menudo admite un manejo especial
      para estos algoritmos que PHP intenta utilizar cuando está disponible.
     </simpara>
     <simpara>
      El Centro de Recursos de Seguridad Informática del <acronym>NIST</acronym> tiene
      <link xlink:href="&url.hash.nist-hash-functions;">una explicación de los algoritmos
      actualmente aprobados por los Estándares Federales de Procesamiento de Información
      de los Estados Unidos</link>.
     </simpara>
     <caution>
      <para>
       Algunos de los primeros algoritmos criptográficos, como <literal>"md4"</literal>,
       <literal>"md5"</literal> y <literal>"sha1"</literal>, han demostrado
       ser propensos a ataques de colisión y generalmente se recomienda no
       utilizarlos más para aplicaciones criptográficas.
      </para>
     </caution>
    </listitem>
   </itemizedlist>
  </para>

  <para>
   Consulte también las <link linkend="faq.passwords">preguntas frecuentes sobre el Hashing Seguro de Contraseñas</link>
   para obtener información sobre las mejores prácticas para el uso de funciones hash en el manejo
   de contraseñas.
  </para>
 </preface>
 <!-- }}} -->

 &reference.hash.setup;
 &reference.hash.constants;
 &reference.hash.hashcontext;
 &reference.hash.reference;

</book>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
