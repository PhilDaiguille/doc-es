<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 1f64cacbb5cad160854316005674e7ada0d5e077 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes Maintainer: Marqitos -->
<refentry xml:id="function.var-representation" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>var_representation</refname>
  <refpurpose>Devuelve una representación legible, corta y analizable de una variable</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>var_representation</methodname>
   <methodparam><type>mixed</type><parameter>value</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>
  <simpara>
   <function>var_representation</function> (de la PECL var_representation) devuelve un string de caracteres con información estructurada sobre
   la variable dada. Es similar a <function>var_export</function> con diferencias en la indentación, escape de strings y las representaciones de array.
  </simpara>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>value</parameter></term>
    <listitem>
     <para>
       La variable para generar una representación.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>flags</parameter></term>
    <listitem>
     <para>
       Una máscara de bits que consiste en
       <constant>VAR_REPRESENTATION_SINGLE_LINE</constant>,
       <constant>VAR_REPRESENTATION_UNESCAPED</constant>.
       El comportamiento de estas constantes se describe en la página de las
       <link linkend="var-representation.constants">constantes de var_representation</link>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve la representación de la variable.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo de <function>var_representation</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$a = [1, 2, ['key' => 'value']];
echo var_representation($a), "\n";
echo var_representation($a, VAR_REPRESENTATION_SINGLE_LINE), "\n";
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
[
  1,
  2,
  [
    'key' => 'value',
  ],
]
[1, 2, ['key' => 'value']]
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Escapado de caracteres de control</title>
    <programlisting role="php">
<![CDATA[
<?php
echo var_representation("Content-Length: 123\r\n");
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
"Content-Length: 123\r\n"
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Exportar una <classname>stdClass</classname></title>
    <programlisting role="php">
<![CDATA[
<?php
$person = new stdClass;
$person->name = 'ElePHPant ElePHPantsdotter';
$person->website = 'https://php.net/elephpant.php';

echo var_representation($person);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
(object) [
  'name' => 'ElePHPant ElePHPantsdotter',
  'website' => 'https://php.net/elephpant.php',
]
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Exportar clases</title>
    <programlisting role="php">
<![CDATA[
<?php
class A { public $var; }
$a = new A;
$a->var = 5;
echo var_representation($a);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
\A::__set_state([
  'var' => 5,
])
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Uso con <link linkend="object.set-state">__set_state()</link></title>
    <programlisting role="php">
<![CDATA[
<?php
class A
{
    public $var1;
    public $var2;

    public static function __set_state($an_array)
    {
        $obj = new A;
        $obj->var1 = $an_array['var1'];
        $obj->var2 = $an_array['var2'];
        return $obj;
    }
}

$a = new A;
$a->var1 = 5;
$a->var2 = 'foo';

eval('$b = ' . var_representation($a) . ';'); // $b = \A::__set_state([
                                              //   'var1' => 5,
                                              //   'var2' => 'foo',
                                              // ]);
var_dump($b);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
object(A)#2 (2) {
  ["var1"]=>
  int(5)
  ["var2"]=>
  string(3) "foo"
}
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>var_export</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
