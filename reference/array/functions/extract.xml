<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: f53ab502a11a52e82baca372c37d64e3f298b17c Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.extract" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>extract</refname>
  <refpurpose>Importa variables al símbolo actual desde un array</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>extract</methodname>
   <methodparam><type>array</type><parameter role="reference">array</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter><initializer><constant>EXTR_OVERWRITE</constant></initializer></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>prefix</parameter><initializer>""</initializer></methodparam>
  </methodsynopsis>
  <para>
   Importa variables desde un array a la tabla de símbolos actual.
  </para>
  <para>
   Verifica cada clave para determinar si tiene un nombre de variable válido.
   También verifica colisiones con variables existentes en la tabla de símbolos.
  </para>
  <warning>
   <para>
    No utilice <function>extract</function> con datos no confiables, como entrada de usuario
    (ej. <varname>$_GET</varname>, <varname>$_FILES</varname>).
   </para>
  </warning>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>array</parameter></term>
     <listitem>
      <para>
       Un array asociativo. Esta función trata las claves como nombres de variables y
       los valores como valores de variables. Para cada par clave/valor creará
       una variable en la tabla de símbolos actual, sujeto a los parámetros
       <parameter>flags</parameter> y <parameter>prefix</parameter>.
      </para>
      <para>
       Debe usar un array asociativo; un array indexado numéricamente
       no producirá resultados a menos que use <constant>EXTR_PREFIX_ALL</constant> o
       <constant>EXTR_PREFIX_INVALID</constant>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       La forma en que se tratan las claves inválidas/numéricas y las colisiones se determina
       por los <parameter>flags</parameter> de extracción. Puede ser uno de los
       siguientes valores:
       <variablelist>
        <varlistentry>
         <term><constant>EXTR_OVERWRITE</constant></term>
         <listitem>
          <simpara>
           Si hay una colisión, sobrescribe la variable existente.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_SKIP</constant></term>
         <listitem>
          <simpara>
           Si hay una colisión, no sobrescribe la variable
           existente.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_PREFIX_SAME</constant></term>
         <listitem>
          <simpara>Si hay una colisión, antepone el nombre de la variable con
           <parameter>prefix</parameter>.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_PREFIX_ALL</constant></term>
         <listitem>
          <simpara>
           Antepone todos los nombres de variables con
           <parameter>prefix</parameter>.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_PREFIX_INVALID</constant></term>
         <listitem>
          <simpara>
           Solo antepone nombres de variables inválidas/numéricas con
           <parameter>prefix</parameter>.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_IF_EXISTS</constant></term>
         <listitem>
          <simpara>
           Solo sobrescribe la variable si ya existe en la
           tabla de símbolos actual, de lo contrario no hace nada. Esto es útil
           para definir una lista de variables válidas y luego extraer
           solo esas variables que ha definido de
           <varname>$_REQUEST</varname>, por ejemplo.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_PREFIX_IF_EXISTS</constant></term>
         <listitem>
          <simpara>
           Solo crea nombres de variables con prefijo si la versión sin prefijo
           de la misma variable existe en la tabla de símbolos actual.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_REFS</constant></term>
         <listitem>
          <simpara>
           Extrae variables como referencias. Esto significa efectivamente que
           los valores de las variables importadas aún hacen referencia a los valores del
           parámetro <parameter>array</parameter>. Puede usar este flag
           por sí solo o combinarlo con cualquier otro flag mediante OR con los
           <parameter>flags</parameter>.
          </simpara>
         </listitem>
        </varlistentry>
       </variablelist>
      </para>
      <para>
       Si <parameter>flags</parameter> no está especificado, se
       asume que es <constant>EXTR_OVERWRITE</constant>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>prefix</parameter></term>
     <listitem>
      <para>
       Tenga en cuenta que <parameter>prefix</parameter> solo es requerido si
       <parameter>flags</parameter> es <constant>EXTR_PREFIX_SAME</constant>,
       <constant>EXTR_PREFIX_ALL</constant>, <constant>EXTR_PREFIX_INVALID</constant>
       o <constant>EXTR_PREFIX_IF_EXISTS</constant>. Si
       el resultado con prefijo no es un nombre de variable válido, no se
       importará a la tabla de símbolos. Los prefijos se separan automáticamente de
       la clave del array por un carácter de guión bajo.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve el número de variables importadas con éxito a la tabla de símbolos.
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo de <function>extract</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$size = "large";
$var_array = array(
    "color" => "blue",
    "size"  => "medium",
    "shape" => "sphere"
);

extract($var_array, EXTR_PREFIX_SAME, "wddx");

echo "$color, $size, $shape, $wddx_size\n";

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
blue, large, sphere, medium
]]>
    </screen>
    <para>
     La variable <varname>$size</varname> no fue sobrescrita porque especificamos
     <constant>EXTR_PREFIX_SAME</constant>, lo que resultó en la creación de
     <varname>$wddx_size</varname>. Si se hubiera especificado <constant>EXTR_SKIP</constant>,
     entonces <varname>$wddx_size</varname> ni siquiera se habría creado.
     <constant>EXTR_OVERWRITE</constant> habría hecho que <varname>$size</varname> tuviera
     el valor "medium", y <constant>EXTR_PREFIX_ALL</constant> habría resultado en nuevas variables
     llamadas <varname>$wddx_color</varname>,
     <varname>$wddx_size</varname>, y
     <varname>$wddx_shape</varname>.
    </para>
   </example>
  </para>
 </refsect1>
 <refsect1 role="notes">
  &reftitle.notes;
  <warning>
   <para>
    No utilice <function>extract</function> con datos no confiables, como
    entrada de usuario
    (ej. <varname>$_GET</varname>, <varname>$_FILES</varname>, etc.).
    Si lo hace, asegúrese de usar uno de los valores de
    <parameter>flags</parameter> que no sobrescriban, como
    <constant>EXTR_SKIP</constant> y tenga en cuenta que debe extraer
    en el mismo orden que está definido en
    <link linkend="ini.variables-order">variables_order</link> dentro del
    <link linkend="ini">&php.ini;</link>.
   </para>
  </warning>
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>compact</function></member>
    <member><function>list</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
