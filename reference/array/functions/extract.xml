<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: d58ee8eaaa7f716c51f66f5f1058ab3c42376d98 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<!-- CREDITS: DavidA. -->
<refentry xml:id="function.extract" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>extract</refname>
  <refpurpose>Importa las variables en la tabla de símbolos</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>extract</methodname>
   <methodparam><type>array</type><parameter role="reference">array</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter><initializer><constant>EXTR_OVERWRITE</constant></initializer></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>prefix</parameter><initializer>""</initializer></methodparam>
  </methodsynopsis>
  <para>
   Importa las variables en la
   <link linkend="features.gc.refcounting-basics">tabla de símbolos</link>.
  </para>
  <para>
   <function>extract</function> verifica cada clave para controlar si tiene un nombre
   de variable válido. También verifica las colisiones con variables
   existentes en la tabla de símbolos.
  </para>
  <warning>
   <para>
    No utilice <function>extract</function> en datos no seguros como las entradas de usuario
    (ex. <varname>$_GET</varname>, <varname>$_FILES</varname>).
   </para>
  </warning>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>array</parameter></term>
     <listitem>
      <para>
       Un array asociativo. Esta función crea las variables cuyos
       nombres son los índices de este array, y les asigna el valor asociado.
       Para cada par clave/valor, <function>extract</function> crea
       una variable, con los parámetros <parameter>flags</parameter>
       y <parameter>prefix</parameter>.
      </para>
      <para>
       Debe utilizar un array asociativo. Un array indexado numéricamente
       no producirá ningún resultado, a menos que se utilice la opción
       <constant>EXTR_PREFIX_ALL</constant> o <constant>EXTR_PREFIX_INVALID</constant>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       El tratamiento de las colisiones es
       determinado por <parameter>flags</parameter>.
       Este parámetro puede tomar uno de los siguientes valores:
       <variablelist>
        <varlistentry>
         <term><constant>EXTR_OVERWRITE</constant></term>
         <listitem>
          <simpara>
           En caso de colisión, sobrescribir la variable existente.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_SKIP</constant></term>
         <listitem>
          <simpara>
           En caso de colisión, no sobrescribir la variable existente.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_PREFIX_SAME</constant></term>
         <listitem>
          <simpara>
           En caso de colisión, añadir el prefijo <parameter>prefix</parameter>,
           y crear una nueva variable.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_PREFIX_ALL</constant></term>
         <listitem>
          <simpara>
           Añadir el prefijo <parameter>prefix</parameter> para todas las variables.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_PREFIX_INVALID</constant></term>
         <listitem>
          <simpara>
           Prefijar únicamente las variables con nombres inválidos o numéricos
           con el prefijo <parameter>prefix</parameter>.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_IF_EXISTS</constant></term>
         <listitem>
          <simpara>
           Sobrescribir la variable únicamente si ya existe en la
           tabla de símbolos, y, de lo contrario, no hacer nada. Esto es
           práctico para definir una lista de variables válidas, y luego
           extraer del array los valores que ya se han definido
           gracias a <varname>$_REQUEST</varname>, por ejemplo.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_PREFIX_IF_EXISTS</constant></term>
         <listitem>
          <simpara>
           Crear solo variables prefijadas, si la versión no prefijada
           de la misma variable existe en la tabla de símbolos actual.
          </simpara>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>EXTR_REFS</constant></term>
         <listitem>
          <simpara>
           Extraer las variables como referencias. Esto significa que
           los valores de las variables importadas siempre hacen referencia a los
           valores de las variables originales en el parámetro
           <parameter>array</parameter>. Se puede utilizar esta
           opción sola, o bien combinarla con otras opciones con
           el operador OR, en el parámetro <parameter>flags</parameter>.
          </simpara>
         </listitem>
        </varlistentry>
       </variablelist>
      </para>
      <para>
       Si <parameter>flags</parameter> se omite, <function>extract</function>
       utilizará <constant>EXTR_OVERWRITE</constant> por omisión.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>prefix</parameter></term>
     <listitem>
      <para>
       Tenga en cuenta que <parameter>prefix</parameter> solo es necesario para
       los siguientes valores de <parameter>flags</parameter>:
       <constant>EXTR_PREFIX_SAME</constant>, <constant>EXTR_PREFIX_ALL</constant>,
       <constant>EXTR_PREFIX_INVALID</constant> o <constant>EXTR_PREFIX_IF_EXISTS</constant>.
       Si el resultado prefijado no es un nombre de variable válido,
       no se importará en la tabla de símbolos. Los prefijos se separan automáticamente
       del índice del array por un carácter de subrayado.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve el número de variables importadas con éxito en la tabla
   de símbolos.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo con <function>extract</function></title>
    <para>
     Un uso posible de la función <function>extract</function> es la exportación
     a la tabla de símbolos de arrays de variables devueltos
     por <function>wddx_deserialize</function>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php

/* Supongamos que $var_array es un array devuelto por
   wddx_deserialize */

$size = "large";
$var_array = array(
    "color" => "blue",
    "size"  => "medium",
    "shape" => "sphere"
);

extract($var_array, EXTR_PREFIX_SAME, "wddx");

echo "$color, $size, $shape, $wddx_size\n";

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
blue, large, sphere, medium
]]>
    </screen>
    <para>
     La variable <varname>$size</varname> no fue sobrescrita, ya que se había especificado el parámetro <constant>EXTR_PREFIX_SAME</constant>,
     que permitió la creación de <varname>$wddx_size</varname>. Si
     <constant>EXTR_SKIP</constant> hubiera sido utilizado, entonces
     <varname>$wddx_size</varname> no habría sido creado.
     Con <constant>EXTR_OVERWRITE</constant>, <varname>$size</varname>
     habría tomado el valor "medium", y con <constant>EXTR_PREFIX_ALL</constant>,
     las variables creadas habrían sido <varname>$wddx_color</varname>,
     <varname>$wddx_size</varname> y <varname>$wddx_shape</varname>.
    </para>
   </example>
  </para>
 </refsect1>
 <refsect1 role="notes">
  &reftitle.notes;
  <warning>
   <para>
    No utilice <function>extract</function> en datos desconocidos, como
    los datos de usuario (i.e. <varname>$_GET</varname>,
    <varname>$_FILES</varname>, etc.).
    Si lo hace, asegúrese de utilizar una de las constantes
    <parameter>flags</parameter> que no sobrescriban los valores, como
    <constant>EXTR_SKIP</constant>. Tenga en cuenta también que ahora
    debe extraer en el mismo orden que el definido en <link
    linkend="ini.variables-order">variables_order</link> del <link
    linkend="ini">&php.ini;</link>.
   </para>
  </warning>
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>compact</function></member>
    <member><function>list</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
