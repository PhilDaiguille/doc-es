<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: e784ba3c905ef723c16eb9f90e181708a696523e Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes -->

<refentry xml:id="function.array" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>array</refname>
  <refpurpose>Crea un array</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>array</type><methodname>array</methodname>
   <methodparam rep="repeat"><type>mixed</type><parameter>valores</parameter></methodparam>
  </methodsynopsis>
  <para>
   Crea un array. Léase la sección sobre los
   <link linkend="language.types.array">tipos de array</link> para más información
   sobre lo que es un array, incluyendo detalles sobre la sintaxis alternativa de corchetes (<literal>[]</literal>).
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>valores</parameter></term>
     <listitem>
      <para>
       La sintaxis "índice =&gt; valor", separada por comas,
       define los índices y sus valores. Un índice puede ser una
       cadena o un número. Si el índice es omitido, un índice numérico
       será automáticamente generado (comenzando en
       0). Si el índice es un entero, el próximo índice generado
       tomará el valor del índice más grande + 1. Tenga en cuenta que si dos índices
       idénticos son definidos, el último sobrescribirá al primero.
      </para>
      <para>
       Tener una coma después de definir la última entrada, aunque inútil,
       es una sintaxis válida.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve un array de los argumentos. Los argumentos pueden proporcionar
   un índice utilizando el operador <literal>=&gt;</literal>.
   Léase la sección sobre los <link linkend="language.types.array">tipos de array</link>
   para más información sobre lo que es un array.
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   El siguiente ejemplo muestra cómo crear un array de dos dimensiones,
   cómo especificar los índices de un array asociativo, y cómo
   generar automáticamente índices numéricos.
   <example>
    <title>Ejemplo con <function>array</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$frutas = array (
    "frutas"  => array("a" => "naranja", "b" => "plátano", "c" => "manzana"),
    "números" => array(1, 2, 3, 4, 5, 6),
    "agujeros"   => array("primero", 5 => "segundo", "tercero")
);
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Índice automático con <function>array</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$array = array(1, 1, 1, 1,  1, 8 => 1,  4 => 1, 19, 3 => 13);
print_r($array);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="php">
<![CDATA[
Array
(
    [0] => 1
    [1] => 1
    [2] => 1
    [3] => 13
    [4] => 1
    [8] => 1
    [9] => 19
)
]]>
    </screen>
   </example>
  </para>
  <para>
   Tenga en cuenta que el índice '3' es definido dos veces, y conserva finalmente
   su último valor de 13. El índice '4' es definido después
   del índice '8', y el índice generado siguiente (valor 19) es
   9, ya que el índice más grande es entonces 8.
  </para>
  <para>
   Este ejemplo crea un array cuyos índices comienzan en 1.
   <example>
    <title>Índice comenzando en 1 con <function>array</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$primertrimestre = array(1 => 'Enero', 'Febrero', 'Marzo');
print_r($primertrimestre);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Array
(
    [1] => Enero
    [2] => Febrero
    [3] => Marzo
)
]]>
    </screen>
   </example>
  </para>
  <para>
   Al igual que en Perl, se puede acceder a un valor de un array
   en comillas dobles. Sin embargo, con PHP, se deben rodear el array con llaves.
   <example>
    <title>Acceder a un array en comillas dobles</title>
    <programlisting role="php">
<![CDATA[
<?php

$foo = array('bar' => 'baz');
echo "Hello {$foo['bar']}!"; // Hello baz!

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>
 <refsect1 role="notes">
  &reftitle.notes;
  <para>
   <note>
    <para>
     <function>array</function> es un constructor de lenguaje utilizado
     para representar literalmente los arrays, pero en ningún caso es una función regular.
    </para>
   </note>
  </para>
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>array_pad</function></member>
    <member><function>list</function></member>
    <member><function>count</function></member>
    <member><function>range</function></member>
    <member>&foreach;</member>
    <member>El tipo <link linkend="language.types.array">array</link></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
