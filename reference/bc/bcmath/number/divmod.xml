<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 6fdd8cf867d2f815053cf710ec0be441c33ed675 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="bcmath-number.divmod" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">
 <refnamediv>
  <refname>BcMath\Number::divmod</refname>
  <refpurpose>Devuelve el cociente y el módulo de un número de precisión arbitraria</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="BcMath\\Number">
   <modifier>public</modifier> <type>array</type><methodname>BcMath\Number::divmod</methodname>
   <methodparam><type class="union"><type>BcMath\Number</type><type>string</type><type>int</type></type><parameter>num</parameter></methodparam>
   <methodparam choice="opt"><type class="union"><type>int</type><type>null</type></type><parameter>scale</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <simpara>
   Devuelve el cociente y el módulo de la división de <varname>$this</varname> por <parameter>num</parameter>.
  </simpara>
 </refsect1>

 <!-- parameters -->
 <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('bcmath-number.div')/db:refsect1[@role='parameters'])" />

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <simpara>
   Devuelve un <type>array</type> indexado donde el primer elemento es el cociente en forma de un nuevo objeto
   <classname>BcMath\Number</classname> y el segundo elemento es el módulo en forma de un nuevo objeto
   <classname>BcMath\Number</classname>.
  </simpara>
  <simpara>
   El cociente es siempre un valor entero, por lo que <property>BcMath\Number::scale</property> del cociente será
   siempre <literal>0</literal>, independientemente de si <parameter>scale</parameter> es explícitamente especificado.
  </simpara>
  <simpara>
   Si <parameter>scale</parameter> es explícitamente especificado, <property>BcMath\Number::scale</property> del
   módulo será el valor especificado.
   Cuando el <property>BcMath\Number::scale</property> del objeto de módulo del resultado es definido automáticamente,
   el mayor <property>BcMath\Number::scale</property> de los dos números utilizados para la operación de módulo es utilizado.
  </simpara>
  <simpara>
   Es decir, si los <property>BcMath\Number::scale</property>s de dos valores son <literal>2</literal>
   y <literal>5</literal> respectivamente, el <property>BcMath\Number::scale</property> del módulo
   será <literal>5</literal>.
  </simpara>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <!-- ValueError cases -->
  <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('bcmath-number.add')/db:refsect1[@role='errors']/db:para[1])" />
  <!-- The DivisionByZeroError case -->
  <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('bcmath-number.div')/db:refsect1[@role='errors']/db:simpara[1])" />
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Ejemplo de <methodname>BcMath\Number::divmod</methodname> cuando <parameter>scale</parameter> no es especificado</title>
   <programlisting role="php">
<![CDATA[
<?php
echo '8.3 / 2.22' . PHP_EOL;
[$quot, $rem] = new BcMath\Number('8')->divmod(new BcMath\Number('2.22'));
var_dump($quot, $rem);

echo PHP_EOL . '8.3 / 8.3' . PHP_EOL;
[$quot, $rem] = new BcMath\Number('8.3')->divmod('8.3');
var_dump($quot, $rem);

echo PHP_EOL . '10 / -3' . PHP_EOL;
[$quot, $rem] = new BcMath\Number('10')->divmod(-3);
var_dump($quot, $rem);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
8.3 / 2.22
object(BcMath\Number)#3 (2) {
  ["value"]=>
  string(1) "3"
  ["scale"]=>
  int(0)
}
object(BcMath\Number)#4 (2) {
  ["value"]=>
  string(4) "1.34"
  ["scale"]=>
  int(2)
}

8.3 / 8.3
object(BcMath\Number)#2 (2) {
  ["value"]=>
  string(1) "1"
  ["scale"]=>
  int(0)
}
object(BcMath\Number)#5 (2) {
  ["value"]=>
  string(3) "0.0"
  ["scale"]=>
  int(1)
}

10 / -3
object(BcMath\Number)#3 (2) {
  ["value"]=>
  string(2) "-3"
  ["scale"]=>
  int(0)
}
object(BcMath\Number)#1 (2) {
  ["value"]=>
  string(1) "1"
  ["scale"]=>
  int(0)
}
]]>
   </screen>
  </example>

  <example>
   <title>Ejemplo de <methodname>BcMath\Number::divmod</methodname> especificando <parameter>scale</parameter> explícitamente</title>
   <programlisting role="php">
<![CDATA[
<?php
echo '8.3 / 2.22' . PHP_EOL;
[$quot, $rem] = new BcMath\Number('8')->divmod(new BcMath\Number('2.22'), 1);
var_dump($quot, $rem);

echo PHP_EOL . '8.3 / 8.3' . PHP_EOL;
[$quot, $rem] = new BcMath\Number('8.3')->divmod('8.3', 4);
var_dump($quot, $rem);

echo PHP_EOL . '10 / -3' . PHP_EOL;
[$quot, $rem] = new BcMath\Number('10')->divmod(-3, 5);
var_dump($quot, $rem);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
8.3 / 2.22
object(BcMath\Number)#3 (2) {
  ["value"]=>
  string(1) "3"
  ["scale"]=>
  int(0)
}
object(BcMath\Number)#4 (2) {
  ["value"]=>
  string(3) "1.3"
  ["scale"]=>
  int(1)
}

8.3 / 8.3
object(BcMath\Number)#2 (2) {
  ["value"]=>
  string(1) "1"
  ["scale"]=>
  int(0)
}
object(BcMath\Number)#5 (2) {
  ["value"]=>
  string(6) "0.0000"
  ["scale"]=>
  int(4)
}

10 / -3
object(BcMath\Number)#3 (2) {
  ["value"]=>
  string(2) "-3"
  ["scale"]=>
  int(0)
}
object(BcMath\Number)#1 (2) {
  ["value"]=>
  string(7) "1.00000"
  ["scale"]=>
  int(5)
}
]]>
   </screen>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><function>bcdivmod</function></member>
   <member><methodname>BcMath\Number::div</methodname></member>
   <member><methodname>BcMath\Number::mod</methodname></member>
  </simplelist>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
