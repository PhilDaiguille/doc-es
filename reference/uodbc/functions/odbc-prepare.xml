<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: ed1aff13602c94f86344bdd7c4fbc31f5a71bf84 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes -->

<refentry xml:id="function.odbc-prepare" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>odbc_prepare</refname>
  <refpurpose>Prepara una orden para su ejecución</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>Odbc\Result</type><type>false</type></type><methodname>odbc_prepare</methodname>
   <methodparam><type>Odbc\Connection</type><parameter>odbc</parameter></methodparam>
   <methodparam><type>string</type><parameter>query</parameter></methodparam>
  </methodsynopsis>
  <para>
   Prepara una orden para su ejecución. &odbc.result.object; puede ser utilizado más
   tarde para ejecutar la orden con <function>odbc_execute</function>.
  </para>
  <para>
   Algunas bases de datos (como IBM DB2, MS SQL Server y Oracle)
   soportan los procedimientos almacenados que aceptan los tipos de parámetros
   IN, INOUT y OUT como se definen en las especificaciones ODBC. Sin embargo,
   el driver unificado ODBC soporta actualmente únicamente el tipo de parámetros
   IN para los procedimientos almacenados.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>odbc</parameter></term>
     <listitem>
      &odbc.connection.id;
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>query</parameter></term>
     <listitem>
      <para>
       La consulta a preparar.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &odbc.result.object-return; si la orden SQL ha sido
   preparada con éxito. Retorna &false; si ocurre un error.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     &odbc.changelog.connection-param;
     &odbc.changelog.result-return;
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo con <function>odbc_prepare</function> y <function>odbc_execute</function></title>
    <para>
     En el código siguiente, <varname>$res</varname> solo será
     válido si los tres parámetros para <literal>myproc</literal>
     son parámetros IN:
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$a = 1;
$b = 2;
$c = 3;
$stmt = odbc_prepare($conn, 'CALL myproc(?,?,?)');
$res  = odbc_execute($stmt, array($a, $b, $c));
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   Si necesita llamar a un procedimiento almacenado que utilice parámetros
   INOUT o OUT, se recomienda utilizar la extensión nativa de su
   base de datos
   (por ejemplo <link linkend="ref.oci8">oci8</link> para Oracle).
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>odbc_execute</function></member>
   </simplelist>
   </para>
  </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
