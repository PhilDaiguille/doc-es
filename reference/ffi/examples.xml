<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 8859c8b96cd9e80652813f7bcf561432a5e9f934 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->

<chapter xml:id="ffi.examples" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 &reftitle.examples;
 <section xml:id="ffi.examples-basic">
  <title>Uso básico de FFI</title>
  <para>
   Antes de profundizar en los detalles de la API FFI, echemos un vistazo a algunos ejemplos
   que demuestran la simplicidad de uso de la API FFI para tareas comunes.
  </para>
  <note>
   <para>
    Algunos de estos ejemplos requieren <filename>libc.so.6</filename> y
    por lo tanto no funcionarán en sistemas donde esta biblioteca no esté disponible.
   </para>
  </note>
  <para>
   <example xml:id="ffi.examples.function">
    <title>Llamada a una función desde una biblioteca compartida</title>
    <programlisting role="php">
<![CDATA[
<?php
// crea un objeto FFI, cargando la libc y exportando la función printf()
$ffi = FFI::cdef(
    "int printf(const char *format, ...);", // Declaración C regular
    "libc.so.6");
// llama a la función printf() de C
$ffi->printf("Hello %s!\n", "world");
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Hello world!
]]>
    </screen>
   </example>
  </para>
  <note>
   <para>
    Tenga en cuenta que algunas funciones C requieren convenciones de llamada específicas, por ejemplo <literal>__fastcall</literal>,
    <literal>__stdcall</literal> o <literal>__vectorcall</literal>.
   </para>
  </note>
  <para>
   <example xml:id="ffi.examples.structure">
    <title>Llamada a una función, devolviendo una estructura a través de un argumento</title>
    <programlisting role="php">
<![CDATA[
<?php
// crea la ligadura gettimeofday()
$ffi = FFI::cdef("
    typedef unsigned int time_t;
    typedef unsigned int suseconds_t;

    struct timeval {
        time_t      tv_sec;
        suseconds_t tv_usec;
    };

    struct timezone {
        int tz_minuteswest;
        int tz_dsttime;
    };

    int gettimeofday(struct timeval *tv, struct timezone *tz);
", "libc.so.6");
// crea las estructuras de datos C
$tv = $ffi->new("struct timeval");
$tz = $ffi->new("struct timezone");
// llama a la función gettimeofday() de C
var_dump($ffi->gettimeofday(FFI::addr($tv), FFI::addr($tz)));
// accede a los campos de la estructura de datos C
var_dump($tv->tv_sec);
// imprime toda la estructura de datos C
var_dump($tz);
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
int(0)
int(1555946835)
object(FFI\CData:struct timezone)#3 (2) {
  ["tz_minuteswest"]=>
  int(0)
  ["tz_dsttime"]=>
  int(0)
}
]]>
    </screen>
   </example>
  </para>
  <para>
   <example xml:id="ffi.examples.variable-existing">
    <title>Acceso a variables C existentes</title>
    <programlisting role="php">
<![CDATA[
<?php
// crea un objeto FFI, cargando la libc y exportando la variable errno
$ffi = FFI::cdef(
    "int errno;", // Declaración C regular
    "libc.so.6");
// imprime el valor errno de C
var_dump($ffi->errno);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
int(0)
]]>
    </screen>
   </example>
  </para>
  <para>
   <example xml:id="ffi.examples.variable-creating">
    <title>Creación y modificación de variables C</title>
    <programlisting role="php">
<![CDATA[
<?php
// crea una nueva variable C de tipo int
$x = FFI::new("int");
var_dump($x->cdata);

// asignación simple
$x->cdata = 5;
var_dump($x->cdata);

// asignación compuesta
$x->cdata += 2;
var_dump($x->cdata);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
int(0)
int(5)
int(7)
]]>
    </screen>
   </example>
  </para>
  <para>
   <example xml:id="ffi.examples.array">
    <title>Trabajar con arrays C</title>
    <programlisting role="php">
<![CDATA[
<?php
// crea una estructura de datos en C
$a = FFI::new("long[1024]");
// modificación de la estructura como con un array PHP normal
for ($i = 0; $i < count($a); $i++) {
    $a[$i] = $i;
}
var_dump($a[25]);
$sum = 0;
foreach ($a as $n) {
    $sum += $n;
}
var_dump($sum);
var_dump(count($a));
var_dump(FFI::sizeof($a));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
int(25)
int(523776)
int(1024)
int(8192)
]]>
    </screen>
   </example>
  </para>
  <para>
   <example xml:id="ffi.examples.enum">
    <title>Trabajar con enums en C</title>
    <programlisting role="php">
<![CDATA[
<?php
$a = FFI::cdef('typedef enum _zend_ffi_symbol_kind {
    ZEND_FFI_SYM_TYPE,
    ZEND_FFI_SYM_CONST = 2,
    ZEND_FFI_SYM_VAR,
    ZEND_FFI_SYM_FUNC
} zend_ffi_symbol_kind;
');
var_dump($a->ZEND_FFI_SYM_TYPE);
var_dump($a->ZEND_FFI_SYM_CONST);
var_dump($a->ZEND_FFI_SYM_VAR);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
int(0)
int(2)
int(3)
]]>
    </screen>
   </example>
  </para>
 </section>
 <section xml:id="ffi.examples-callback">
  <title>Funciones de retrollamada</title>
  <para>
   Es posible asignar una clausura PHP a una variable nativa de tipo puntero de función
   o pasarla como argumento de función:
   <example>
    <title>Asignación de una <classname>Closure</classname> PHP a un puntero de función C</title>
    <programlisting role="php">
<![CDATA[
<?php
$zend = FFI::cdef("
    typedef int (*zend_write_func_t)(const char *str, size_t str_length);
    extern zend_write_func_t zend_write;
");

echo "Hello World 1!\n";

$orig_zend_write = clone $zend->zend_write;
$zend->zend_write = function($str, $len) {
    global $orig_zend_write;
    $orig_zend_write("{\n\t", 3);
    $ret = $orig_zend_write($str, $len);
    $orig_zend_write("}\n", 2);
    return $ret;
};
echo "Hello World 2!\n";
$zend->zend_write = $orig_zend_write;
echo "Hello World 3!\n";
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Hello World 1!
{
        Hello World 2!
}
Hello World 3!
]]>
    </screen>
   </example>
   Aunque esto funciona, esta funcionalidad no es soportada por todas las plataformas libffi, no es eficiente
   y provoca fugas de recursos al final de la petición.
   <tip>
    <simpara>
     Por lo tanto, se recomienda minimizar el uso de las funciones de retrollamada PHP.
    </simpara>
   </tip>
  </para>
 </section>

 <section xml:id="ffi.examples-complete">
  <title>Un ejemplo completo de PHP/FFI/precarga</title>
  <informalexample>
   <simpara><filename>php.ini</filename></simpara>
   <programlisting role="ini">
<![CDATA[
ffi.enable=preload
opcache.preload=preload.php
]]>
   </programlisting>
   <simpara><filename>preload.php</filename></simpara>
   <programlisting role="php">
<![CDATA[
<?php
FFI::load(__DIR__ . "/dummy.h");
opcache_compile_file(__DIR__ . "/dummy.php");
?>
]]>
   </programlisting>
   <simpara><filename>dummy.h</filename></simpara>
   <programlisting role="c">
<![CDATA[
#define FFI_SCOPE "DUMMY"
#define FFI_LIB "libc.so.6"

int printf(const char *format, ...);
]]>
   </programlisting>
   <simpara><filename>dummy.php</filename></simpara>
   <programlisting role="php">
<![CDATA[
<?php
final class Dummy {
    private static $ffi = null;
    function __construct() {
        if (is_null(self::$ffi)) {
            self::$ffi = FFI::scope("DUMMY");
        }
    }
    function printf($format, ...$args) {
       return (int) self::$ffi->printf($format, ...$args);
    }
}
?>
]]>
   </programlisting>
   <simpara><filename>test.php</filename></simpara>
   <programlisting role="php">
<![CDATA[
<?php
$d = new Dummy();
$d->printf("Hello %s!\n", "world");
?>
]]>
   </programlisting>
  </informalexample>
 </section>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
