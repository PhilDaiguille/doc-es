<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 20e912791754a34fcdef58be5dfc40b87062b487 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->

<chapter xml:id="svm.examples" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 &reftitle.examples;

 <para>
  El proceso básico consiste en definir argumentos, someter datos de entrenamiento para la generación de un modelo y,
  posteriormente, realizar predicciones basadas en este modelo. Existe un conjunto predeterminado de argumentos que
  deberían proporcionar resultados con la mayoría de las entradas, por lo que se comenzará examinando estos datos.
 </para>
 <para>
  Los datos se someten a través de un fichero, un flujo o un array. Si se proporcionan a través de un fichero o un
  flujo, deben contener una línea por ejemplo de entrenamiento, la cual debe estar formateada como una clase entera
  (generalmente 1 y -1), seguida de una serie de pares clave/característica en orden creciente de características. Las
  características son enteros y los valores son números de punto flotante en el rango 0-1. Por ejemplo:
 </para>
 <para>
  -1 1:0.43 3:0.12 9284:0.2
 </para>
 <para>
  En un problema de clasificación de documentos, por ejemplo, relacionado con el spam, cada línea debe representar un
  documento. Debe haber 2 clases, -1 para el spam y 1 para el ham. Cada característica representa palabras y los valores
  representan la importancia de estas palabras en el documento (por ejemplo, la frecuencia de aparición de estas
  palabras en el documento, con el total en el rango adecuado). Las características con valor 0 (es decir, la palabra no
  aparece en absoluto en el documento) simplemente no se incluirán.
 </para>
 <para>
  En el modo array, los datos deben pasarse en forma de arrays de arrays. Cada subarray debe tener la clase como primer
  elemento, más pares clave => valor para las características/valor.
 </para>
 <para>
  Estos datos se pasan a la función de entrenamiento de la clase SVM, que devolverá un modelo SVM en caso de éxito.
 </para>
 <para>
  Una vez generado el modelo, puede utilizarse para realizar predicciones sobre datos no vistos previamente. Estos
  pueden pasarse en forma de array a la función de predicción del modelo, en el mismo formato que antes, pero sin la
  etiqueta. La respuesta será la clase.
 </para>
 <para>
  Los modelos pueden guardarse y restaurarse según sea necesario, utilizando las funciones de guardado y carga, que
  toman como argumento la ruta al fichero correspondiente.
 </para>
 <para>
  <example>
   <title>Entrenamiento desde un array</title>
   <programlisting role="php">
    <![CDATA[
<?php
$data = array(
 array(-1, 1 => 0.43, 3 => 0.12, 9284 => 0.2),
 array(1, 1 => 0.22, 5 => 0.01, 94 => 0.11),
);

$svm = new SVM();
$model = $svm->train($data);

$data = array(1 => 0.43, 3 => 0.12, 9284 => 0.2);
$result = $model->predict($data);
var_dump($result);
$model->save('model.svm');
?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
    <![CDATA[
int(-1)
]]>
   </screen>
  </example>
  <example>
   <title>Entrenamiento desde un fichero</title>
   <programlisting role="php">
    <![CDATA[
<?php
 $svm = new SVM();
 $model = $svm->train("traindata.txt");
?>
]]>
   </programlisting>
  </example>
 </para>
</chapter>

 <!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
 indent-tabs-mode:nil
 sgml-parent-document:nil
 sgml-default-dtd-file:"~/.phpdoc/manual.ced"
 sgml-exposed-tags:nil
 sgml-local-catalogs:nil
 sgml-local-ecat-files:nil
 End:
 vim600: syn=xml fen fdm=syntax fdl=2 si
 vim: et tw=78 syn=sgml
 vi: ts=1 sw=1
 -->
