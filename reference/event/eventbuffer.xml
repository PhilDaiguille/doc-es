<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 23ea6be076881a34e1d454e9680968ece085f7f6 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->

<reference xml:id="class.eventbuffer" role="class" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">
 <title>La clase EventBuffer</title>
 <titleabbrev>EventBuffer</titleabbrev>
 <partintro>
<!-- {{{ EventBuffer intro -->
  <section xml:id="eventbuffer.intro">
   &reftitle.intro;
   <para>
    La clase <classname>EventBuffer</classname> representa
    "evbuffer" de Libevent, una utilidad para las I/O bufferizadas.
   </para>
   <para>
    Los buffers de eventos son generalmente útiles para realizar la
    parte buffer de una red I/O bufferizada.
   </para>
  </section>
<!-- }}} -->
  <section xml:id="eventbuffer.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass>
     <classname>EventBuffer</classname>
    </ooclass>
<!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <classname>EventBuffer</classname>
     </ooclass>
    </classsynopsisinfo>
<!-- }}} -->
    <classsynopsisinfo role="comment">&Constants;</classsynopsisinfo>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="eventbuffer.constants.eol-any">EventBuffer::EOL_ANY</varname>
     <initializer>0</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="eventbuffer.constants.eol-crlf">EventBuffer::EOL_CRLF</varname>
     <initializer>1</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="eventbuffer.constants.eol-crlf-strict">EventBuffer::EOL_CRLF_STRICT</varname>
     <initializer>2</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="eventbuffer.constants.eol-lf">EventBuffer::EOL_LF</varname>
     <initializer>3</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="eventbuffer.constants.ptr-set">EventBuffer::PTR_SET</varname>
     <initializer>0</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="eventbuffer.constants.ptr-add">EventBuffer::PTR_ADD</varname>
     <initializer>1</initializer>
    </fieldsynopsis>
    <classsynopsisinfo role="comment">&Properties;</classsynopsisinfo>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>readonly</modifier>
     <type>int</type>
     <varname linkend="eventbuffer.props.length">length</varname>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>readonly</modifier>
     <type>int</type>
     <varname linkend="eventbuffer.props.contiguous-space">contiguous_space</varname>
    </fieldsynopsis>
    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.eventbuffer')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[1])" />
   </classsynopsis>
<!-- }}} -->
  </section>
<!-- {{{ EventBuffer properties -->
  <section xml:id="eventbuffer.props">
   &reftitle.properties;
   <variablelist>
    <varlistentry xml:id="eventbuffer.props.length">
     <term>
      <varname>length</varname>
     </term>
     <listitem>
      <para>
       El número de bytes almacenados en un buffer de eventos.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="eventbuffer.props.contiguous-space">
     <term>
      <varname>contiguous_space</varname>
     </term>
     <listitem>
      <para>
       El número de bytes almacenados de manera contigua al inicio del buffer.
       Los bytes en un buffer pueden estar almacenados en varias partes
       separadas de la memoria; esta propiedad devuelve el número de bytes
       actualmente almacenados en la primera parte.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </section>
<!-- }}} -->
<!-- {{{ EventBuffer constants -->
  <section xml:id="eventbuffer.constants">
   &reftitle.constants;
   <variablelist>
    <varlistentry xml:id="eventbuffer.constants.eol-any">
     <term>
      <constant>EventBuffer::EOL_ANY</constant>
     </term>
     <listitem>
      <para>
       El fin de línea es una secuencia de números que representan un retorno de carro
       y una nueva línea. Este formato no es muy útil; existe solo por razones de compatibilidad ascendente.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="eventbuffer.constants.eol-crlf">
     <term>
      <constant>EventBuffer::EOL_CRLF</constant>
     </term>
     <listitem>
      <para>
       El fin de línea es un retorno de carro opcional, seguido de una nueva
       línea. (En otras palabras, es <literal>"\r\n"</literal>
       o <literal>"\n"</literal>). Este formato es útil para analizar
       los protocolos de Internet basados en texto; el estándar requiere
       <literal>"\r\n"</literal> pero algunos clientes proporcionan solo
       <literal>"\n"</literal>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="eventbuffer.constants.eol-crlf-strict">
     <term>
      <constant>EventBuffer::EOL_CRLF_STRICT</constant>
     </term>
     <listitem>
      <para>
       El fin de línea es un simple retorno de carro, seguido de una
       simple nueva línea (también conocido como <literal>"\r\n"</literal>.
       Los valores ASCII son <literal>0x0D</literal> <literal>0x0A</literal>).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="eventbuffer.constants.eol-lf">
     <term>
      <constant>EventBuffer::EOL_LF</constant>
     </term>
     <listitem>
      <para>
       El fin de línea es un simple carácter de nueva línea (también conocido
       como <literal>"\n"</literal>. El valor ASCII es <literal>0x0A</literal>).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="eventbuffer.constants.ptr-set">
     <term>
      <constant>EventBuffer::PTR_SET</constant>
     </term>
     <listitem>
      <para>
       Flag utilizado como argumento del método
       <methodname>EventBuffer::setPosition</methodname>. Si este flag es especificado,
       la posición del puntero es movida a una posición absoluta del buffer.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="eventbuffer.constants.ptr-add">
     <term>
      <constant>EventBuffer::PTR_ADD</constant>
     </term>
     <listitem>
      <para>
       Idéntico a <constant>EventBuffer::PTR_SET</constant>,
       excepto que este flag hace que el método
       <methodname>EventBuffer::setPosition</methodname>
       se mueva a una posición hacia atrás en relación con el número
       de bytes especificado (en lugar de definir una posición absoluta).
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </section>
<!-- }}} -->
 </partintro>

 &reference.event.entities.eventbuffer;

</reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
