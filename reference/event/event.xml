<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 23ea6be076881a34e1d454e9680968ece085f7f6 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->

<reference xml:id="class.event" role="class" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">
 <title>La clase Event</title>
 <titleabbrev>Event</titleabbrev>
 <partintro>
<!-- {{{ Event intro -->
  <section xml:id="event.intro">
   &reftitle.intro;
   <para>
    La clase <classname>Event</classname> representa y lanza un evento
    sobre un descriptor de fichero que se ha vuelto listo para una lectura o una escritura;
    un descriptor de fichero se vuelve listo para una lectura o una escritura
    (I/O únicamente); un tiempo de espera expirado; una señal ocurriendo;
    un evento lanzado por el usuario.
   </para>
   <para>
    Cada evento está asociado con un <classname>EventBase</classname>.
    Sin embargo, el evento nunca será lanzado hasta que no haya sido
    <emphasis>añadido</emphasis> (a través del método <methodname>Event::add</methodname>).
    Un evento añadido permanece en un estado de <emphasis>espera</emphasis>
    hasta que el evento registrado ocurra, pasándolo así a un estado <emphasis>activo</emphasis>. Para gestionar los eventos, el usuario
    debe registrar una función de retrollamada que será llamada cuando el evento
    se vuelva activo. Si el evento está configurado como <emphasis>persistente</emphasis>,
    permanecerá en espera. Si no es persistente, ya no estará en espera
    cuando su función de retrollamada sea ejecutada. El método <methodname>Event::del</methodname>
    <emphasis>elimina</emphasis> el evento, y ya no estará en espera.
    Al llamar al método <methodname>Event::add</methodname>, será añadido
    de nuevo.
   </para>
  </section>
<!-- }}} -->
  <section xml:id="event.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass>
     <classname>Event</classname>
    </ooclass>
<!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <modifier>final</modifier>
      <classname>Event</classname>
     </ooclass>
    </classsynopsisinfo>
<!-- }}} -->
    <classsynopsisinfo role="comment">&Constants;</classsynopsisinfo>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="event.constants.et">Event::ET</varname>
     <initializer>32</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="event.constants.persist">Event::PERSIST</varname>
     <initializer>16</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="event.constants.read">Event::READ</varname>
     <initializer>2</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="event.constants.write">Event::WRITE</varname>
     <initializer>4</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="event.constants.signal">Event::SIGNAL</varname>
     <initializer>8</initializer>
    </fieldsynopsis>
    <fieldsynopsis>
     <modifier>const</modifier>
     <type>int</type>
     <varname linkend="event.constants.timeout">Event::TIMEOUT</varname>
     <initializer>1</initializer>
    </fieldsynopsis>
    <classsynopsisinfo role="comment">&Properties;</classsynopsisinfo>
    <fieldsynopsis>
     <modifier>public</modifier>
     <modifier>readonly</modifier>
     <type>bool</type>
     <varname linkend="event.props.pending">pending</varname>
    </fieldsynopsis>
    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.event')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[1])" />
   </classsynopsis>
<!-- }}} -->
  </section>
<!-- {{{ Event properties -->
  <section xml:id="event.props">
   &reftitle.properties;
   <variablelist>
    <varlistentry xml:id="event.props.pending">
     <term>
      <varname>pending</varname>
     </term>
     <listitem>
      <para>
       Si el evento está en espera. Ver la sección :
       <link linkend="event.persistence">Acerca de la persistencia de los eventos</link>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </section>
<!-- }}} -->
<!-- {{{ Event constants -->
  <section xml:id="event.constants">
   &reftitle.constants;
   <variablelist>
    <varlistentry xml:id="event.constants.et">
     <term>
      <constant>Event::ET</constant>
     </term>
     <listitem>
      <para>
       Indica que el evento debe ser lanzado, si la base de evento
       subyacente soporta este tipo de evento. Esto afecta la semántica
       de <constant>Event::READ</constant> y de <constant>Event::WRITE</constant>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="event.constants.persist">
     <term>
      <constant>Event::PERSIST</constant>
     </term>
     <listitem>
      <para>
       Indica que el evento es persistente. Ver la sección :
       <link linkend="event.persistence">Acerca de la persistencia de los eventos</link>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="event.constants.read">
     <term>
      <constant>Event::READ</constant>
     </term>
     <listitem>
      <para>
       Este flag indica que un evento se vuelve activo cuando el descriptor
       de fichero proporcionado (normalmente, un recurso de flujo o un socket)
       está listo para una lectura.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="event.constants.write">
     <term>
      <constant>Event::WRITE</constant>
     </term>
     <listitem>
      <para>
       Este flag indica que un evento se vuelve activo cuando el descriptor
       de fichero proporcionado (normalmente, un recurso de flujo o un socket)
       está listo para una escritura.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="event.constants.signal">
     <term>
      <constant>Event::SIGNAL</constant>
     </term>
     <listitem>
      <para>
       Utilizado para implementar una detección de señal. Ver la sección a continuación
       sobre la construcción de un evento de tipo señal.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry xml:id="event.constants.timeout">
     <term>
      <constant>Event::TIMEOUT</constant>
     </term>
     <listitem>
      <para>
       Este flag indica que un evento se vuelve activo después de la expiración
       de este tiempo de espera máximo.
      </para>
      <para>
       El flag <constant>Event::TIMEOUT</constant> es ignorado durante la
       construcción de un evento: puede ser indicado o no durante la
       <emphasis>adición</emphasis> del evento. Debe ser definido en el argumento <literal>$what</literal> de la función de retrollamada
       cuando un tiempo de espera máximo haya ocurrido.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </section>
<!-- }}} -->
 </partintro>

 &reference.event.entities.event;

</reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
