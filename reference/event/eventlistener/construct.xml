<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 23ea6be076881a34e1d454e9680968ece085f7f6 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="eventlistener.construct" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>EventListener::__construct</refname>
  <refpurpose>Crea un nuevo oyente de conexión asociado con la base de eventos</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier>
   <methodname>EventListener::__construct</methodname>
   <methodparam>
    <type>EventBase</type>
    <parameter>base</parameter>
   </methodparam>
   <methodparam>
    <type>callable</type>
    <parameter>cb</parameter>
   </methodparam>
   <methodparam>
    <type>mixed</type>
    <parameter>data</parameter>
   </methodparam>
   <methodparam>
    <type>int</type>
    <parameter>flags</parameter>
   </methodparam>
   <methodparam>
    <type>int</type>
    <parameter>backlog</parameter>
   </methodparam>
   <methodparam>
    <type>mixed</type>
    <parameter>target</parameter>
   </methodparam>
  </methodsynopsis>
  <para>
   Crea un nuevo oyente de conexión asociado con la base de eventos.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term>
     <parameter>base</parameter>
    </term>
    <listitem>
     <para>
      Base de eventos asociada.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <parameter>cb</parameter>
    </term>
    <listitem>
     <para>
      Un <type>callable</type> que será invocado cuando una
      nueva conexión sea recibida.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <parameter>data</parameter>
    </term>
    <listitem>
     <para>
      Datos de usuario personalizados adjuntos al parámetro
      <parameter>cb</parameter>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <parameter>flags</parameter>
    </term>
    <listitem>
     <para>
      Una máscara de constantes
      <literal>EventListener::OPT_*</literal>. Ver las
      <link linkend="eventlistener.constants">constantes EventListener</link>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <parameter>backlog</parameter>
    </term>
    <listitem>
     <para>
      Controla el número máximo de conexiones en espera que la pila de red
      permite esperar en un estado "aún no aceptado"; ver la documentación
      de la función <literal>listen</literal> de su sistema para más
      detalles. Si el parámetro <parameter>backlog</parameter> es negativo,
      Libevent intenta obtener un buen valor para este parámetro;
      si es cero, Event asume que la función del sistema <literal>listen</literal>
      ya ha sido llamada en el socket (<parameter>target</parameter>).
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <parameter>target</parameter>
    </term>
    <listitem>
     <para>
      Puede ser un string, un recurso de socket, o un flujo asociado con un socket. En el caso de que este parámetro sea un string, será analizado como dirección IP.
      Será analizado como socket de dominio UNIX si está prefijado
      por <literal>'unix:'</literal>, por ejemplo, <literal>'unix:/tmp/my.sock'</literal>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>
 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>PECL event 1.5.0</entry>
       <entry>
        Se añadió el soporte para sockets de dominio UNIX.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>
    Ejemplo con <function>EventListener::__construct</function></title>
   <programlisting role="php">
<![CDATA[
<?php
/*
 * Un simple servidor de eco, basado en un oyente de conexión libevent.
 *
 * Uso:
 * 1) En una terminal Windows, ejecute:
 *
 * $ php listener.php 9881
 *
 * 2) En otra terminal Windows, abra la siguiente conexión:
 *
 * $ nc 127.0.0.1 9881
 *
 * 3) Comience a escribir. El servidor debería repetir las entradas.
 */

class MyListenerConnection {
    private $bev, $base;

    public function __destruct() {
        $this->bev->free();
    }

    public function __construct($base, $fd) {
        $this->base = $base;

        $this->bev = new EventBufferEvent($base, $fd, EventBufferEvent::OPT_CLOSE_ON_FREE);

        $this->bev->setCallbacks(array($this, "echoReadCallback"), NULL,
            array($this, "echoEventCallback"), NULL);

        if (!$this->bev->enable(Event::READ)) {
            echo "Imposible habilitar READ\n";
            return;
        }
    }

    public function echoReadCallback($bev, $ctx) {
        // Copia todos los datos desde el buffer de entrada hacia el buffer de salida

        // Variante #1
        $bev->output->addBuffer($bev->input);

        /* Variante #2 */
        /*
        $input    = $bev->getInput();
        $output = $bev->getOutput();
        $output->addBuffer($input);
        */
    }

    public function echoEventCallback($bev, $events, $ctx) {
        if ($events & EventBufferEvent::ERROR) {
            echo "Error desde bufferevent\n";
        }

        if ($events & (EventBufferEvent::EOF | EventBufferEvent::ERROR)) {
            //$bev->free();
            $this->__destruct();
        }
    }
}

class MyListener {
    public $base,
        $listener,
        $socket;
    private $conn = array();

    public function __destruct() {
        foreach ($this->conn as &$c) $c = NULL;
    }

    public function __construct($port) {
        $this->base = new EventBase();
        if (!$this->base) {
            echo "Imposible abrir la base del evento";
            exit(1);
        }

        // Variante #1
        /*
        $this->socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);
        if (!socket_bind($this->socket, '0.0.0.0', $port)) {
            echo "Imposible enlazar el socket\n";
            exit(1);
        }
        $this->listener = new EventListener($this->base,
            array($this, "acceptConnCallback"), $this->base,
            EventListener::OPT_CLOSE_ON_FREE | EventListener::OPT_REUSEABLE,
            -1, $this->socket);
         */

        // Variante #2
         $this->listener = new EventListener($this->base,
             array($this, "acceptConnCallback"), $this->base,
             EventListener::OPT_CLOSE_ON_FREE | EventListener::OPT_REUSEABLE, -1,
             "0.0.0.0:$port");

        if (!$this->listener) {
            echo "No se pudo crear el oyente";
            exit(1);
        }

        $this->listener->setErrorCallback(array($this, "accept_error_cb"));
    }

    public function dispatch() {
        $this->base->dispatch();
    }

    // Esta función de retrollamada es llamada cuando hay datos para leer desde $bev
    public function acceptConnCallback($listener, $fd, $address, $ctx) {
        // ¡Tenemos una nueva conexión! Se le define un bufferevent. */
        $base = $this->base;
        $this->conn[] = new MyListenerConnection($base, $fd);
    }

    public function accept_error_cb($listener, $ctx) {
        $base = $this->base;

        fprintf(STDERR, "Error recibido %d (%s) en el oyente. "
            ."Cerrando.\n",
            EventUtil::getLastSocketErrno(),
            EventUtil::getLastSocketError());

        $base->exit(NULL);
    }
}

$port = 9808;

if ($argc > 1) {
    $port = (int) $argv[1];
}
if ($port <= 0 || $port > 65535) {
    exit("Puerto inválido");
}

$l = new MyListener($port);
$l->dispatch();
?>
]]>
   </programlisting>
  </example>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
