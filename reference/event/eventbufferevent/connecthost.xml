<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 23ea6be076881a34e1d454e9680968ece085f7f6 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="eventbufferevent.connecthost" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>EventBufferEvent::connectHost</refname>
  <refpurpose>Conexión a un host</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier>
   <type>bool</type>
   <methodname>EventBufferEvent::connectHost</methodname>
   <methodparam>
    <type>EventDnsBase</type>
    <parameter>dns_base</parameter>
   </methodparam>
   <methodparam>
    <type>string</type>
    <parameter>hostname</parameter>
   </methodparam>
   <methodparam>
    <type>int</type>
    <parameter>port</parameter>
   </methodparam>
   <methodparam
   choice="opt">
    <type>int</type>
    <parameter>family</parameter>
    <initializer>EventUtil::AF_UNSPEC</initializer>
   </methodparam>
  </methodsynopsis>
  <para>
   Resuelve el nombre de host DNS, buscando la dirección del tipo
   <parameter>family</parameter> (constante <literal>EventUtil::AF_*</literal>).
   Si la resolución del nombre falla, la función de retrollamada del evento
   será llamada con un evento de error. Si la resolución tiene éxito,
   se realizará un intento de conexión, de manera similar a como lo hace el método
   <methodname>EventBufferEvent::connect</methodname>.
  </para>
  <para>
   El parámetro <parameter>dns_base</parameter> es opcional.
   Puede ser &null;, o bien un objeto creado con el método
   <methodname>EventDnsBase::__construct</methodname>.
   Para una resolución de nombre de host asíncrona, pase una fuente de evento de base DNS válida. De lo contrario, la resolución del nombre de host
   será bloqueante.
  </para>
  <note>
   <para>
    <classname>EventDnsBase</classname> solo está disponible si
    <literal>Event</literal> está configurado con la opción
    <option role="configure">--with-event-extra</option>
    (biblioteca <literal>event_extra</literal>,
    <emphasis>el soporte de las funcionalidades específicas de libevent
     incluyendo HTTP, DNS y RPC</emphasis>).
   </para>
  </note>
  <note>
   <para>
    <methodname>EventBufferEvent::connectHost</methodname>
    requiere <literal>libevent-2.0.3-alpha</literal> o posteriores.
   </para>
  </note>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term>
     <parameter>dns_base</parameter>
    </term>
    <listitem>
     <para>
      Objeto <classname>EventDnsBase</classname> en el caso
      donde el DNS debe ser resuelto de manera asíncrona. De lo contrario, &null;.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <parameter>hostname</parameter>
    </term>
    <listitem>
     <para>
      El nombre de host al cual se intenta realizar la conexión.
      Los formatos reconocidos son:
      <screen>
<![CDATA[
 www.example.com (hostname)
 1.2.3.4 (ipv4address)
 ::1 (ipv6address)
[::1] ([ipv6address])
]]>
      </screen>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <parameter>port</parameter>
    </term>
    <listitem>
     <para>
      El número del puerto
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <parameter>family</parameter>
    </term>
    <listitem>
     <para>
      Familia de la dirección.
      <constant>EventUtil::AF_UNSPEC</constant>,
      <constant>EventUtil::AF_INET</constant> o
      <constant>EventUtil::AF_INET6</constant>. Ver las
      <link linkend="eventutil.constants">constantes EventUtil</link>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Ejemplo con <function>EventBufferEvent::connectHost</function></title>
   <programlisting role="php">
<![CDATA[
<?php
/* Función de retrollamada de lectura */
function readcb($bev, $base) {
    //$input = $bev->input; //$bev->getInput();

    //$pos = $input->search("TTP");
    $pos = $bev->input->search("TTP");

    while (($n = $bev->input->remove($buf, 1024)) > 0) {
        echo $buf;
    }
}

/* Función de retrollamada del evento */
function eventcb($bev, $events, $base) {
    if ($events & EventBufferEvent::CONNECTED) {
        echo "Conectado.\n";
    } elseif ($events & (EventBufferEvent::ERROR | EventBufferEvent::EOF)) {
        if ($events & EventBufferEvent::ERROR) {
            echo "Error DNS: ", $bev->getDnsErrorString(), PHP_EOL;
        }

        echo "Cerrando\n";
        $base->exit();
        exit("Hecho !\n");
    }
}

$base = new EventBase();

$dns_base = new EventDnsBase($base, TRUE); // Resolución DNS asíncrona
if (!$dns_base) {
    exit("Fallo en la inicialización de la base DNS\n");
}

$bev = new EventBufferEvent($base, /* uso de un socket interno */ NULL,
    EventBufferEvent::OPT_CLOSE_ON_FREE | EventBufferEvent::OPT_DEFER_CALLBACKS,
    "readcb", /* writecb */ NULL, "eventcb", $base
);
if (!$bev) {
    exit("Fallo al crear el socket bufferevent\n");
}

//$bev->setCallbacks("readcb", /* writecb */ NULL, "eventcb", $base);
$bev->enable(Event::READ | Event::WRITE);

$output = $bev->output; //$bev->getOutput();
if (!$output->add(
    "GET {$argv[2]} HTTP/1.0\r\n".
    "Host: {$argv[1]}\r\n".
    "Connection: Close\r\n\r\n"
)) {
    exit("Fallo al añadir la solicitud en el búfer de salida\n");
}

if (!$bev->connectHost($dns_base, $argv[1], 80, EventUtil::AF_UNSPEC)) {
    exit("Imposible conectar al host {$argv[1]}\n");
}

$base->dispatch();
?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
Conectado.
HTTP/1.0 301 Moved Permanently
Location: http://www.google.co.uk/
Content-Type: text/html; charset=UTF-8
Date: Sat, 09 Mar 2013 12:21:19 GMT
Expires: Mon, 08 Apr 2013 12:21:19 GMT
Cache-Control: public, max-age=2592000
Server: gws
Content-Length: 221
X-XSS-Protection: 1; mode=block
X-Frame-Options: SAMEORIGIN

<HTML><HEAD><meta http-equiv="content-type" content="text/html;charset=utf-8">
<TITLE>301 Moved</TITLE></HEAD><BODY>
<H1>301 Moved</H1>
The document has moved
<A HREF="http://www.google.co.uk/">here</A>.
</BODY></HTML>
Cerrando
Hecho !
]]>
   </screen>
  </example>
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member>
    <methodname>EventBufferEvent::connect</methodname>
   </member>
  </simplelist>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
