<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 505ee6ad7881f1d6999752a20008eb9134e0fdd8 Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: yes -->
<appendix xml:id="xpass.constants" xmlns="http://docbook.org/ns/docbook">
 &reftitle.constants;
 &extension.constants;

 <simpara>
  La extensión Xpass proporciona diversos conjuntos de constantes.
  Métodos de hash (<constant>CRYPT_PREFIX_<replaceable>*</replaceable></constant>) para el
  parámetro prefix de <function>crypt_gensalt</function>.
  Códigos de error (<constant>CRYPT_SALT_<replaceable>*</replaceable></constant>) devueltos por
  <function>crypt_checksalt</function>.
  Algoritmos de contraseña (<constant>PASSWORD_<replaceable>*</replaceable></constant>) para el
  parámetro algo de <function>password_hash</function>.
 </simpara>

 <variablelist xml:id="xpass.constants.algo">
  <title>Métodos de hash</title>
  <varlistentry xml:id="constant.crypt-prefix-std-des">
   <term>
    <constant>CRYPT_PREFIX_STD_DES</constant>
    (<type>string</type>)
   </term>
   <listitem>
    <simpara>
     El método de hash original de Unix V7, basado en el cifrado por bloques DES.
     Dado que DES es poco costoso en el hardware moderno,
     solo hay <literal>4096</literal> salts posibles y 2**56 contraseñas distintas,
     que se truncan a 8 caracteres,
     es posible encontrar cualquier contraseña hasheada con este método.
     No debería usarse excepto para soportar sistemas operativos antiguos
     que no soportan ningún otro algoritmo de generación de hash, debido a la debilidad de los hashes DES.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.crypt-prefix-ext-des">
   <term>
    <constant>CRYPT_PREFIX_EXT_DES</constant>
    (<type>string</type>)
   </term>
   <listitem>
    <simpara>
     Una extensión del DES tradicional, que elimina el límite de longitud,
     aumenta el tamaño del salt y hace el costo temporal ajustable.
     Proviene de BSDI BSD/OS y también está disponible en al menos NetBSD,
     OpenBSD y FreeBSD debido al uso de la biblioteca FreeSec de David Burren.
     Es mucho mejor que los hashes DES tradicionales y bigcrypt,
     pero aún no debería usarse para nuevos hashes.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.crypt-prefix-md5">
   <term>
    <constant>CRYPT_PREFIX_MD5</constant>
    (<type>string</type>)
   </term>
   <listitem>
    <simpara>
     Un hash basado en el algoritmo MD5, desarrollado originalmente por Poul-Henning Kamp para FreeBSD.
     Soportado en la mayoría de los Unix libres y versiones más recientes de Solaris.
     No tan débil como los hashes basados en DES,
     pero MD5 es tan poco costoso en el hardware moderno que no debería usarse para nuevos hashes.
     El costo de procesamiento no es ajustable.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.crypt-prefix-blowfish">
   <term>
    <constant>CRYPT_PREFIX_BLOWFISH</constant>
    (<type>string</type>)
   </term>
   <listitem>
    <simpara>
     Un hash basado en el cifrado por bloques Blowfish, modificado para tener un calendario de claves extra-costoso.
     Desarrollado originalmente por Niels Provos y David Mazieres para OpenBSD y también soportado en versiones recientes
     de FreeBSD y NetBSD, en Solaris 10 y más reciente, y en varias distribuciones GNU/*/Linux.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.crypt-prefix-sha256">
   <term>
    <constant>CRYPT_PREFIX_SHA256</constant>
    (<type>string</type>)
   </term>
   <listitem>
    <simpara>
     Un hash basado en SHA-2 con una salida de 256 bits, desarrollado originalmente por Ulrich Drepper para GNU libc.
     Soportado en Linux pero no común en otros lugares.
     Aceptable para nuevos hashes.
     El parámetro de costo de procesamiento por defecto es <literal>5000</literal>,
     lo cual es demasiado bajo para el hardware moderno.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.crypt-prefix-sha512">
   <term>
    <constant>CRYPT_PREFIX_SHA512</constant>
    (<type>string</type>)
   </term>
   <listitem>
    <simpara>
     Un hash basado en SHA-2 con una salida de 512 bits, desarrollado originalmente por Ulrich Drepper para GNU libc.
     Soportado en Linux pero no común en otros lugares.
     Aceptable para nuevos hashes.
     El parámetro de costo de procesamiento por defecto es <literal>5000</literal>,
     lo cual es demasiado bajo para el hardware moderno.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.crypt-prefix-scrypt">
   <term>
    <constant>CRYPT_PREFIX_SCRYPT</constant>
    (<type>string</type>)
   </term>
   <listitem>
    <simpara>
     Scrypt es una función de derivación de clave basada en contraseña creada por Colin Percival,
     originalmente para el servicio de respaldo en línea Tarsnap.
     El algoritmo fue diseñado específicamente para hacer costosas las ataques de hardware
     personalizados a gran escala al requerir grandes cantidades de memoria.
     En 2016, el algoritmo scrypt fue publicado por el IETF como RFC 7914.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.crypt-prefix-gost-yescrypt">
   <term>
    <constant>CRYPT_PREFIX_GOST_YESCRYPT</constant>
    (<type>string</type>)
   </term>
   <listitem>
    <simpara>
     Gost-yescrypt usa la salida de yescrypt como mensaje de entrada para HMAC con
     la función de hash GOST R 34.11-2012 (Streebog) con un resumen de 256 bits.
     Así, las propiedades criptográficas de yescrypt son suplantadas por las de la función de hash GOST.
     Este método de hash es útil en aplicaciones que requieren un hash de contraseña moderno,
     pero deben basarse en algoritmos GOST.
     La función de hash GOST R 34.11-2012 (Streebog) fue publicada por el IETF como RFC 6986.
     Aceptable para nuevos hashes si es necesario.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.crypt-prefix-yescrypt">
   <term>
    <constant>CRYPT_PREFIX_YESCRYPT</constant>
    (<type>string</type>)
   </term>
   <listitem>
    <simpara>
     Yescrypt es un esquema de hash de contraseña escalable diseñado por Solar Designer,
     que se basa en el scrypt de Colin Percival.
     Aunque la fuerza de yescrypt contra los ataques de adivinación de contraseñas proviene de su diseño de algoritmo,
     su seguridad criptográfica está garantizada por su uso de SHA-256 en la capa externa.
     La función de hash SHA-256 fue publicada por el NIST en el FIPS PUB 180-2
     (y sus revisiones posteriores como el FIPS PUB 180-4) y por el IETF como RFC 4634
     (y posteriormente RFC 6234).
     Recomendado para nuevos hashes.
    </simpara>
   </listitem>
  </varlistentry>
 </variablelist>

 <variablelist xml:id="xpass.constants.error">
  <title>Código de error</title>
  <varlistentry xml:id="constant.crypt-salt-ok">
   <term>
    <constant>CRYPT_SALT_OK</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     No hay error.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.crypt-salt-invalid">
   <term>
    <constant>CRYPT_SALT_INVALID</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     Método de hash desconocido o parámetros inválidos.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.crypt-salt-method-disabled">
   <term>
    <constant>CRYPT_SALT_METHOD_DISABLED</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     El método de hash ya no está permitido para ser usado.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.crypt-salt-method-legacy">
   <term>
    <constant>CRYPT_SALT_METHOD_LEGACY</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     El método de hash ya no se considera lo suficientemente fuerte.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.crypt-salt-too-cheap">
   <term>
    <constant>CRYPT_SALT_TOO_CHEAP</constant>
    (<type>int</type>)
   </term>
   <listitem>
    <simpara>
     El costo de los parámetros se considera demasiado bajo.
    </simpara>
   </listitem>
  </varlistentry>
 </variablelist>

 <variablelist xml:id="xpass.constants.password">
  <title>Algoritmo de contraseña</title>
  <varlistentry xml:id="constant.password-sha512">
   <term>
    <constant>PASSWORD_SHA512</constant>
    (<type>string</type>)
   </term>
   <listitem>
    <simpara>
     <constant>PASSWORD_SHA512</constant> se usa para crear nuevos hashes
     de contraseña usando el algoritmo <constant>CRYPT_SHA512</constant>.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.password-yescrypt">
   <term>
    <constant>PASSWORD_YESCRYPT</constant>
    (<type>string</type>)
   </term>
   <listitem>
    <simpara>
     <constant>PASSWORD_YESCRYPT</constant> se usa para crear nuevos hashes
     de contraseña usando el algoritmo <constant>CRYPT_YESCRYPT</constant>.
    </simpara>
   </listitem>
  </varlistentry>
 </variablelist>
</appendix>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
