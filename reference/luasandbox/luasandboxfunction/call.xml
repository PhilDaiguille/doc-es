<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: cdc9d28d334bbc08386fecf8aade66080004a9dd Maintainer: PhilDaiguille Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="luasandboxfunction.call" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>LuaSandboxFunction::call</refname>
  <refpurpose>Llama a una función Lua</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type class="union"><type>array</type><type>bool</type></type><methodname>LuaSandboxFunction::call</methodname>
   <methodparam rep="repeat"><type>string</type><parameter>args</parameter></methodparam>
  </methodsynopsis>
  <para>
   Llama a una función Lua.
  </para>
  <para>
   Los errores considerados como culpa del código PHP harán que la función devuelva el valor &false; y emita <constant>E_WARNING</constant>, por ejemplo, un tipo <type>resource</type> utilizado como argumento. Los errores Lua lanzarán una excepción <classname>LuaSandboxRuntimeError</classname>.
  </para>
  <para>
   Los tipos PHP y Lua se convierten de la siguiente manera:
  </para>
  <para>
   <itemizedlist>
    <listitem>
     <para>Los &null; de PHP son Lua <literal>nil</literal>, y viceversa.</para>
    </listitem>
    <listitem>
     <para>
      Los <type>int</type>s de PHP y <type>float</type>s se convierten en números Lua. El infinito y <constant>NAN</constant> son soportados.
     </para>
    </listitem>
    <listitem>
     <para>
      Los números Lua sin parte fraccionaria entre aproximadamente <literal>-2**53</literal> y <literal>2**53</literal> se convierten en <type>int</type>s PHP, los demás se convierten en <type>float</type>s PHP.
     </para>
    </listitem>
    <listitem>
     <para>Los <type>bool</type>s de PHP son booleanos Lua, y viceversa.</para>
    </listitem>
    <listitem>
     <para>Los <type>string</type>s de PHP son cadenas Lua, y viceversa.</para>
    </listitem>
    <listitem>
     <para>
      Las funciones Lua son objetos PHP <classname>LuaSandboxFunction</classname>, y viceversa. Los <type>callable</type>s PHP generales no son soportados.
     </para>
    </listitem>
    <listitem>
     <para>
      Los <type>array</type>s de PHP se convierten en tablas Lua, y viceversa.
     </para>
     <para>
      <itemizedlist>
       <listitem>
        <para>
         Se debe tener en cuenta que Lua indexa típicamente los arrays a partir de 1, mientras que PHP indexa los arrays a partir de 0. No se hace ningún ajuste para estas diferentes convenciones.
        </para>
       </listitem>
       <listitem>
        <para>Los arrays auto-referenciales no son soportados en ambos sentidos.</para>
       </listitem>
       <listitem>
        <para>Las referencias PHP son desreferenciadas.</para>
       </listitem>
       <listitem>
        <para>
         Los <literal>__pairs</literal> y <literal>__ipairs</literal> de Lua son tratados. <literal>__index</literal> es ignorado.
        </para>
       </listitem>
       <listitem>
        <para>
         Al convertir de PHP a Lua, las claves enteras entre <literal>-2**53</literal> y <literal>2**53</literal> se representan como números Lua. Todas las demás claves se representan como cadenas Lua.
        </para>
       </listitem>
       <listitem>
        <para>
         Al convertir de Lua a PHP, las claves distintas de las cadenas y los números enteros resultarán en un error, así como las colisiones al convertir números en cadenas o viceversa (ya que PHP considera cosas como <literal>$a[0]</literal> y <literal>$a["0"]</literal> como equivalentes).
        </para>
       </listitem>
      </itemizedlist>
     </para>
    </listitem>
    <listitem>
     <para>
      Todos los demás tipos no son soportados y resultarán en un error/excepción, incluyendo los <type>object</type>s PHP generales y los tipos userdata y thread Lua.
     </para>
    </listitem>
   </itemizedlist>
  </para>
  <para>
   Las funciones Lua devuelven intrínsecamente una lista de resultados. Por lo tanto, en caso de éxito, este método devuelve un <type>array</type> que contiene todos los valores devueltos por Lua, con claves <type>int</type> comenzando en cero. Lua puede no devolver ningún resultado, en cuyo caso se devuelve un array vacío.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>args</parameter></term>
    <listitem>
     <para>
      Los argumentos pasados a la función.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve un <type>array</type> de los valores devueltos por la función, que puede estar vacío, &return.falseforfailure;.
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
